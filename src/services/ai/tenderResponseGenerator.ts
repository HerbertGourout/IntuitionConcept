// Service de g√©n√©ration de r√©ponses aux appels d'offres avec Claude AI

import {
  Tender,
  TenderResponse,
  CompanyProfile,
  ResponseGenerationConfig,
  TechnicalProposal,
  FinancialProposal,
  ProjectSchedule,
  TeamMember
} from '../../types/tender';

interface GenerationResult {
  response: TenderResponse;
  cost: number; // En FCFA
  processingTime: number;
}

class TenderResponseGeneratorService {
  private apiKey: string;
  private baseUrl = 'https://api.anthropic.com/v1';
  
  // Co√ªts par token (en FCFA)
  private readonly PRICING = {
    'claude-haiku': {
      input: 0.00025 / 1000,  // 0.25 FCFA / 1M tokens
      output: 0.00125 / 1000  // 1.25 FCFA / 1M tokens
    },
    'claude-sonnet': {
      input: 0.003 / 1000,    // 3 FCFA / 1M tokens
      output: 0.015 / 1000    // 15 FCFA / 1M tokens
    }
  };

  constructor() {
    this.apiKey = import.meta.env.VITE_ANTHROPIC_API_KEY || '';
  }

  /**
   * G√©n√®re une r√©ponse compl√®te √† l'appel d'offres
   */
  async generateResponse(
    tender: Tender,
    companyProfile: CompanyProfile,
    config: ResponseGenerationConfig
  ): Promise<GenerationResult> {
    const startTime = Date.now();
    
    try {
      console.log('ü§ñ G√©n√©ration de la r√©ponse √† l\'appel d\'offres...');
      
      // 1. G√©n√©rer la lettre de motivation
      const coverLetter = await this.generateCoverLetter(tender, companyProfile, config);
      console.log('‚úÖ Lettre de motivation g√©n√©r√©e');
      
      // 2. G√©n√©rer la pr√©sentation de l'entreprise
      const companyPresentation = await this.generateCompanyPresentation(companyProfile, config);
      console.log('‚úÖ Pr√©sentation entreprise g√©n√©r√©e');
      
      // 3. G√©n√©rer la proposition technique
      const technicalProposal = await this.generateTechnicalProposal(tender, companyProfile, config);
      console.log('‚úÖ Proposition technique g√©n√©r√©e');
      
      // 4. G√©n√©rer la proposition financi√®re
      const financialProposal = await this.generateFinancialProposal(tender, companyProfile, config);
      console.log('‚úÖ Proposition financi√®re g√©n√©r√©e');
      
      // 5. G√©n√©rer le planning
      const schedule = await this.generateSchedule(tender, config);
      console.log('‚úÖ Planning g√©n√©r√©');
      
      // 6. Composer l'√©quipe
      const team = await this.composeTeam(tender, companyProfile, config);
      console.log('‚úÖ √âquipe compos√©e');
      
      // 7. S√©lectionner les r√©f√©rences
      const references = this.selectReferences(tender, companyProfile);
      console.log('‚úÖ R√©f√©rences s√©lectionn√©es');
      
      // 8. Calculer les scores
      const scores = this.calculateScores(tender, financialProposal);
      
      const response: TenderResponse = {
        id: `response-${Date.now()}`,
        tenderId: tender.id,
        
        coverLetter,
        companyPresentation,
        technicalProposal,
        financialProposal,
        schedule,
        team,
        references,
        
        administrativeDocuments: this.prepareAdministrativeDocuments(tender, companyProfile),
        
        completenessScore: scores.completeness,
        competitivenessScore: scores.competitiveness,
        winProbability: scores.winProbability,
        suggestions: scores.suggestions,
        
        status: 'generated',
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      const processingTime = Date.now() - startTime;
      const cost = this.estimateCost(config.aiModel, tender);
      
      console.log(`‚úÖ R√©ponse g√©n√©r√©e en ${processingTime}ms pour ${cost.toFixed(2)} FCFA`);
      
      return {
        response,
        cost,
        processingTime
      };
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration r√©ponse:', error);
      throw new Error(`Erreur lors de la g√©n√©ration: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * G√©n√®re la lettre de motivation
   */
  private async generateCoverLetter(
    tender: Tender,
    company: CompanyProfile,
    config: ResponseGenerationConfig
  ): Promise<string> {
    if (!config.useAI || !this.apiKey) {
      return this.generateCoverLetterTemplate(tender, company);
    }

    const prompt = `Tu es un expert en r√©daction de lettres de motivation pour des appels d'offres BTP.

APPEL D'OFFRES:
- Titre: ${tender.title}
- Client: ${tender.client}
- R√©f√©rence: ${tender.reference}
- Description: ${tender.description}

NOTRE ENTREPRISE:
- Nom: ${company.name}
- Exp√©rience: ${new Date().getFullYear() - company.yearFounded} ans
- Employ√©s: ${company.employeeCount}
- Projets compl√©t√©s: ${company.completedProjects}
- Sp√©cialisations: ${company.specializations.join(', ')}

R√©dige une lettre de motivation professionnelle et convaincante (300-400 mots) qui:
1. Exprime notre int√©r√™t pour le projet
2. Met en avant notre exp√©rience pertinente
3. Souligne notre compr√©hension des enjeux
4. Affirme notre engagement √† respecter les exigences
5. Conclut avec confiance

Ton: ${config.tone === 'formal' ? 'Tr√®s formel et protocolaire' : 'Professionnel mais accessible'}
Langue: Fran√ßais`;

    const response = await this.callClaude(prompt, config.aiModel);
    return response;
  }

  /**
   * G√©n√®re la pr√©sentation de l'entreprise
   */
  private async generateCompanyPresentation(
    company: CompanyProfile,
    config: ResponseGenerationConfig
  ): Promise<string> {
    if (!config.useAI || !this.apiKey) {
      return this.generateCompanyPresentationTemplate(company);
    }

    const prompt = `R√©dige une pr√©sentation professionnelle de notre entreprise BTP (400-500 mots):

INFORMATIONS:
- Nom: ${company.name}
- Forme juridique: ${company.legalForm}
- Ann√©e de cr√©ation: ${company.yearFounded}
- Effectif: ${company.employeeCount} employ√©s
- Chiffre d'affaires: ${company.annualRevenue.toLocaleString()} FCFA
- Certifications: ${company.certifications.join(', ')}
- Sp√©cialisations: ${company.specializations.join(', ')}
- Projets compl√©t√©s: ${company.completedProjects}
- Valeur totale des projets: ${company.totalProjectValue.toLocaleString()} FCFA

Structure:
1. Introduction et historique
2. Domaines d'expertise
3. Moyens humains et mat√©riels
4. Certifications et qualifications
5. R√©alisations marquantes
6. Engagement qualit√© et s√©curit√©

Ton: Professionnel et cr√©dible
Langue: Fran√ßais`;

    const response = await this.callClaude(prompt, config.aiModel);
    return response;
  }

  /**
   * G√©n√®re la proposition technique
   */
  private async generateTechnicalProposal(
    tender: Tender,
    company: CompanyProfile,
    config: ResponseGenerationConfig
  ): Promise<TechnicalProposal> {
    if (!config.useAI || !this.apiKey) {
      return this.generateTechnicalProposalTemplate(tender, company);
    }

    const prompt = `Tu es un ing√©nieur BTP expert. G√©n√®re une proposition technique d√©taill√©e.

PROJET:
${tender.description}

EXIGENCES TECHNIQUES:
${tender.requirements.filter(r => r.type === 'technical').map(r => `- ${r.description}`).join('\n')}

NOS MOYENS:
- √âquipements: ${company.equipment.map(e => `${e.name} (${e.quantity})`).join(', ')}
- Sp√©cialisations: ${company.specializations.join(', ')}

R√©ponds en JSON avec cette structure:
{
  "methodology": "Description de la m√©thodologie (200 mots)",
  "approach": "Approche technique d√©taill√©e (300 mots)",
  "qualityAssurance": "Plan d'assurance qualit√© (150 mots)",
  "riskManagement": "Gestion des risques (150 mots)",
  "innovations": ["Innovation 1", "Innovation 2", "Innovation 3"],
  "equipment": [
    {
      "name": "Nom de l'√©quipement",
      "quantity": 2,
      "specification": "Sp√©cifications"
    }
  ]
}`;

    const response = await this.callClaude(prompt, config.aiModel);
    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    return this.generateTechnicalProposalTemplate(tender, company);
  }

  /**
   * G√©n√®re la proposition financi√®re
   */
  private async generateFinancialProposal(
    tender: Tender,
    company: CompanyProfile,
    config: ResponseGenerationConfig
  ): Promise<FinancialProposal> {
    // Estimation bas√©e sur le budget du tender
    const estimatedBudget = tender.budget || 50000000;
    const adjustmentFactor = config.competitivePricing ? 0.95 : 1.0;
    const totalAmount = Math.round(estimatedBudget * adjustmentFactor);

    // D√©composition standard
    const breakdown = [
      {
        category: 'Main d\'≈ìuvre',
        description: 'Personnel qualifi√© et encadrement',
        quantity: 1,
        unitPrice: Math.round(totalAmount * 0.35),
        totalPrice: Math.round(totalAmount * 0.35)
      },
      {
        category: 'Mat√©riaux',
        description: 'Fourniture de tous les mat√©riaux',
        quantity: 1,
        unitPrice: Math.round(totalAmount * 0.40),
        totalPrice: Math.round(totalAmount * 0.40)
      },
      {
        category: '√âquipements',
        description: 'Location et utilisation d\'√©quipements',
        quantity: 1,
        unitPrice: Math.round(totalAmount * 0.15),
        totalPrice: Math.round(totalAmount * 0.15)
      },
      {
        category: 'Frais g√©n√©raux',
        description: 'Gestion, assurances, garanties',
        quantity: 1,
        unitPrice: Math.round(totalAmount * 0.10),
        totalPrice: Math.round(totalAmount * 0.10)
      }
    ];

    return {
      totalAmount,
      currency: tender.currency,
      breakdown,
      paymentTerms: '30% √† la commande, 40% √† mi-parcours, 30% √† la r√©ception',
      validityPeriod: 90,
      warranty: 'Garantie d√©cennale conform√©ment √† la r√©glementation'
    };
  }

  /**
   * G√©n√®re le planning
   */
  private async generateSchedule(
    tender: Tender,
    config: ResponseGenerationConfig
  ): Promise<ProjectSchedule> {
    const duration = tender.duration || 180;
    const startDate = tender.startDate || new Date();
    
    // Phases standards
    const phases = [
      {
        id: 'phase-1',
        name: 'Pr√©paration et installation de chantier',
        description: 'Mise en place des installations de chantier',
        startDate: new Date(startDate),
        endDate: new Date(startDate.getTime() + 15 * 24 * 60 * 60 * 1000),
        duration: 15,
        dependencies: [],
        milestones: [
          {
            name: 'Installation compl√®te',
            date: new Date(startDate.getTime() + 15 * 24 * 60 * 60 * 1000),
            deliverable: 'Chantier op√©rationnel'
          }
        ]
      },
      {
        id: 'phase-2',
        name: 'Travaux de gros ≈ìuvre',
        description: 'R√©alisation des fondations et structure',
        startDate: new Date(startDate.getTime() + 15 * 24 * 60 * 60 * 1000),
        endDate: new Date(startDate.getTime() + (duration * 0.5) * 24 * 60 * 60 * 1000),
        duration: Math.round(duration * 0.35),
        dependencies: ['phase-1'],
        milestones: [
          {
            name: 'Structure achev√©e',
            date: new Date(startDate.getTime() + (duration * 0.5) * 24 * 60 * 60 * 1000),
            deliverable: 'Gros ≈ìuvre termin√©'
          }
        ]
      },
      {
        id: 'phase-3',
        name: 'Second ≈ìuvre',
        description: 'Finitions et √©quipements',
        startDate: new Date(startDate.getTime() + (duration * 0.5) * 24 * 60 * 60 * 1000),
        endDate: new Date(startDate.getTime() + (duration * 0.9) * 24 * 60 * 60 * 1000),
        duration: Math.round(duration * 0.4),
        dependencies: ['phase-2'],
        milestones: [
          {
            name: 'Finitions achev√©es',
            date: new Date(startDate.getTime() + (duration * 0.9) * 24 * 60 * 60 * 1000),
            deliverable: 'Second ≈ìuvre termin√©'
          }
        ]
      },
      {
        id: 'phase-4',
        name: 'R√©ception et livraison',
        description: 'Tests, corrections et r√©ception',
        startDate: new Date(startDate.getTime() + (duration * 0.9) * 24 * 60 * 60 * 1000),
        endDate: new Date(startDate.getTime() + duration * 24 * 60 * 60 * 1000),
        duration: Math.round(duration * 0.1),
        dependencies: ['phase-3'],
        milestones: [
          {
            name: 'R√©ception d√©finitive',
            date: new Date(startDate.getTime() + duration * 24 * 60 * 60 * 1000),
            deliverable: 'Projet livr√©'
          }
        ]
      }
    ];

    return {
      phases,
      totalDuration: duration,
      criticalPath: ['phase-1', 'phase-2', 'phase-3', 'phase-4']
    };
  }

  /**
   * Compose l'√©quipe
   */
  private async composeTeam(
    tender: Tender,
    company: CompanyProfile,
    config: ResponseGenerationConfig
  ): Promise<TeamMember[]> {
    // √âquipe type selon la complexit√©
    const baseTeam: TeamMember[] = [
      {
        id: 'member-1',
        name: 'Chef de Projet',
        role: 'Directeur de Projet',
        experience: 15,
        qualifications: ['Ing√©nieur Civil', 'PMP'],
        availability: 100
      },
      {
        id: 'member-2',
        name: 'Ing√©nieur Principal',
        role: 'Ing√©nieur en Chef',
        experience: 12,
        qualifications: ['Ing√©nieur BTP', 'Expert Structures'],
        availability: 100
      },
      {
        id: 'member-3',
        name: 'Conducteur de Travaux',
        role: 'Supervision Chantier',
        experience: 10,
        qualifications: ['Conducteur de Travaux', 'S√©curit√© Chantier'],
        availability: 100
      }
    ];

    if (tender.complexity === 'complex') {
      baseTeam.push(
        {
          id: 'member-4',
          name: 'Ing√©nieur Qualit√©',
          role: 'Contr√¥le Qualit√©',
          experience: 8,
          qualifications: ['Ing√©nieur Qualit√©', 'ISO 9001'],
          availability: 50
        },
        {
          id: 'member-5',
          name: 'Responsable HSE',
          role: 'Hygi√®ne S√©curit√© Environnement',
          experience: 7,
          qualifications: ['HSE', 'Pr√©vention des Risques'],
          availability: 50
        }
      );
    }

    return baseTeam;
  }

  /**
   * S√©lectionne les r√©f√©rences pertinentes
   */
  private selectReferences(tender: Tender, company: CompanyProfile): any[] {
    // Pour le MVP, retourner des r√©f√©rences fictives
    // TODO: Int√©grer avec la base de donn√©es de projets r√©els
    return [
      {
        projectId: 'proj-1',
        projectName: 'Construction Immeuble R+5',
        client: 'Soci√©t√© Immobili√®re ABC',
        value: 150000000,
        duration: 240,
        completionDate: new Date('2023-06-30'),
        description: 'Construction d\'un immeuble r√©sidentiel de 5 √©tages'
      },
      {
        projectId: 'proj-2',
        projectName: 'R√©habilitation √âcole Primaire',
        client: 'Minist√®re de l\'√âducation',
        value: 45000000,
        duration: 120,
        completionDate: new Date('2023-12-15'),
        description: 'R√©novation compl√®te d\'une √©cole de 12 classes'
      }
    ];
  }

  /**
   * Pr√©pare les documents administratifs
   */
  private prepareAdministrativeDocuments(tender: Tender, company: CompanyProfile): any[] {
    return [
      {
        name: 'Registre de Commerce',
        type: 'legal',
        status: 'pending'
      },
      {
        name: 'Attestation Fiscale',
        type: 'fiscal',
        status: 'pending'
      },
      {
        name: 'Assurance Responsabilit√© Civile',
        type: 'insurance',
        status: 'pending'
      },
      {
        name: 'Certificat de Qualification',
        type: 'certification',
        status: 'pending'
      }
    ];
  }

  /**
   * Calcule les scores de la r√©ponse
   */
  private calculateScores(tender: Tender, financial: FinancialProposal): any {
    // Compl√©tude: % des exigences couvertes
    const completeness = 85; // TODO: Calculer r√©ellement
    
    // Comp√©titivit√©: Position prix vs budget
    const competitiveness = tender.budget 
      ? Math.min(100, (tender.budget / financial.totalAmount) * 100)
      : 75;
    
    // Probabilit√© de gagner
    const winProbability = (completeness * 0.6 + competitiveness * 0.4);
    
    const suggestions = [];
    if (completeness < 90) {
      suggestions.push('Ajouter plus de d√©tails techniques pour am√©liorer la compl√©tude');
    }
    if (competitiveness < 80) {
      suggestions.push('Consid√©rer une optimisation des co√ªts pour √™tre plus comp√©titif');
    }
    if (winProbability > 80) {
      suggestions.push('Excellente proposition ! V√©rifier les derniers d√©tails avant soumission');
    }
    
    return {
      completeness,
      competitiveness,
      winProbability,
      suggestions
    };
  }

  /**
   * Appelle l'API Claude
   */
  private async callClaude(prompt: string, model: 'claude-haiku' | 'claude-sonnet'): Promise<string> {
    const modelName = model === 'claude-haiku' 
      ? 'claude-3-haiku-20240307'
      : 'claude-3-sonnet-20240229';

    const response = await fetch(`${this.baseUrl}/messages`, {
      method: 'POST',
      headers: {
        'x-api-key': this.apiKey,
        'anthropic-version': '2023-06-01',
        'content-type': 'application/json'
      },
      body: JSON.stringify({
        model: modelName,
        max_tokens: 4096,
        messages: [{
          role: 'user',
          content: prompt
        }]
      })
    });

    if (!response.ok) {
      throw new Error(`Erreur API Claude: ${response.status}`);
    }

    const data = await response.json();
    return data.content[0].text;
  }

  /**
   * Estime le co√ªt de g√©n√©ration
   */
  private estimateCost(model: 'claude-haiku' | 'claude-sonnet', tender: Tender): number {
    // Estimation grossi√®re: ~10k tokens input, ~5k tokens output
    const pricing = this.PRICING[model];
    const inputTokens = 10000;
    const outputTokens = 5000;
    
    return (inputTokens * pricing.input + outputTokens * pricing.output) * 655; // Conversion USD -> FCFA
  }

  // Templates de fallback
  private generateCoverLetterTemplate(tender: Tender, company: CompanyProfile): string {
    return `Objet : R√©ponse √† l'appel d'offres ${tender.reference}

Madame, Monsieur,

Nous avons l'honneur de vous soumettre notre offre pour le projet "${tender.title}".

${company.name}, forte de ${new Date().getFullYear() - company.yearFounded} ann√©es d'exp√©rience dans le secteur du BTP, a r√©alis√© avec succ√®s ${company.completedProjects} projets pour une valeur totale de ${company.totalProjectValue.toLocaleString()} FCFA.

Notre expertise dans ${company.specializations.join(', ')} nous permet d'appr√©hender pleinement les enjeux de ce projet et de vous proposer une solution technique et financi√®re optimale.

Nous nous engageons √† respecter scrupuleusement le cahier des charges et √† livrer un ouvrage de qualit√© dans les d√©lais impartis.

Restant √† votre disposition pour tout compl√©ment d'information, nous vous prions d'agr√©er, Madame, Monsieur, l'expression de notre consid√©ration distingu√©e.`;
  }

  private generateCompanyPresentationTemplate(company: CompanyProfile): string {
    return `PR√âSENTATION DE L'ENTREPRISE

${company.name} est une entreprise ${company.legalForm} cr√©√©e en ${company.yearFounded}, sp√©cialis√©e dans ${company.specializations.join(', ')}.

MOYENS HUMAINS
Effectif : ${company.employeeCount} collaborateurs qualifi√©s

MOYENS MAT√âRIELS
${company.equipment.map(e => `- ${e.name} : ${e.quantity} unit√©(s)`).join('\n')}

CERTIFICATIONS
${company.certifications.join(', ')}

R√âALISATIONS
${company.completedProjects} projets r√©alis√©s pour un montant total de ${company.totalProjectValue.toLocaleString()} FCFA.`;
  }

  private generateTechnicalProposalTemplate(tender: Tender, company: CompanyProfile): TechnicalProposal {
    return {
      methodology: 'Nous proposons une approche m√©thodique en phases successives, avec un contr√¥le qualit√© √† chaque √©tape.',
      approach: 'Notre approche technique s\'appuie sur notre exp√©rience et nos moyens mat√©riels pour garantir la qualit√© et le respect des d√©lais.',
      qualityAssurance: 'Mise en place d\'un plan qualit√© avec contr√¥les r√©guliers et tra√ßabilit√© compl√®te.',
      riskManagement: 'Identification et mitigation proactive des risques tout au long du projet.',
      innovations: [
        'Utilisation de techniques modernes de construction',
        'Optimisation des d√©lais par planification avanc√©e',
        'Suivi digital du chantier'
      ],
      equipment: company.equipment.map(e => ({
        name: e.name,
        quantity: e.quantity,
        specification: `${e.condition} √©tat`
      }))
    };
  }
}

// Instance singleton
export const tenderResponseGenerator = new TenderResponseGeneratorService();

export default TenderResponseGeneratorService;
