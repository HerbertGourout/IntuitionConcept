/**
 * Script de test pour v√©rifier la cl√© API Replicate
 * Usage: node test-replicate.js
 */

import Replicate from 'replicate';
import * as dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' });

async function testReplicateAPI() {
  console.log('üß™ Test de la cl√© API Replicate...\n');

  // V√©rifier si la cl√© existe
  const apiKey = process.env.VITE_REPLICATE_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå ERREUR: VITE_REPLICATE_API_KEY non trouv√©e dans .env.local');
    console.log('\nüìù Pour configurer:');
    console.log('1. Cr√©ez un fichier .env.local √† la racine du projet');
    console.log('2. Ajoutez: VITE_REPLICATE_API_KEY=r8_votre_cle_ici');
    console.log('3. Obtenez votre cl√© sur: https://replicate.com/account/api-tokens\n');
    process.exit(1);
  }

  console.log('‚úÖ Cl√© API trouv√©e:', apiKey.substring(0, 10) + '...' + apiKey.substring(apiKey.length - 4));
  console.log('üìè Longueur de la cl√©:', apiKey.length, 'caract√®res\n');

  // Initialiser Replicate
  try {
    const replicate = new Replicate({ auth: apiKey });
    console.log('‚úÖ Client Replicate initialis√©\n');

    // Test 1: V√©rifier les mod√®les disponibles
    console.log('üîç Test 1: R√©cup√©ration des informations du compte...');
    try {
      // Tester avec un mod√®le simple et rapide
      const model = await replicate.models.get('stability-ai', 'sdxl');
      console.log('‚úÖ Mod√®le SDXL accessible');
      console.log('   - Nom:', model.name);
      console.log('   - Description:', model.description?.substring(0, 100) + '...');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'acc√®s au mod√®le:', error.message);
    }

    // Test 2: V√©rifier le cr√©dit
    console.log('\nüí∞ Test 2: V√©rification du cr√©dit...');
    console.log('‚ÑπÔ∏è  Note: Replicate ne fournit pas d\'API pour v√©rifier le cr√©dit directement');
    console.log('   Consultez: https://replicate.com/account/billing\n');

    // Test 3: Test de g√©n√©ration simple (comment√© pour √©viter les co√ªts)
    console.log('üé® Test 3: G√©n√©ration d\'image (D√âSACTIV√â pour √©viter les co√ªts)');
    console.log('   Pour tester une vraie g√©n√©ration, d√©commentez le code dans test-replicate.js\n');
    
    /*
    // D√âCOMMENTEZ POUR TESTER UNE VRAIE G√âN√âRATION (co√ªt: ~$0.002)
    console.log('‚è≥ G√©n√©ration en cours...');
    const output = await replicate.run(
      "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
      {
        input: {
          prompt: "a simple red circle on white background, minimalist",
          num_outputs: 1,
          num_inference_steps: 20,
          width: 512,
          height: 512
        }
      }
    );
    console.log('‚úÖ Image g√©n√©r√©e:', output[0]);
    */

    console.log('‚úÖ SUCC√àS: Votre cl√© API Replicate est valide et fonctionnelle!\n');
    console.log('üìä R√©sum√©:');
    console.log('   ‚úì Cl√© API valide');
    console.log('   ‚úì Connexion √† Replicate OK');
    console.log('   ‚úì Acc√®s aux mod√®les OK');
    console.log('\nüöÄ Vous pouvez maintenant utiliser le g√©n√©rateur 3D dans l\'application!\n');

  } catch (error) {
    console.error('\n‚ùå ERREUR lors du test:');
    console.error('   Message:', error.message);
    
    if (error.message.includes('401') || error.message.includes('Unauthorized')) {
      console.error('\nüîë Votre cl√© API est invalide ou expir√©e');
      console.error('   1. V√©rifiez que vous avez copi√© la cl√© compl√®te');
      console.error('   2. G√©n√©rez une nouvelle cl√© sur: https://replicate.com/account/api-tokens');
      console.error('   3. Mettez √† jour VITE_REPLICATE_API_KEY dans .env.local\n');
    } else if (error.message.includes('402') || error.message.includes('Payment Required')) {
      console.error('\nüí≥ Cr√©dit insuffisant sur votre compte Replicate');
      console.error('   Ajoutez des cr√©dits sur: https://replicate.com/account/billing\n');
    } else if (error.message.includes('network') || error.message.includes('ENOTFOUND')) {
      console.error('\nüåê Probl√®me de connexion internet');
      console.error('   V√©rifiez votre connexion et r√©essayez\n');
    } else {
      console.error('\n   Stack:', error.stack);
    }
    
    process.exit(1);
  }
}

// Ex√©cuter le test
testReplicateAPI().catch(console.error);
