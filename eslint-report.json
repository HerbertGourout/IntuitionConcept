[{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\debug-quotes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\scripts\\setCustomClaims.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\AppRouter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Budget\\ExpenseForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":54,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport type { FinancialRecord } from '../../types';\r\n\r\ninterface ExpenseFormProps {\r\n  initialValues?: FinancialRecord | undefined;\r\n  onSubmit: (expense: Omit<FinancialRecord, 'id'>) => Promise<void>;\r\n  onCancel?: () => void;\r\n  projectId: string;\r\n}\r\n\r\nconst defaultExpense: Omit<FinancialRecord, 'id'> = {\r\n  type: 'expense',\r\n  category: 'other',\r\n  amount: 0,\r\n  description: '',\r\n  date: new Date().toISOString().slice(0, 10),\r\n  projectId: '',\r\n  approved: false\r\n};\r\n\r\nexport const ExpenseForm: React.FC<ExpenseFormProps> = ({ initialValues, onSubmit, onCancel, projectId }) => {\r\n  const [form, setForm] = useState<Omit<FinancialRecord, 'id'>>({\r\n    ...defaultExpense,\r\n    projectId,\r\n    ...(initialValues ? {\r\n      type: initialValues.type,\r\n      category: initialValues.category,\r\n      amount: initialValues.amount,\r\n      description: initialValues.description,\r\n      date: initialValues.date,\r\n      approved: initialValues.approved\r\n    } : {})\r\n  });\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setForm(prev => ({ ...prev, [name]: name === 'amount' ? Number(value) : value }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!form.amount || form.amount <= 0) {\r\n      setError('Le montant doit être positif.');\r\n      return;\r\n    }\r\n    if (!form.category) {\r\n      setError('Veuillez choisir une catégorie.');\r\n      return;\r\n    }\r\n    setError(null);\r\n    try {\r\n      await onSubmit(form);\r\n    } catch (error) {\r\n      setError('Erreur lors de l\\'enregistrement. Veuillez réessayer.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"space-y-4\" onSubmit={handleSubmit}>\r\n      {error && <div className=\"text-red-600 text-sm\">{error}</div>}\r\n      <div>\r\n        <label className=\"block text-sm font-medium\">Catégorie</label>\r\n        <select\r\n          name=\"category\"\r\n          value={form.category}\r\n          onChange={handleChange}\r\n          className=\"w-full border rounded px-2 py-1\"\r\n          required\r\n        >\r\n          <option value=\"materials\">Matériaux</option>\r\n          <option value=\"labor\">Main d'œuvre</option>\r\n          <option value=\"equipment\">Équipement</option>\r\n          <option value=\"permits\">Permis</option>\r\n          <option value=\"other\">Autre</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label className=\"block text-sm font-medium\">Montant (FCFA)</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          value={form.amount}\r\n          onChange={handleChange}\r\n          className=\"w-full border rounded px-2 py-1\"\r\n          min={1}\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        <label className=\"block text-sm font-medium\">Description</label>\r\n        <textarea\r\n          name=\"description\"\r\n          value={form.description}\r\n          onChange={handleChange}\r\n          className=\"w-full border rounded px-2 py-1\"\r\n          rows={2}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label className=\"block text-sm font-medium\">Date</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={form.date}\r\n          onChange={handleChange}\r\n          className=\"w-full border rounded px-2 py-1\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"approved\"\r\n          checked={form.approved}\r\n          onChange={e => setForm(prev => ({ ...prev, approved: e.target.checked }))}\r\n        />\r\n        <label className=\"text-sm\">Approuvé</label>\r\n      </div>\r\n      <div className=\"flex gap-2 justify-end\">\r\n        {onCancel && <button type=\"button\" className=\"px-4 py-2 bg-gray-200 rounded\" onClick={onCancel}>Annuler</button>}\r\n        <button type=\"submit\" className=\"px-4 py-2 bg-blue-600 text-white rounded\">Enregistrer</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Budget\\ExpenseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Costs\\ActualExpenseForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Costs\\BudgetOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":204,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":204,"endColumn":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { TrendingUp, TrendingDown, DollarSign, BarChart3, Target, AlertTriangle } from 'lucide-react';\nimport { useProjectContext } from '../../contexts/ProjectContext';\nimport { useFormatCurrency } from '../../utils/currency';\n\nexport const BudgetOverview: React.FC = () => {\n    const formatCurrency = useFormatCurrency();\n    const projectContext = useProjectContext();\n    const project = projectContext.currentProject;\n    \n    if (!project) {\n        return (\n            <div className=\"glass-card p-8 text-center\">\n                <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-gray-400 to-gray-500 rounded-2xl mb-4\">\n                    <BarChart3 className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">Aucun projet sélectionné</h3>\n                <p className=\"text-gray-500\">Sélectionnez un projet pour voir l'analyse budgétaire</p>\n            </div>\n        );\n    }\n\n    // Calculs dynamiques sécurisés\n    const phases = project.phases || [];\n    const totalEstimated = phases.reduce((sum, ph) => {\n        const budget = typeof ph.estimatedBudget === 'number' ? ph.estimatedBudget : 0;\n        return sum + budget;\n    }, 0);\n    \n    const totalSpent = phases.reduce((sum, ph) => {\n        const tasks = ph.tasks || [];\n        const phaseSpent = tasks.reduce((s, t) => s + (t.spent || 0), 0);\n        return sum + phaseSpent;\n    }, 0);\n    \n    const variance = totalEstimated - totalSpent;\n    const usagePercentage = totalEstimated > 0 ? (totalSpent / totalEstimated) * 100 : 0;\n    const isOverBudget = totalSpent > totalEstimated;\n\n    return (\n        <div className=\"p-6 space-y-6\">\n            {/* Header compact - Style Planning */}\n            <div className=\"glass-card bg-gradient-to-r from-green-50 via-white to-blue-50\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                        <div className=\"p-3 bg-gradient-to-r from-green-600 to-blue-600 rounded-xl text-white\">\n                            <BarChart3 className=\"w-8 h-8\" />\n                        </div>\n                        <div>\n                            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n                                Budget\n                            </h1>\n                            <p className=\"text-gray-600 mt-1\">Suivi des coûts et performance financière</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {/* Statistiques principales - Style Planning compact */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"glass-card hover:-translate-y-1 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <div className=\"flex items-center gap-2\">\n                                <DollarSign className=\"text-blue-500 w-6 h-6\" />\n                                <span className=\"text-gray-600\">Budget estimé</span>\n                            </div>\n                            <h3 className=\"text-2xl font-bold mt-2 text-blue-700\">\n                                {formatCurrency(totalEstimated)}\n                            </h3>\n                        </div>\n                        <div className=\"w-1/2 h-1 bg-blue-500/20 rounded-full\">\n                            <div className=\"h-full bg-blue-500 rounded-full\" style={{ width: '100%' }}></div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"glass-card hover:-translate-y-1 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <div className=\"flex items-center gap-2\">\n                                <TrendingDown className=\"text-red-500 w-6 h-6\" />\n                                <span className=\"text-gray-600\">Dépensé</span>\n                            </div>\n                            <h3 className=\"text-2xl font-bold mt-2 text-red-700\">\n                                {formatCurrency(totalSpent)}\n                            </h3>\n                        </div>\n                        <div className=\"w-1/2 h-1 bg-red-500/20 rounded-full\">\n                            <div className=\"h-full bg-red-500 rounded-full\" style={{ width: `${Math.min(usagePercentage, 100)}%` }}></div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"glass-card hover:-translate-y-1 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <div className=\"flex items-center gap-2\">\n                                <TrendingUp className={`w-6 h-6 ${variance >= 0 ? 'text-green-500' : 'text-red-500'}`} />\n                                <span className=\"text-gray-600\">\n                                    {variance >= 0 ? 'Économies' : 'Dépassement'}\n                                </span>\n                            </div>\n                            <h3 className={`text-2xl font-bold mt-2 ${\n                                variance >= 0 ? 'text-green-700' : 'text-red-700'\n                            }`}>\n                                {formatCurrency(Math.abs(variance))}\n                            </h3>\n                        </div>\n                        <div className={`w-1/2 h-1 rounded-full ${\n                            variance >= 0 ? 'bg-green-500/20' : 'bg-red-500/20'\n                        }`}>\n                            <div className={`h-full rounded-full ${\n                                variance >= 0 ? 'bg-green-500' : 'bg-red-500'\n                            }`} style={{ width: `${Math.min(Math.abs(variance) / totalEstimated * 100, 100)}%` }}></div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"glass-card hover:-translate-y-1 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <div className=\"flex items-center gap-2\">\n                                <Target className={`w-6 h-6 ${isOverBudget ? 'text-red-500' : 'text-purple-500'}`} />\n                                <span className=\"text-gray-600\">Utilisation</span>\n                            </div>\n                            <h3 className={`text-2xl font-bold mt-2 ${\n                                isOverBudget ? 'text-red-700' : 'text-purple-700'\n                            }`}>\n                                {Math.round(usagePercentage)}%\n                            </h3>\n                        </div>\n                        <div className={`w-1/2 h-1 rounded-full ${\n                            isOverBudget ? 'bg-red-500/20' : 'bg-purple-500/20'\n                        }`}>\n                            <div className={`h-full rounded-full ${\n                                isOverBudget ? 'bg-red-500' : 'bg-purple-500'\n                            }`} style={{ width: `${Math.min(usagePercentage, 100)}%` }}></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {/* Barre de progression globale */}\n            <div className=\"glass-card p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-800 flex items-center gap-2\">\n                        <Target className=\"w-5 h-5 text-blue-600\" />\n                        Utilisation du budget global\n                    </h3>\n                    <span className={`text-lg font-bold ${\n                        isOverBudget ? 'text-red-600' : 'text-blue-600'\n                    }`}>\n                        {usagePercentage.toFixed(1)}%\n                    </span>\n                </div>\n                \n                <div className=\"w-full h-4 bg-gray-200 rounded-full overflow-hidden mb-4\">\n                    <div\n                        className={`h-full rounded-full transition-all duration-800 ${\n                            isOverBudget \n                                ? 'bg-gradient-to-r from-red-500 to-orange-400'\n                                : usagePercentage > 75\n                                    ? 'bg-gradient-to-r from-yellow-500 to-orange-400'\n                                    : 'bg-gradient-to-r from-blue-500 to-cyan-400'\n                        }`}\n                        style={{ width: `${Math.min(usagePercentage, 100)}%` }}\n                    />\n                </div>\n\n                {/* Alertes budgétaires */}\n                {isOverBudget && (\n                    <div className=\"bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg\">\n                        <div className=\"flex items-center\">\n                            <AlertTriangle className=\"w-5 h-5 text-red-400 mr-2\" />\n                            <p className=\"text-red-700 font-medium\">\n                                Attention : Budget dépassé de {formatCurrency(Math.abs(variance))}\n                            </p>\n                        </div>\n                    </div>\n                )}\n\n                {usagePercentage > 90 && !isOverBudget && (\n                    <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg\">\n                        <div className=\"flex items-center\">\n                            <AlertTriangle className=\"w-5 h-5 text-yellow-400 mr-2\" />\n                            <p className=\"text-yellow-700 font-medium\">\n                                Attention : Plus de 90% du budget utilisé\n                            </p>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {/* Analyse par phases */}\n            {phases.length > 0 && (\n                <div className=\"glass-card p-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2\">\n                        <BarChart3 className=\"w-5 h-5 text-purple-600\" />\n                        Analyse par phases ({phases.length} phases)\n                    </h3>\n                    \n                    <div className=\"space-y-4\">\n                        {phases.map((phase, index) => {\n                            const tasks = phase.tasks || [];\n                            const estimated = typeof phase.estimatedBudget === 'number' ? phase.estimatedBudget : 0;\n                            const spent = tasks.reduce((s, t) => s + (t.spent || 0), 0);\n                            const remaining = estimated - spent;\n                            const usage = estimated > 0 ? (spent / estimated) * 100 : 0;\n                            const status = spent > estimated ? 'over' : usage > 90 ? 'warning' : 'good';\n                            const progressPercentage = Math.min((tasks.filter(t => t.status === 'done').length / Math.max(tasks.length, 1)) * 100, 100);\n\n                            return (\n                                <div key={phase.id} className=\"bg-white/50 backdrop-blur-sm rounded-lg p-4 border border-white/20\">\n                                    <div className=\"flex justify-between items-start mb-3\">\n                                        <div>\n                                            <h4 className=\"font-semibold text-gray-800\">{phase.name}</h4>\n                                            <p className=\"text-sm text-gray-600\">{tasks.length} tâches</p>\n                                        </div>\n                                        <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                                            phase.status === 'completed' ? 'bg-green-100 text-green-800' :\n                                            phase.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                                            'bg-gray-100 text-gray-800'\n                                        }`}>\n                                            {phase.status === 'completed' ? 'Terminée' :\n                                             phase.status === 'in_progress' ? 'En cours' : 'Planifiée'}\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"grid grid-cols-3 gap-4 mb-3\">\n                                        <div className=\"text-center\">\n                                            <div className=\"text-sm text-gray-600\">Estimé</div>\n                                            <div className=\"font-semibold text-blue-600\">{formatCurrency(estimated)}</div>\n                                        </div>\n                                        <div className=\"text-center\">\n                                            <div className=\"text-sm text-gray-600\">Dépensé</div>\n                                            <div className={`font-semibold ${\n                                                status === 'over' ? 'text-red-600' : 'text-gray-800'\n                                            }`}>\n                                                {formatCurrency(spent)}\n                                            </div>\n                                        </div>\n                                        <div className=\"text-center\">\n                                            <div className=\"text-sm text-gray-600\">\n                                                {remaining < 0 ? 'Dépassement' : 'Restant'}\n                                            </div>\n                                            <div className={`font-semibold ${\n                                                remaining < 0 ? 'text-red-600' : 'text-emerald-600'\n                                            }`}>\n                                                {formatCurrency(Math.abs(remaining))}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    \n                                    <div className=\"space-y-2\">\n                                        <div className=\"flex justify-between items-center\">\n                                            <span className=\"text-sm text-gray-600\">Avancement</span>\n                                            <span className=\"text-sm font-medium text-purple-600\">\n                                                {Math.round(progressPercentage)}%\n                                            </span>\n                                        </div>\n                                        <div className=\"w-full h-2 bg-gray-100 rounded-full overflow-hidden\">\n                                            <div\n                                                className=\"h-full bg-gradient-to-r from-purple-500 to-pink-400 rounded-full transition-all duration-800\"\n                                                style={{ width: `${progressPercentage}%` }}\n                                            />\n                                        </div>\n                                        \n                                        <div className=\"flex justify-between items-center\">\n                                            <span className=\"text-sm text-gray-600\">Utilisation budget</span>\n                                            <span className={`text-sm font-medium ${\n                                                status === 'over' ? 'text-red-600' : 'text-blue-600'\n                                            }`}>\n                                                {Math.round(usage)}%\n                                            </span>\n                                        </div>\n                                        <div className=\"w-full h-2 bg-gray-100 rounded-full overflow-hidden\">\n                                            <div\n                                                className={`h-full rounded-full transition-all duration-800 ${\n                                                    status === 'over' \n                                                        ? 'bg-gradient-to-r from-red-500 to-orange-400'\n                                                        : 'bg-gradient-to-r from-blue-500 to-cyan-400'\n                                                }`}\n                                                style={{ width: `${Math.min(usage, 100)}%` }}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default BudgetOverview;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Costs\\EstimatedCostForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\CustomizableWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Minimize2' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MoreVertical' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1611,1614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1611,1614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { motion, PanInfo } from 'framer-motion';\nimport { \n  GripVertical, \n  Settings, \n  Eye, \n  EyeOff, \n  Maximize2, \n  Minimize2, \n  X,\n  MoreVertical \n} from 'lucide-react';\nimport { useWidgets, Widget, WidgetSize } from '../../contexts/WidgetContext';\nimport { useTheme } from '../../contexts/ThemeContext';\n\ninterface CustomizableWidgetProps {\n  widget: Widget;\n  children: React.ReactNode;\n  isEditMode?: boolean;\n  onEdit?: () => void;\n}\n\nconst CustomizableWidget: React.FC<CustomizableWidgetProps> = ({\n  widget,\n  children,\n  isEditMode = false,\n  onEdit,\n}) => {\n  const { updateWidget, removeWidget, resizeWidget, toggleWidgetVisibility } = useWidgets();\n  const { resolvedTheme } = useTheme();\n  const [isDragging, setIsDragging] = useState(false);\n  const [showControls, setShowControls] = useState(false);\n  const [showSizeMenu, setShowSizeMenu] = useState(false);\n  const constraintsRef = useRef(null);\n\n  const sizeClasses: Record<WidgetSize, string> = {\n    small: 'col-span-1 row-span-1 min-h-[200px]',\n    medium: 'col-span-2 row-span-1 min-h-[200px]',\n    large: 'col-span-3 row-span-2 min-h-[400px]',\n    xl: 'col-span-4 row-span-3 min-h-[600px]',\n  };\n\n  const sizeOptions: { size: WidgetSize; label: string; icon: string }[] = [\n    { size: 'small', label: 'Petit', icon: '◽' },\n    { size: 'medium', label: 'Moyen', icon: '◼' },\n    { size: 'large', label: 'Grand', icon: '⬛' },\n    { size: 'xl', label: 'Très grand', icon: '⬛⬛' },\n  ];\n\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  const handleDragEnd = (event: any, info: PanInfo) => {\n    setIsDragging(false);\n    \n    // Calculer la nouvelle position basée sur le déplacement\n    const gridSize = 100; // Taille approximative d'une cellule de grille\n    const newX = Math.round(info.offset.x / gridSize);\n    const newY = Math.round(info.offset.y / gridSize);\n    \n    if (newX !== 0 || newY !== 0) {\n      const newPosition = {\n        x: Math.max(0, widget.position.x + newX),\n        y: Math.max(0, widget.position.y + newY),\n      };\n      updateWidget(widget.id, { position: newPosition });\n    }\n  };\n\n  const handleResize = (newSize: WidgetSize) => {\n    resizeWidget(widget.id, newSize);\n    setShowSizeMenu(false);\n  };\n\n  const handleRemove = () => {\n    removeWidget(widget.id);\n  };\n\n  const handleToggleVisibility = () => {\n    toggleWidgetVisibility(widget.id);\n  };\n\n  if (!widget.isVisible && !isEditMode) {\n    return null;\n  }\n\n  return (\n    <motion.div\n      ref={constraintsRef}\n      className={`\n        relative group\n        ${sizeClasses[widget.size]}\n        ${isDragging ? 'z-50' : 'z-10'}\n        ${!widget.isVisible ? 'opacity-50' : ''}\n      `}\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      transition={{ duration: 0.3 }}\n      drag={isEditMode}\n      dragMomentum={false}\n      dragElastic={0.1}\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      whileDrag={{ \n        scale: 1.05, \n        rotate: 2,\n        boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n        zIndex: 1000,\n      }}\n      onHoverStart={() => setShowControls(true)}\n      onHoverEnd={() => setShowControls(false)}\n    >\n      {/* Conteneur principal du widget */}\n      <div\n        className={`\n          h-full w-full rounded-xl border transition-all duration-200\n          ${resolvedTheme === 'dark'\n            ? 'bg-gray-800/90 border-gray-700 backdrop-blur-sm'\n            : 'bg-white/90 border-gray-200 backdrop-blur-sm shadow-sm'\n          }\n          ${isDragging ? 'ring-2 ring-blue-500' : ''}\n          ${isEditMode ? 'hover:ring-2 hover:ring-blue-400' : ''}\n        `}\n      >\n        {/* Header du widget avec contrôles */}\n        {(isEditMode || showControls) && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className={`\n              absolute -top-2 left-2 right-2 z-20\n              flex items-center justify-between\n              px-3 py-1.5 rounded-lg border\n              ${resolvedTheme === 'dark'\n                ? 'bg-gray-900 border-gray-600 text-gray-200'\n                : 'bg-white border-gray-300 text-gray-700 shadow-sm'\n              }\n            `}\n          >\n            {/* Titre et drag handle */}\n            <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n              {isEditMode && (\n                <GripVertical \n                  className=\"w-4 h-4 text-gray-400 cursor-grab active:cursor-grabbing flex-shrink-0\" \n                />\n              )}\n              <span className=\"text-sm font-medium truncate\">\n                {widget.title}\n              </span>\n            </div>\n\n            {/* Contrôles */}\n            <div className=\"flex items-center gap-1\">\n              {/* Bouton de visibilité */}\n              <motion.button\n                onClick={handleToggleVisibility}\n                className={`\n                  p-1 rounded hover:bg-opacity-20 transition-colors\n                  ${resolvedTheme === 'dark' ? 'hover:bg-white' : 'hover:bg-gray-500'}\n                `}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                title={widget.isVisible ? 'Masquer' : 'Afficher'}\n              >\n                {widget.isVisible ? (\n                  <Eye className=\"w-3 h-3\" />\n                ) : (\n                  <EyeOff className=\"w-3 h-3\" />\n                )}\n              </motion.button>\n\n              {/* Menu de taille */}\n              <div className=\"relative\">\n                <motion.button\n                  onClick={() => setShowSizeMenu(!showSizeMenu)}\n                  className={`\n                    p-1 rounded hover:bg-opacity-20 transition-colors\n                    ${resolvedTheme === 'dark' ? 'hover:bg-white' : 'hover:bg-gray-500'}\n                  `}\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  title=\"Redimensionner\"\n                >\n                  <Maximize2 className=\"w-3 h-3\" />\n                </motion.button>\n\n                {/* Menu déroulant des tailles */}\n                {showSizeMenu && (\n                  <>\n                    <div \n                      className=\"fixed inset-0 z-30\" \n                      onClick={() => setShowSizeMenu(false)}\n                    />\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.9, y: -10 }}\n                      animate={{ opacity: 1, scale: 1, y: 0 }}\n                      className={`\n                        absolute top-full mt-1 right-0 z-40\n                        min-w-[120px] rounded-lg border shadow-lg\n                        ${resolvedTheme === 'dark'\n                          ? 'bg-gray-800 border-gray-600'\n                          : 'bg-white border-gray-200'\n                        }\n                      `}\n                    >\n                      {sizeOptions.map((option) => (\n                        <button\n                          key={option.size}\n                          onClick={() => handleResize(option.size)}\n                          className={`\n                            w-full px-3 py-2 text-left text-sm\n                            flex items-center gap-2\n                            transition-colors first:rounded-t-lg last:rounded-b-lg\n                            ${widget.size === option.size\n                              ? resolvedTheme === 'dark'\n                                ? 'bg-blue-600 text-white'\n                                : 'bg-blue-50 text-blue-700'\n                              : resolvedTheme === 'dark'\n                                ? 'hover:bg-gray-700 text-gray-200'\n                                : 'hover:bg-gray-50 text-gray-700'\n                            }\n                          `}\n                        >\n                          <span>{option.icon}</span>\n                          <span>{option.label}</span>\n                        </button>\n                      ))}\n                    </motion.div>\n                  </>\n                )}\n              </div>\n\n              {/* Bouton de configuration */}\n              {onEdit && (\n                <motion.button\n                  onClick={onEdit}\n                  className={`\n                    p-1 rounded hover:bg-opacity-20 transition-colors\n                    ${resolvedTheme === 'dark' ? 'hover:bg-white' : 'hover:bg-gray-500'}\n                  `}\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  title=\"Configurer\"\n                >\n                  <Settings className=\"w-3 h-3\" />\n                </motion.button>\n              )}\n\n              {/* Bouton de suppression */}\n              <motion.button\n                onClick={handleRemove}\n                className={`\n                  p-1 rounded hover:bg-red-500 hover:text-white transition-colors\n                  text-red-500\n                `}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                title=\"Supprimer\"\n              >\n                <X className=\"w-3 h-3\" />\n              </motion.button>\n            </div>\n          </motion.div>\n        )}\n\n        {/* Contenu du widget */}\n        <div className={`\n          h-full w-full p-4 \n          ${(isEditMode || showControls) ? 'pt-8' : 'pt-4'}\n          ${!widget.isVisible ? 'pointer-events-none' : ''}\n        `}>\n          {children}\n        </div>\n\n        {/* Indicateur de redimensionnement */}\n        {isEditMode && (\n          <div className={`\n            absolute bottom-2 right-2 w-4 h-4\n            border-r-2 border-b-2 border-gray-400\n            ${resolvedTheme === 'dark' ? 'border-gray-500' : 'border-gray-400'}\n          `} />\n        )}\n      </div>\n\n      {/* Overlay de drag */}\n      {isDragging && (\n        <div className=\"absolute inset-0 bg-blue-500 bg-opacity-10 rounded-xl border-2 border-blue-500 border-dashed\" />\n      )}\n    </motion.div>\n  );\n};\n\nexport default CustomizableWidget;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":3,"column":93,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":103},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":3,"column":105,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":116},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'XCircle' is defined but never used.","line":3,"column":118,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":125},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Pause' is defined but never used.","line":3,"column":127,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":132}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { useProjects } from '../../hooks/useProjects';\nimport { FolderOpen, Euro, AlertTriangle, Clock, AlertCircle, Users, Calendar, Target, Zap, TrendingUp, CheckCircle, XCircle, Pause } from 'lucide-react';\nimport ActivityTimelineWidget from './widgets/ActivityTimelineWidget';\nimport { useCurrency } from '../../hooks/useCurrency';\n\ninterface DashboardProps {\n  onNavigate?: (section: string) => void;\n}\n\nconst Dashboard: React.FC<DashboardProps> = ({ onNavigate }) => {\n  const { currentProject, projects } = useProjects();\n  const { formatAmount } = useCurrency();\n  \n  // Debug logs pour vérifier les changements de projet\n  console.log('🔍 Dashboard - Projet actuel:', currentProject?.name || 'Aucun');\n  console.log('🔍 Dashboard - ID du projet:', currentProject?.id || 'Aucun');\n  console.log('🔍 Dashboard - Nombre de projets disponibles:', projects.length);\n  \n  // Vérifie que le projet sélectionné existe vraiment dans la liste\n  const validProject = projects.find(p => p.id === currentProject?.id);\n  // Convertir le projet actuel au format attendu par les composants enfants\n  const currentProjectData = useMemo(() => {\n    if (!validProject) return null;\n    \n    // Calculer le pourcentage d'avancement global basé sur les tâches\n    const allTasks = (validProject.phases || []).flatMap(phase => (phase.tasks || []));\n    const completedTasks = allTasks.filter(task => task && task.status === 'done').length;\n    const progress = allTasks.length > 0 ? Math.round((completedTasks / allTasks.length) * 100) : 0;\n    \n    return {\n      ...validProject,\n      progress,\n      tasks: allTasks,\n      completedTasks,\n    };\n  }, [validProject]);\n  \n  // Calcul des statistiques basées sur le projet sélectionné\n  const stats = useMemo(() => {\n    if (!currentProjectData) {\n      return {\n        activeTasks: 0,\n        availableEquipment: 0,\n        equipmentInUse: 0,\n        equipmentMaintenance: 0,\n        totalEquipment: 0,\n        teamMembers: 0,\n        teamEfficiency: 0,\n        budget: 0,\n        budgetSpent: 0,\n        budgetRemaining: 0,\n        budgetPercentage: 0,\n        delayedTasks: 0\n      };\n    }\n\n    // Calculer le nombre de tâches actives\n    const activeTasks = (currentProjectData.phases || []).flatMap(phase => \n      (phase.tasks || []).filter(task => task && task.status === 'in_progress')\n    ).length;\n    \n    const delayedTasks = (currentProjectData.phases || []).flatMap(phase => \n      (phase.tasks || []).filter(task => \n        task && task.status !== 'done' && \n        task.dueDate && new Date(task.dueDate) < new Date()\n      )\n    ).length;\n    \n    const budget = currentProjectData.budget || 0;\n    // TODO: Implement proper budget tracking with spent amounts per phase\n    // Calcul dynamique du budget utilisé\n    const budgetSpent = (currentProjectData.phases || []).reduce(\n      (sum, phase) => sum + (phase.tasks || []).reduce((tSum, t) => tSum + (t.spent || 0), 0),\n      0\n    );\n    const budgetRemaining = Math.max(0, budget - budgetSpent);\n    const budgetPercentage = budget > 0 ? Math.round((budgetSpent / budget) * 100) : 0;\n    \n    // Statistiques d'équipement réelles\n    const equipment = currentProjectData.equipment || [];\n    const availableEquipment = equipment.filter(eq => eq.status === 'available').length;\n    const equipmentInUse = equipment.filter(eq => eq.status === 'in-use').length;\n    const equipmentMaintenance = equipment.filter(eq => eq.status === 'maintenance').length;\n    const totalEquipment = equipment.length;\n    \n    // Calcul de l'efficacité de l'équipe basée sur les tâches terminées vs en retard\n    const allTasksWithDates = (currentProjectData.phases || []).flatMap(phase => \n      (phase.tasks || []).filter(task => task && task.dueDate)\n    );\n    const completedTasksCount = allTasksWithDates.filter(task => task.status === 'done').length;\n    const teamEfficiency = allTasksWithDates.length > 0 \n      ? Math.round((completedTasksCount / allTasksWithDates.length) * 100)\n      : 85; // Valeur par défaut si pas de données\n    \n    const teamMembers = currentProjectData.team?.length || 0;\n\n    return {\n      activeTasks,\n      availableEquipment,\n      equipmentInUse,\n      equipmentMaintenance,\n      totalEquipment,\n      teamMembers,\n      teamEfficiency,\n      budget,\n      budgetSpent,\n      budgetRemaining,\n      budgetPercentage,\n      delayedTasks\n    };\n  }, [currentProjectData]);\n\n  // Vérifier si nous avons des données de projet\n  if (!currentProjectData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 p-6\">\n        <div className=\"max-w-2xl mx-auto mt-20\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 text-center border border-orange-200 dark:border-gray-700\">\n            <div className=\"w-16 h-16 bg-orange-100 dark:bg-orange-900/30 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"h-8 w-8 text-orange-500\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n              Aucun projet sélectionné\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n              Sélectionnez un projet dans le menu latéral pour accéder au tableau de bord interactif.\n            </p>\n            <div className=\"flex justify-center\">\n              <button className=\"bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-medium transition-colors\">\n                Créer un nouveau projet\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <AnimatedBackground variant=\"particles\">\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50/80 to-blue-50/80 dark:from-gray-900/80 dark:to-gray-800/80 p-6\">\n        {/* Header Hero Section */}\n        <div className=\"mb-8 fade-in-up\">\n          <GlassCard className=\"p-8 hover-lift\">\n            <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full pulse-glow\"></div>\n                  <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">Projet Actif</span>\n                </div>\n                <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-2 text-gradient\">\n                  {currentProjectData.name}\n                </h1>\n                <p className=\"text-gray-600 dark:text-gray-300 text-lg\">\n                  {currentProjectData.description}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Dernière mise à jour</p>\n                  <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                    {new Date().toLocaleDateString('fr-FR', { \n                      day: 'numeric', \n                      month: 'long', \n                      year: 'numeric' \n                    })}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6 mb-8\">\n          {/* Animated Stats Cards */}\n          <div className=\"lg:col-span-8 slide-in-left\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n              <div className=\"bounce-in\" style={{animationDelay: '0.1s'}}>\n                <AnimatedStatsCard\n                  title=\"Tâches Actives\"\n                  value={stats.activeTasks}\n                  previousValue={stats.activeTasks - 2}\n                  icon={<Clock className=\"w-6 h-6 text-white\" />}\n                  color=\"text-white\"\n                  gradientFrom=\"from-blue-500\"\n                  gradientTo=\"to-blue-600\"\n                />\n              </div>\n              <div className=\"bounce-in\" style={{animationDelay: '0.2s'}}>\n                <AnimatedStatsCard\n                  title=\"Budget Utilisé\"\n                  value={stats.budgetSpent}\n                  previousValue={stats.budgetSpent - 50000}\n                  format=\"currency\"\n                  icon={<Euro className=\"w-6 h-6 text-white\" />}\n                  color=\"text-white\"\n                  gradientFrom=\"from-green-500\"\n                  gradientTo=\"to-green-600\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bounce-in\" style={{animationDelay: '0.3s'}}>\n                <AnimatedStatsCard\n                  title=\"Progression Globale\"\n                  value={currentProjectData.progress}\n                  previousValue={currentProjectData.progress - 5}\n                  format=\"percentage\"\n                  icon={<Target className=\"w-6 h-6 text-white\" />}\n                  color=\"text-white\"\n                  gradientFrom=\"from-orange-500\"\n                  gradientTo=\"to-orange-600\"\n                />\n              </div>\n              <div className=\"bounce-in\" style={{animationDelay: '0.4s'}}>\n                <AnimatedStatsCard\n                  title=\"Équipe Active\"\n                  value={stats.teamMembers || 12}\n                  previousValue={10}\n                  icon={<Users className=\"w-6 h-6 text-white\" />}\n                  color=\"text-white\"\n                  gradientFrom=\"from-purple-500\"\n                  gradientTo=\"to-purple-600\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Weather Widget */}\n          <div className=\"lg:col-span-4 slide-in-right\">\n            <div className=\"float-animation\">\n              <WeatherWidget location={currentProjectData.location} />\n            </div>\n          </div>\n        </div>\n\n      {/* Progress and Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <CircularProgressWidget\n          title=\"Avancement Global\"\n          percentage={currentProjectData.progress}\n          value={`${currentProjectData.progress}%`}\n          color=\"#f97316\"\n          icon={<Target className=\"w-5 h-5\" />}\n          subtitle={`${currentProjectData.completedTasks} / ${currentProjectData.tasks?.length || 0} tâches`}\n        />\n        \n        <CircularProgressWidget\n          title=\"Budget Consommé\"\n          percentage={stats.budgetPercentage}\n          value={`${stats.budgetPercentage}%`}\n          color={stats.budgetPercentage > 80 ? '#ef4444' : '#10b981'}\n          icon={<Euro className=\"w-5 h-5\" />}\n          subtitle={`${formatAmount(stats.budgetSpent)} / ${formatAmount(stats.budget)}`}\n        />\n        \n        <CircularProgressWidget\n          title=\"Efficacité Équipe\"\n          percentage={stats.teamEfficiency}\n          value={`${stats.teamEfficiency}%`}\n          color=\"#8b5cf6\"\n          icon={<Zap className=\"w-5 h-5\" />}\n          subtitle={`${stats.teamMembers} membres actifs`}\n        />\n      </div>\n\n      {/* Activity and Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <ActivityTimelineWidget />\n        <RealTimeChartWidget />\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-8\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 border border-gray-200 dark:border-gray-700\">\n          <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">Actions Rapides</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <button \n              onClick={() => onNavigate?.('projects')}\n              className=\"group p-6 bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20 rounded-xl border border-orange-200 dark:border-orange-700 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2\"\n            >\n              <FolderOpen className=\"w-8 h-8 text-orange-600 mb-3 group-hover:scale-110 transition-transform\" />\n              <p className=\"font-semibold text-gray-900 dark:text-white\">Nouveau Projet</p>\n            </button>\n            \n            <button \n              onClick={() => onNavigate?.('planning')}\n              className=\"group p-6 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-xl border border-blue-200 dark:border-blue-700 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n            >\n              <Calendar className=\"w-8 h-8 text-blue-600 mb-3 group-hover:scale-110 transition-transform\" />\n              <p className=\"font-semibold text-gray-900 dark:text-white\">Planning</p>\n            </button>\n            \n            <button \n              onClick={() => {\n                // Scroll vers les alertes ou afficher une notification\n                const alertsSection = document.querySelector('[data-alerts]');\n                if (alertsSection) {\n                  alertsSection.scrollIntoView({ behavior: 'smooth' });\n                } else {\n                  // Afficher les tâches en retard comme alertes\n                  if (stats.delayedTasks > 0) {\n                    alert(`Attention: ${stats.delayedTasks} tâche(s) en retard nécessitent votre attention.`);\n                  } else {\n                    alert('Aucune alerte pour le moment. Tout va bien!');\n                  }\n                }\n              }}\n              className=\"group p-6 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-xl border border-green-200 dark:border-green-700 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2\"\n            >\n              <AlertTriangle className=\"w-8 h-8 text-green-600 mb-3 group-hover:scale-110 transition-transform\" />\n              <p className=\"font-semibold text-gray-900 dark:text-white\">Alertes</p>\n              {stats.delayedTasks > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-bold\">\n                  {stats.delayedTasks}\n                </span>\n              )}\n            </button>\n            \n            <button \n              onClick={() => onNavigate?.('purchase-orders')}\n              className=\"group p-6 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 rounded-xl border border-purple-200 dark:border-purple-700 hover:shadow-lg transition-all duration-300 hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2\"\n            >\n              <Euro className=\"w-8 h-8 text-purple-600 mb-3 group-hover:scale-110 transition-transform\" />\n              <p className=\"font-semibold text-gray-900 dark:text-white\">Budget</p>\n            </button>\n          </div>\n        </div>\n      </div>\n      </div>\n    </AnimatedBackground>\n  );\n};\n\nexport default Dashboard;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\ModernProjectDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\ProjectChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\ProjectProgressCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\RecentActivity.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[211,214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[211,214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Clock } from 'lucide-react';\r\n\r\nconst RecentActivity: React.FC = () => {\r\n  // Pas de données de démonstration - utiliser les vraies données du contexte\r\n  const activities: any[] = [];\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900\">Activité Récente</h3>\r\n        <Clock className=\"w-5 h-5 text-gray-400\" />\r\n      </div>\r\n      \r\n      {activities.length === 0 ? (\r\n        <div className=\"text-center py-8\">\r\n          <Clock className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\r\n          <p className=\"text-gray-500 text-sm\">Aucune activité récente</p>\r\n          <p className=\"text-gray-400 text-xs mt-1\">Les activités de vos projets apparaîtront ici</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"space-y-4\">\r\n            {activities.map((activity) => {\r\n              const Icon = activity.icon;\r\n              return (\r\n                <div key={activity.id} className=\"flex items-start gap-4\">\r\n                  <div className={`p-2 rounded-lg ${activity.color}`}>\r\n                    <Icon className=\"w-4 h-4\" />\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <p className=\"text-sm font-medium text-gray-900 truncate\">\r\n                      {activity.title}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">{activity.project}</p>\r\n                    <p className=\"text-xs text-gray-500 mt-1\">{activity.time}</p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          \r\n          <button className=\"w-full mt-4 text-sm text-orange-600 hover:text-orange-700 font-medium\">\r\n            Voir toute l'activité\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecentActivity;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\StatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\TaskSummaryCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\UltraModernDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Euro' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ActivityTimelineWidget' is defined but never used.","line":23,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatAmount' is assigned a value but never used.","line":37,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":227,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":33}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { useProjects } from '../../hooks/useProjects';\nimport { useCurrency } from '../../hooks/useCurrency';\nimport { \n  Calendar, \n  Users, \n  Euro, \n  TrendingUp,\n  FileText,\n  Settings,\n  Plus,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  Zap,\n  Target,\n  Activity,\n  Briefcase,\n  BarChart3,\n  Sparkles\n} from 'lucide-react';\nimport ActivityTimelineWidget from './widgets/ActivityTimelineWidget';\nimport AdvancedFinancialWidget from './widgets/AdvancedFinancialWidget';\nimport EquipmentMaintenanceWidget from './widgets/EquipmentMaintenanceWidget';\nimport TeamProductivityWidget from './widgets/TeamProductivityWidget';\nimport DeliverySupplyWidget from './widgets/DeliverySupplyWidget';\nimport DocumentsComplianceWidget from './widgets/DocumentsComplianceWidget';\nimport AnalyticsWidget from './widgets/AnalyticsWidget';\n\ninterface DashboardProps {\n  onNavigate?: (section: string) => void;\n}\n\nconst UltraModernDashboard: React.FC<DashboardProps> = ({ onNavigate }) => {\n  const { currentProject, projects } = useProjects();\n  const { formatAmount } = useCurrency();\n  \n  const validProject = projects.find(p => p.id === currentProject?.id);\n  \n  // Calcul des statistiques basées sur le projet sélectionné\n  const stats = useMemo(() => {\n    if (!validProject) {\n      return {\n        totalTasks: 0,\n        completedTasks: 0,\n        inProgressTasks: 0,\n        todoTasks: 0,\n        delayedTasks: 0,\n        progress: 0,\n        budget: 0,\n        budgetSpent: 0,\n        budgetRemaining: 0,\n        budgetPercentage: 0,\n        totalPhases: 0,\n        completedPhases: 0,\n        teamMembers: 0,\n        totalEquipment: 0,\n        activeEquipment: 0\n      };\n    }\n\n    const allTasks = (validProject.phases || []).flatMap(phase => (phase.tasks || []));\n    const totalTasks = allTasks.length;\n    const completedTasks = allTasks.filter(task => task && task.status === 'done').length;\n    const inProgressTasks = allTasks.filter(task => task && task.status === 'in_progress').length;\n    const todoTasks = allTasks.filter(task => task && task.status === 'todo').length;\n    const delayedTasks = allTasks.filter(task => \n      task && task.status !== 'done' && \n      task.dueDate && new Date(task.dueDate) < new Date()\n    ).length;\n    const progress = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n    \n    const budget = validProject.budget || 0;\n    const budgetSpent = (validProject.phases || []).reduce(\n      (sum, phase) => sum + (phase.tasks || []).reduce((tSum, t) => tSum + (t.spent || 0), 0),\n      0\n    );\n    const budgetRemaining = Math.max(0, budget - budgetSpent);\n    const budgetPercentage = budget > 0 ? Math.round((budgetSpent / budget) * 100) : 0;\n    \n    const totalPhases = (validProject.phases || []).length;\n    const completedPhases = (validProject.phases || []).filter(phase => {\n      const phaseTasks = phase.tasks || [];\n      return phaseTasks.length > 0 && phaseTasks.every(task => task.status === 'done');\n    }).length;\n    \n    const assignedMembers = new Set(\n      allTasks.flatMap(task => task.assignedTo || [])\n    );\n    const teamMembers = assignedMembers.size;\n    \n    const equipment = validProject.equipment || [];\n    const totalEquipment = equipment.length;\n    const activeEquipment = equipment.filter(eq => eq.status === 'in-use').length;\n    \n    return {\n      totalTasks,\n      completedTasks,\n      inProgressTasks,\n      todoTasks,\n      delayedTasks,\n      progress,\n      budget,\n      budgetSpent,\n      budgetRemaining,\n      budgetPercentage,\n      totalPhases,\n      completedPhases,\n      teamMembers,\n      totalEquipment,\n      activeEquipment\n    };\n  }, [validProject]);\n\n  if (!validProject) {\n    return (\n      <motion.div \n        className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 dark:from-gray-900 dark:via-purple-900/20 dark:to-blue-900/20 p-6\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div \n            className=\"text-center py-12\"\n            initial={{ y: 50, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.2, duration: 0.6 }}\n          >\n            <motion.div\n              className=\"relative mb-8\"\n              animate={{ rotate: [0, 5, -5, 0] }}\n              transition={{ duration: 2, repeat: Infinity, repeatDelay: 3 }}\n            >\n              <Briefcase className=\"w-20 h-20 text-purple-500 mx-auto\" />\n              <Sparkles className=\"w-6 h-6 text-yellow-400 absolute -top-2 -right-2 animate-pulse\" />\n            </motion.div>\n            <h2 className=\"text-4xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 bg-clip-text text-transparent mb-4\">\n              Sélectionnez votre projet\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-md mx-auto\">\n              Découvrez un tableau de bord révolutionnaire avec des données en temps réel\n            </p>\n            <motion.button \n              onClick={() => onNavigate?.('projects')}\n              className=\"bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 hover:from-purple-700 hover:via-blue-700 hover:to-cyan-700 text-white px-8 py-4 rounded-2xl font-semibold text-lg shadow-2xl transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <span className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5\" />\n                Explorer les projets\n              </span>\n            </motion.button>\n          </motion.div>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div \n      className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 dark:from-gray-900 dark:via-purple-900/20 dark:to-blue-900/20 p-6\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.6 }}\n    >\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header ultra-moderne */}\n        <motion.div \n          className=\"relative overflow-hidden bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 rounded-3xl shadow-2xl p-8 text-white\"\n          initial={{ y: -50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.8 }}\n        >\n          <div className=\"absolute inset-0 bg-black/10\"></div>\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <motion.div\n                  className=\"p-4 bg-white/20 backdrop-blur-sm rounded-2xl\"\n                  animate={{ rotate: [0, 5, -5, 0] }}\n                  transition={{ duration: 3, repeat: Infinity }}\n                >\n                  <Briefcase className=\"w-8 h-8 text-white\" />\n                </motion.div>\n                <div>\n                  <h1 className=\"text-4xl font-bold mb-2\">\n                    {validProject.name}\n                  </h1>\n                  <p className=\"text-white/80 text-lg\">\n                    {validProject.description || 'Tableau de bord en temps réel'}\n                  </p>\n                </div>\n              </div>\n              <motion.div \n                className=\"text-right\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.5, duration: 0.5 }}\n              >\n                <div className=\"text-white/80 text-sm mb-1\">Progression globale</div>\n                <div className=\"text-5xl font-bold\">{stats.progress}%</div>\n              </motion.div>\n            </div>\n            \n            {/* Barre de progression ultra-moderne */}\n            <div className=\"relative w-full bg-white/20 backdrop-blur-sm rounded-full h-4 mb-6 overflow-hidden\">\n              <motion.div \n                className=\"absolute inset-0 bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{ width: `${stats.progress}%` }}\n                transition={{ delay: 1, duration: 1.5, ease: \"easeOut\" }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse\"></div>\n              </motion.div>\n            </div>\n\n            {/* Statistiques rapides */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {[\n                { icon: Target, value: stats.totalTasks, label: 'Tâches totales', delay: 0.2 },\n                { icon: CheckCircle, value: stats.completedTasks, label: 'Terminées', delay: 0.3 },\n                { icon: Clock, value: stats.inProgressTasks, label: 'En cours', delay: 0.4 },\n                { icon: Users, value: stats.teamMembers, label: 'Membres', delay: 0.5 }\n              ].map((stat, index) => (\n                <motion.div \n                  key={stat.label}\n                  className=\"relative overflow-hidden bg-white/10 backdrop-blur-sm rounded-2xl p-4 text-center\"\n                  initial={{ y: 50, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ delay: stat.delay, duration: 0.6 }}\n                  whileHover={{ scale: 1.05, y: -5 }}\n                >\n                  <div className=\"flex justify-center mb-2\">\n                    <stat.icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"text-3xl font-bold text-white mb-1\">{stat.value}</div>\n                  <div className=\"text-white/80 text-sm\">{stat.label}</div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"absolute top-4 right-4\">\n            <Sparkles className=\"w-6 h-6 text-yellow-300 animate-pulse\" />\n          </div>\n          <div className=\"absolute bottom-4 left-4\">\n            <Activity className=\"w-5 h-5 text-cyan-300 animate-bounce\" />\n          </div>\n        </motion.div>\n\n        {/* Widgets avancés */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-6\">\n          <AdvancedFinancialWidget />\n          <EquipmentMaintenanceWidget />\n          <TeamProductivityWidget />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-6\">\n          <DeliverySupplyWidget />\n          <DocumentsComplianceWidget />\n        </div>\n\n        <div className=\"mb-6\">\n          <AnalyticsWidget />\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default UltraModernDashboard;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\ActivityTimelineWidget.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'getTimeAgo' function makes the dependencies of useMemo Hook (at line 130) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'getTimeAgo' in its own useCallback() Hook.","line":19,"column":9,"nodeType":"VariableDeclarator","endLine":31,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\r\nimport { Clock, CheckCircle, AlertCircle, User, Calendar } from 'lucide-react';\r\nimport { useProjects } from '../../../hooks/useProjects';\r\n\r\ninterface ActivityItem {\r\n  id: string;\r\n  type: 'task_completed' | 'task_started' | 'milestone' | 'alert' | 'meeting';\r\n  title: string;\r\n  description: string;\r\n  time: string;\r\n  user?: string;\r\n  priority?: 'low' | 'medium' | 'high';\r\n}\r\n\r\nconst ActivityTimelineWidget: React.FC = () => {\r\n  const { currentProject } = useProjects();\r\n\r\n  // Fonction utilitaire pour calculer le temps écoulé\r\n  const getTimeAgo = (date: Date, now: Date): string => {\r\n    const diffMs = now.getTime() - date.getTime();\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffDays = Math.floor(diffHours / 24);\r\n\r\n    if (diffDays > 0) {\r\n      return `${diffDays}j`;\r\n    } else if (diffHours > 0) {\r\n      return `${diffHours}h`;\r\n    } else {\r\n      return 'maintenant';\r\n    }\r\n  };\r\n\r\n  // Générer des activités dynamiques basées sur les vraies données du projet\r\n  const activities: ActivityItem[] = useMemo(() => {\r\n    if (!currentProject) {\r\n      return [];\r\n    }\r\n\r\n    const recentActivities: ActivityItem[] = [];\r\n    const now = new Date();\r\n\r\n    // Activités basées sur les tâches du projet\r\n    (currentProject.phases || []).forEach(phase => {\r\n      (phase.tasks || []).forEach(task => {\r\n        if (task.status === 'done') {\r\n          recentActivities.push({\r\n            id: `task-${task.id}`,\r\n            type: 'task_completed',\r\n            title: `Tâche terminée: ${task.name}`,\r\n            description: `Phase: ${phase.name}`,\r\n            time: task.updatedAt ? getTimeAgo(new Date(task.updatedAt), now) : '1j',\r\n            user: task.assignedTo && task.assignedTo.length > 0 ? task.assignedTo[0] : undefined,\r\n            priority: task.priority as 'low' | 'medium' | 'high'\r\n          });\r\n        } else if (task.status === 'in_progress') {\r\n          recentActivities.push({\r\n            id: `task-progress-${task.id}`,\r\n            type: 'task_started',\r\n            title: `En cours: ${task.name}`,\r\n            description: `Phase: ${phase.name}`,\r\n            time: task.startDate ? getTimeAgo(new Date(task.startDate), now) : '2h',\r\n            user: task.assignedTo && task.assignedTo.length > 0 ? task.assignedTo[0] : undefined,\r\n            priority: task.priority as 'low' | 'medium' | 'high'\r\n          });\r\n        }\r\n\r\n        // Alertes pour les tâches en retard\r\n        if (task.status !== 'done' && task.dueDate && new Date(task.dueDate) < now) {\r\n          recentActivities.push({\r\n            id: `alert-${task.id}`,\r\n            type: 'alert',\r\n            title: `Tâche en retard: ${task.name}`,\r\n            description: `Échéance dépassée depuis ${getTimeAgo(new Date(task.dueDate), now)}`,\r\n            time: getTimeAgo(new Date(task.dueDate), now),\r\n            priority: 'high'\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // Activités basées sur les équipements\r\n    (currentProject.equipment || []).forEach(equipment => {\r\n      if (equipment.status === 'maintenance') {\r\n        recentActivities.push({\r\n          id: `equipment-${equipment.id}`,\r\n          type: 'alert',\r\n          title: `Équipement en maintenance`,\r\n          description: `${equipment.name} (${equipment.type})`,\r\n          time: '3h',\r\n          priority: 'medium'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Milestones basés sur les phases terminées\r\n    (currentProject.phases || []).forEach(phase => {\r\n      if (phase.status === 'completed') {\r\n        recentActivities.push({\r\n          id: `milestone-${phase.id}`,\r\n          type: 'milestone',\r\n          title: `Phase terminée: ${phase.name}`,\r\n          description: `Toutes les tâches de la phase sont complétées`,\r\n          time: phase.endDate ? getTimeAgo(new Date(phase.endDate), now) : '1j',\r\n          priority: 'high'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Si pas d'activités, afficher un message par défaut\r\n    if (recentActivities.length === 0) {\r\n      recentActivities.push({\r\n        id: 'default',\r\n        type: 'task_started',\r\n        title: 'Projet initialisé',\r\n        description: `Projet \"${currentProject.name}\" créé et prêt`,\r\n        time: currentProject.createdAt ? getTimeAgo(new Date(currentProject.createdAt), now) : 'récemment',\r\n        user: currentProject.manager || 'Gestionnaire',\r\n        priority: 'medium'\r\n      });\r\n    }\r\n\r\n    // Trier par ordre chronologique et limiter à 5 activités\r\n    return recentActivities\r\n      .sort((a, b) => {\r\n        // Tri basique par type de priorité et temps\r\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\r\n        return (priorityOrder[b.priority || 'medium'] || 2) - (priorityOrder[a.priority || 'medium'] || 2);\r\n      })\r\n      .slice(0, 5);\r\n  }, [currentProject, getTimeAgo]);\r\n\r\n  const getActivityIcon = (type: ActivityItem['type']) => {\r\n    switch (type) {\r\n      case 'task_completed':\r\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\r\n      case 'task_started':\r\n        return <Clock className=\"w-4 h-4 text-blue-500\" />;\r\n      case 'alert':\r\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\r\n      case 'meeting':\r\n        return <Calendar className=\"w-4 h-4 text-purple-500\" />;\r\n      case 'milestone':\r\n        return <CheckCircle className=\"w-4 h-4 text-orange-500\" />;\r\n      default:\r\n        return <Clock className=\"w-4 h-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority?: string) => {\r\n    switch (priority) {\r\n      case 'high': return 'border-l-red-500';\r\n      case 'medium': return 'border-l-yellow-500';\r\n      case 'low': return 'border-l-green-500';\r\n      default: return 'border-l-gray-300';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700\">\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Activités Récentes</h3>\r\n        <Clock className=\"w-5 h-5 text-gray-400\" />\r\n      </div>\r\n      \r\n      <div className=\"space-y-4 max-h-80 overflow-y-auto\">\r\n        {activities.map((activity, index) => (\r\n          <div\r\n            key={activity.id}\r\n            className={`relative pl-6 pb-4 border-l-2 ${getPriorityColor(activity.priority)} ${\r\n              index === activities.length - 1 ? '' : 'border-b border-gray-100 dark:border-gray-700'\r\n            }`}\r\n          >\r\n            {/* Timeline dot */}\r\n            <div className=\"absolute -left-2 top-1 bg-white dark:bg-gray-800 rounded-full p-1 border-2 border-gray-200 dark:border-gray-600\">\r\n              {getActivityIcon(activity.type)}\r\n            </div>\r\n            \r\n            {/* Content */}\r\n            <div className=\"ml-2\">\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex-1\">\r\n                  <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                    {activity.title}\r\n                  </h4>\r\n                  <p className=\"text-xs text-gray-600 dark:text-gray-300 mt-1\">\r\n                    {activity.description}\r\n                  </p>\r\n                  {activity.user && (\r\n                    <div className=\"flex items-center mt-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                      <User className=\"w-3 h-3 mr-1\" />\r\n                      {activity.user}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\r\n                  il y a {activity.time}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n        <button className=\"text-sm text-orange-600 hover:text-orange-700 font-medium\">\r\n          Voir toutes les activités →\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityTimelineWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\AdvancedFinancialWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\AnalyticsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\AnimatedStatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\BudgetAlertsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\CircularProgressWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\DeliverySupplyWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":2,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'phases' is assigned a value but never used.","line":49,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Truck, Package, Clock, AlertTriangle, CheckCircle, TrendingDown, MapPin } from 'lucide-react';\nimport { useProjects } from '../../../hooks/useProjects';\nimport { useCurrency } from '../../../hooks/useCurrency';\n\ninterface DeliveryData {\n  inTransitDeliveries: number;\n  expectedDeliveries: number;\n  delayedDeliveries: number;\n  complianceRate: number;\n  criticalStock: Array<{\n    id: string;\n    item: string;\n    currentStock: number;\n    minStock: number;\n    supplier: string;\n  }>;\n  upcomingDeliveries: Array<{\n    id: string;\n    supplier: string;\n    items: string[];\n    expectedDate: string;\n    value: number;\n    status: 'on_time' | 'delayed' | 'critical';\n  }>;\n  totalValue: number;\n  averageDeliveryTime: number;\n}\n\nconst DeliverySupplyWidget: React.FC = () => {\n  const { currentProject } = useProjects();\n  const { formatAmount } = useCurrency();\n  const [deliveryData, setDeliveryData] = useState<DeliveryData>({\n    inTransitDeliveries: 0,\n    expectedDeliveries: 0,\n    delayedDeliveries: 0,\n    complianceRate: 0,\n    criticalStock: [],\n    upcomingDeliveries: [],\n    totalValue: 0,\n    averageDeliveryTime: 0\n  });\n\n  useEffect(() => {\n    if (!currentProject) return;\n\n    // Simulation basée sur les équipements et phases du projet\n    const equipment = currentProject.equipment || [];\n    const phases = currentProject.phases || [];\n    \n    // Calculs basés sur les vraies données du projet\n    const inTransitDeliveries = 0; // Pas de système de livraisons implémenté\n    const expectedDeliveries = 0; // Pas de livraisons programmées\n    const delayedDeliveries = 0; // Pas de retards sans livraisons\n    const complianceRate = 100; // 100% par défaut sans livraisons\n\n    // Stock critique basé sur les équipements réels\n    const criticalStock = equipment\n      .filter(eq => eq.status === 'out-of-service' || eq.status === 'maintenance')\n      .slice(0, 3)\n      .map(eq => ({\n        id: eq.id,\n        item: eq.name,\n        currentStock: 0, // Considéré comme stock zéro si hors service\n        minStock: 1,\n        supplier: `Équipement: ${eq.type}`\n      }));\n\n    // Livraisons à venir basées sur les équipements nécessaires\n    const upcomingDeliveries = equipment\n      .filter(eq => eq.status === 'maintenance' || eq.status === 'out-of-service')\n      .slice(0, 3)\n      .map((eq, index) => ({\n        id: eq.id,\n        supplier: `Maintenance ${eq.type}`,\n        items: [eq.name],\n        expectedDate: eq.nextMaintenance || new Date(Date.now() + (index + 1) * 7 * 24 * 60 * 60 * 1000).toISOString(),\n        value: eq.dailyRate || 0,\n        status: 'on_time' as const\n      }));\n\n    const totalValue = upcomingDeliveries.reduce((sum, delivery) => sum + delivery.value, 0);\n    const averageDeliveryTime = 7; // 7 jours par défaut pour la maintenance\n\n    setDeliveryData({\n      inTransitDeliveries,\n      expectedDeliveries,\n      delayedDeliveries,\n      complianceRate,\n      criticalStock,\n      upcomingDeliveries,\n      totalValue,\n      averageDeliveryTime\n    });\n  }, [currentProject]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'on_time': return 'text-green-600 bg-green-100 dark:bg-green-900/30 dark:text-green-300';\n      case 'delayed': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/30 dark:text-yellow-300';\n      case 'critical': return 'text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300';\n      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-900/30 dark:text-gray-300';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'on_time': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'delayed': return <Clock className=\"w-4 h-4\" />;\n      case 'critical': return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Package className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 border border-gray-200 dark:border-gray-700\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">Livraisons & Approvisionnement</h3>\n        <div className=\"flex items-center space-x-2\">\n          <Truck className=\"w-4 h-4 text-blue-600\" />\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {deliveryData.inTransitDeliveries} en transit\n          </span>\n        </div>\n      </div>\n\n      {/* Métriques principales */}\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n            {deliveryData.expectedDeliveries}\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">Attendues</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\n            {deliveryData.delayedDeliveries}\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">En retard</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n            {deliveryData.complianceRate}%\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">Conformité</div>\n        </div>\n      </div>\n\n      {/* Taux de conformité */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between text-sm mb-2\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Taux de conformité</span>\n          <span className={`font-medium ${\n            deliveryData.complianceRate > 90 ? 'text-green-600' : \n            deliveryData.complianceRate > 75 ? 'text-yellow-600' : 'text-red-600'\n          }`}>\n            {deliveryData.complianceRate}%\n          </span>\n        </div>\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n          <div \n            className={`h-3 rounded-full transition-all duration-500 ${\n              deliveryData.complianceRate > 90 ? 'bg-green-500' : \n              deliveryData.complianceRate > 75 ? 'bg-yellow-500' : 'bg-red-500'\n            }`}\n            style={{ width: `${deliveryData.complianceRate}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Stock critique */}\n      {deliveryData.criticalStock.length > 0 && (\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Stock critique</span>\n            <span className=\"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300 text-xs px-2 py-1 rounded-full\">\n              {deliveryData.criticalStock.length}\n            </span>\n          </div>\n          <div className=\"space-y-2\">\n            {deliveryData.criticalStock.map((stock) => (\n              <div key={stock.id} className=\"flex items-center justify-between py-2 px-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <TrendingDown className=\"w-4 h-4 text-red-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {stock.item}\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {stock.supplier}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm font-bold text-red-600 dark:text-red-400\">\n                    {stock.currentStock}/{stock.minStock}\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">Stock</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Prochaines livraisons */}\n      <div className=\"mb-6\">\n        <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Prochaines livraisons</h4>\n        <div className=\"space-y-2\">\n          {deliveryData.upcomingDeliveries.slice(0, 3).map((delivery) => (\n            <div key={delivery.id} className=\"flex items-center justify-between py-2 px-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                {getStatusIcon(delivery.status)}\n                <div>\n                  <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {delivery.supplier}\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {new Date(delivery.expectedDate).toLocaleDateString('fr-FR')} • {delivery.items.join(', ')}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm font-bold text-gray-900 dark:text-white\">\n                  {formatAmount(delivery.value)}\n                </div>\n                <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(delivery.status)}`}>\n                  {delivery.status === 'on_time' ? 'À temps' : \n                   delivery.status === 'delayed' ? 'Retard' : 'Critique'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Statistiques */}\n      <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Valeur totale</span>\n            <span className=\"font-bold text-gray-900 dark:text-white\">\n              {formatAmount(deliveryData.totalValue)}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-gray-600 dark:text-gray-400\">Délai moyen</span>\n            <span className=\"font-bold text-gray-900 dark:text-white\">\n              {deliveryData.averageDeliveryTime}j\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeliverySupplyWidget;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\DocumentsComplianceWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\EquipmentMaintenanceWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":2,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getEquipmentIcon' is assigned a value but never used.","line":121,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":121,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Wrench, AlertTriangle, CheckCircle, MapPin, Clock, TrendingUp } from 'lucide-react';\nimport { useProjects } from '../../../hooks/useProjects';\nimport { useCurrency } from '../../../hooks/useCurrency';\n\ninterface EquipmentData {\n  totalEquipment: number;\n  availableEquipment: number;\n  inMaintenanceEquipment: number;\n  maintenanceAlerts: Array<{\n    id: string;\n    name: string;\n    type: string;\n    daysOverdue: number;\n    priority: 'low' | 'medium' | 'high';\n  }>;\n  availabilityRate: number;\n  maintenanceCosts: number;\n  geolocatedEquipment: number;\n  upcomingMaintenance: Array<{\n    id: string;\n    name: string;\n    scheduledDate: string;\n    type: string;\n  }>;\n}\n\nconst EquipmentMaintenanceWidget: React.FC = () => {\n  const { currentProject } = useProjects();\n  const { formatAmount } = useCurrency();\n  const [equipmentData, setEquipmentData] = useState<EquipmentData>({\n    totalEquipment: 0,\n    availableEquipment: 0,\n    inMaintenanceEquipment: 0,\n    maintenanceAlerts: [],\n    availabilityRate: 0,\n    maintenanceCosts: 0,\n    geolocatedEquipment: 0,\n    upcomingMaintenance: []\n  });\n\n  useEffect(() => {\n    if (!currentProject) return;\n\n    const equipment = currentProject.equipment || [];\n    const totalEquipment = equipment.length;\n    const availableEquipment = equipment.filter(eq => eq.status === 'available').length;\n    const inMaintenanceEquipment = equipment.filter(eq => eq.status === 'maintenance').length;\n    const geolocatedEquipment = equipment.filter(eq => eq.coordinates).length;\n\n    // Alertes de maintenance réelles basées sur les équipements du projet\n    const maintenanceAlerts = equipment\n      .filter(eq => {\n        if (!eq.nextMaintenance) return false;\n        const nextMaintenance = new Date(eq.nextMaintenance);\n        const today = new Date();\n        return nextMaintenance < today;\n      })\n      .map(eq => {\n        const nextMaintenance = new Date(eq.nextMaintenance);\n        const today = new Date();\n        const daysOverdue = Math.floor((today.getTime() - nextMaintenance.getTime()) / (1000 * 60 * 60 * 24));\n        \n        return {\n          id: eq.id,\n          name: eq.name,\n          type: eq.type,\n          daysOverdue,\n          priority: daysOverdue > 30 ? 'high' : daysOverdue > 14 ? 'medium' : 'low' as 'low' | 'medium' | 'high'\n        };\n      });\n\n    // Calculs réels\n    const availabilityRate = totalEquipment > 0 ? Math.round((availableEquipment / totalEquipment) * 100) : 0;\n    const maintenanceCosts = equipment.reduce((sum, eq) => {\n      // Coût de maintenance basé sur le coût journalier réel\n      if (eq.status === 'maintenance') {\n        return sum + (eq.dailyRate || 0);\n      }\n      return sum;\n    }, 0);\n\n    // Maintenance à venir basée sur les vraies dates\n    const upcomingMaintenance = equipment\n      .filter(eq => {\n        if (!eq.nextMaintenance) return false;\n        const nextMaintenance = new Date(eq.nextMaintenance);\n        const today = new Date();\n        const inNext30Days = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);\n        return nextMaintenance >= today && nextMaintenance <= inNext30Days;\n      })\n      .map(eq => ({\n        id: eq.id,\n        name: eq.name,\n        scheduledDate: eq.nextMaintenance,\n        type: eq.type\n      }))\n      .slice(0, 3);\n\n    setEquipmentData({\n      totalEquipment,\n      availableEquipment,\n      inMaintenanceEquipment,\n      maintenanceAlerts,\n      availabilityRate,\n      maintenanceCosts,\n      geolocatedEquipment,\n      upcomingMaintenance\n    });\n  }, [currentProject]);\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300';\n      case 'medium': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/30 dark:text-yellow-300';\n      case 'low': return 'text-green-600 bg-green-100 dark:bg-green-900/30 dark:text-green-300';\n      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-900/30 dark:text-gray-300';\n    }\n  };\n\n  const getEquipmentIcon = (type: string) => {\n    // Retourner une icône basée sur le type d'équipement\n    return <Wrench className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 border border-gray-200 dark:border-gray-700\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">Équipements & Maintenance</h3>\n        <div className=\"flex items-center space-x-2\">\n          <MapPin className=\"w-4 h-4 text-blue-600\" />\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {equipmentData.geolocatedEquipment}/{equipmentData.totalEquipment} géolocalisés\n          </span>\n        </div>\n      </div>\n\n      {/* Métriques principales */}\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n            {equipmentData.availableEquipment}\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">Disponibles</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\n            {equipmentData.inMaintenanceEquipment}\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">En maintenance</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n            {equipmentData.availabilityRate}%\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">Disponibilité</div>\n        </div>\n      </div>\n\n      {/* Barre de disponibilité */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between text-sm mb-2\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Taux de disponibilité</span>\n          <span className={`font-medium ${\n            equipmentData.availabilityRate > 80 ? 'text-green-600' : \n            equipmentData.availabilityRate > 60 ? 'text-yellow-600' : 'text-red-600'\n          }`}>\n            {equipmentData.availabilityRate}%\n          </span>\n        </div>\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n          <div \n            className={`h-3 rounded-full transition-all duration-500 ${\n              equipmentData.availabilityRate > 80 ? 'bg-green-500' : \n              equipmentData.availabilityRate > 60 ? 'bg-yellow-500' : 'bg-red-500'\n            }`}\n            style={{ width: `${equipmentData.availabilityRate}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Alertes de maintenance */}\n      {equipmentData.maintenanceAlerts.length > 0 && (\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Alertes maintenance</span>\n            <span className=\"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300 text-xs px-2 py-1 rounded-full\">\n              {equipmentData.maintenanceAlerts.length}\n            </span>\n          </div>\n          <div className=\"space-y-2\">\n            {equipmentData.maintenanceAlerts.slice(0, 2).map((alert) => (\n              <div key={alert.id} className=\"flex items-center justify-between py-2 px-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {alert.name}\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {alert.daysOverdue} jours de retard\n                    </div>\n                  </div>\n                </div>\n                <span className={`text-xs px-2 py-1 rounded-full ${getPriorityColor(alert.priority)}`}>\n                  {alert.priority}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Maintenance programmée */}\n      {equipmentData.upcomingMaintenance.length > 0 && (\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Maintenance programmée</h4>\n          <div className=\"space-y-2\">\n            {equipmentData.upcomingMaintenance.map((maintenance) => (\n              <div key={maintenance.id} className=\"flex items-center justify-between py-2 px-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-4 h-4 text-blue-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {maintenance.name}\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {new Date(maintenance.scheduledDate).toLocaleDateString('fr-FR')}\n                    </div>\n                  </div>\n                </div>\n                <span className=\"text-xs text-blue-600 dark:text-blue-400 capitalize\">\n                  {maintenance.type}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Coûts de maintenance */}\n      <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-4 h-4 text-purple-600\" />\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Coûts maintenance/mois</span>\n          </div>\n          <span className=\"text-sm font-bold text-purple-600 dark:text-purple-400\">\n            {formatAmount(equipmentData.maintenanceCosts)}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EquipmentMaintenanceWidget;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\EquipmentScannerWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnimatePresence' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Scan, \n  Package, \n  CheckCircle, \n  AlertTriangle, \n  Wrench, \n  MapPin,\n  Calendar,\n  Plus,\n  Search\n} from 'lucide-react';\nimport { useTheme } from '../../../contexts/ThemeContext';\nimport QRScanner from '../../Equipment/QRScanner';\n\ninterface Equipment {\n  id: string;\n  name: string;\n  type: string;\n  serialNumber: string;\n  status: 'available' | 'in-use' | 'maintenance' | 'damaged';\n  location: string;\n  assignedTo?: string;\n  lastMaintenance?: Date;\n  nextMaintenance?: Date;\n  qrCode: string;\n}\n\ninterface EquipmentScannerWidgetProps {\n  className?: string;\n}\n\nconst EquipmentScannerWidget: React.FC<EquipmentScannerWidgetProps> = ({ className = '' }) => {\n  const { resolvedTheme } = useTheme();\n  const [showScanner, setShowScanner] = useState(false);\n  const [recentScans, setRecentScans] = useState<Equipment[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Données simulées d'équipements\n  const equipmentStats = {\n    total: 45,\n    available: 32,\n    inUse: 8,\n    maintenance: 3,\n    damaged: 2,\n  };\n\n  const recentEquipment = [\n    {\n      id: 'eq-001',\n      name: 'Pelleteuse CAT 320',\n      type: 'Engin de chantier',\n      serialNumber: 'CAT320-2024-001',\n      status: 'available' as const,\n      location: 'Chantier Dakar Nord',\n      qrCode: 'QR001',\n      lastMaintenance: new Date('2024-07-01'),\n      nextMaintenance: new Date('2024-08-15'),\n    },\n    {\n      id: 'eq-002',\n      name: 'Grue mobile 50T',\n      type: 'Engin de levage',\n      serialNumber: 'GROVE-RT550-002',\n      status: 'in-use' as const,\n      location: 'Chantier Almadies',\n      assignedTo: 'Mamadou Diallo',\n      qrCode: 'QR002',\n      lastMaintenance: new Date('2024-06-15'),\n      nextMaintenance: new Date('2024-09-01'),\n    },\n    {\n      id: 'eq-003',\n      name: 'Bétonnière 500L',\n      type: 'Équipement de construction',\n      serialNumber: 'BET500-2024-003',\n      status: 'maintenance' as const,\n      location: 'Atelier central',\n      qrCode: 'QR003',\n      lastMaintenance: new Date('2024-07-20'),\n      nextMaintenance: new Date('2024-08-20'),\n    },\n  ];\n\n  const handleScanSuccess = (equipment: Equipment) => {\n    setRecentScans(prev => [equipment, ...prev.slice(0, 4)]);\n    // Ici, vous pourriez également déclencher une navigation vers la page de détail de l'équipement\n    console.log('Équipement scanné:', equipment);\n  };\n\n  const getStatusColor = (status: Equipment['status']) => {\n    switch (status) {\n      case 'available': return 'text-green-500 bg-green-50 dark:bg-green-900/20';\n      case 'in-use': return 'text-blue-500 bg-blue-50 dark:bg-blue-900/20';\n      case 'maintenance': return 'text-yellow-500 bg-yellow-50 dark:bg-yellow-900/20';\n      case 'damaged': return 'text-red-500 bg-red-50 dark:bg-red-900/20';\n      default: return 'text-gray-500 bg-gray-50 dark:bg-gray-900/20';\n    }\n  };\n\n  const getStatusIcon = (status: Equipment['status']) => {\n    switch (status) {\n      case 'available': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'in-use': return <Package className=\"w-4 h-4\" />;\n      case 'maintenance': return <Wrench className=\"w-4 h-4\" />;\n      case 'damaged': return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Package className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusLabel = (status: Equipment['status']) => {\n    switch (status) {\n      case 'available': return 'Disponible';\n      case 'in-use': return 'En cours d\\'utilisation';\n      case 'maintenance': return 'En maintenance';\n      case 'damaged': return 'Endommagé';\n      default: return 'Inconnu';\n    }\n  };\n\n  const filteredEquipment = recentEquipment.filter(eq =>\n    eq.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    eq.serialNumber.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className={`h-full ${className}`}>\n      {/* En-tête avec bouton scanner */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-semibold flex items-center gap-2\">\n            <Package className=\"w-5 h-5 text-blue-500\" />\n            Équipements\n          </h3>\n          <motion.button\n            onClick={() => setShowScanner(true)}\n            className=\"flex items-center gap-2 px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Scan className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Scanner</span>\n          </motion.button>\n        </div>\n\n        {/* Statistiques rapides */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-2 mb-4\">\n          <motion.div\n            className={`p-2 rounded-lg border text-center ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 border-gray-600'\n                : 'bg-green-50 border-green-200'\n            }`}\n            whileHover={{ scale: 1.02 }}\n          >\n            <div className=\"flex items-center justify-center gap-1 mb-1\">\n              <CheckCircle className=\"w-3 h-3 text-green-500\" />\n              <span className=\"text-xs font-medium\">Disponible</span>\n            </div>\n            <p className=\"text-lg font-bold text-green-600\">\n              {equipmentStats.available}\n            </p>\n          </motion.div>\n\n          <motion.div\n            className={`p-2 rounded-lg border text-center ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 border-gray-600'\n                : 'bg-blue-50 border-blue-200'\n            }`}\n            whileHover={{ scale: 1.02 }}\n          >\n            <div className=\"flex items-center justify-center gap-1 mb-1\">\n              <Package className=\"w-3 h-3 text-blue-500\" />\n              <span className=\"text-xs font-medium\">En cours</span>\n            </div>\n            <p className=\"text-lg font-bold text-blue-600\">\n              {equipmentStats.inUse}\n            </p>\n          </motion.div>\n\n          <motion.div\n            className={`p-2 rounded-lg border text-center ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 border-gray-600'\n                : 'bg-yellow-50 border-yellow-200'\n            }`}\n            whileHover={{ scale: 1.02 }}\n          >\n            <div className=\"flex items-center justify-center gap-1 mb-1\">\n              <Wrench className=\"w-3 h-3 text-yellow-500\" />\n              <span className=\"text-xs font-medium\">Maintenance</span>\n            </div>\n            <p className=\"text-lg font-bold text-yellow-600\">\n              {equipmentStats.maintenance}\n            </p>\n          </motion.div>\n\n          <motion.div\n            className={`p-2 rounded-lg border text-center ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 border-gray-600'\n                : 'bg-red-50 border-red-200'\n            }`}\n            whileHover={{ scale: 1.02 }}\n          >\n            <div className=\"flex items-center justify-center gap-1 mb-1\">\n              <AlertTriangle className=\"w-3 h-3 text-red-500\" />\n              <span className=\"text-xs font-medium\">Endommagé</span>\n            </div>\n            <p className=\"text-lg font-bold text-red-600\">\n              {equipmentStats.damaged}\n            </p>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Barre de recherche */}\n      <div className=\"mb-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <input\n            type=\"text\"\n            placeholder=\"Rechercher un équipement...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className={`w-full pl-10 pr-4 py-2 rounded-lg border transition-colors ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400'\n                : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'\n            } focus:outline-none focus:ring-2 focus:ring-blue-500`}\n          />\n        </div>\n      </div>\n\n      {/* Scans récents */}\n      {recentScans.length > 0 && (\n        <div className=\"mb-4\">\n          <h4 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n            <Scan className=\"w-4 h-4 text-green-500\" />\n            Derniers scans\n          </h4>\n          <div className=\"space-y-2\">\n            {recentScans.map((equipment, index) => (\n              <motion.div\n                key={`${equipment.id}-${index}`}\n                className={`p-2 rounded-lg border-l-4 border-green-500 ${\n                  resolvedTheme === 'dark'\n                    ? 'bg-green-900/20'\n                    : 'bg-green-50'\n                }`}\n                initial={{ opacity: 0, x: -10 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium text-sm text-green-600 dark:text-green-400\">\n                      {equipment.name}\n                    </p>\n                    <p className=\"text-xs opacity-70\">\n                      Scanné à l'instant\n                    </p>\n                  </div>\n                  <div className={`px-2 py-1 rounded text-xs ${getStatusColor(equipment.status)}`}>\n                    {getStatusLabel(equipment.status)}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Liste des équipements */}\n      <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n        <h4 className=\"text-sm font-medium mb-2\">Équipements récents</h4>\n        {filteredEquipment.map((equipment, index) => (\n          <motion.div\n            key={equipment.id}\n            className={`p-3 rounded-lg border transition-all duration-200 cursor-pointer ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 border-gray-600 hover:bg-gray-600'\n                : 'bg-white border-gray-200 hover:bg-gray-50'\n            }`}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.05 }}\n            whileHover={{ x: 2 }}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className={`p-1 rounded ${getStatusColor(equipment.status)}`}>\n                  {getStatusIcon(equipment.status)}\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">{equipment.name}</p>\n                  <p className=\"text-xs opacity-70\">{equipment.type}</p>\n                </div>\n              </div>\n              <div className={`px-2 py-1 rounded text-xs ${getStatusColor(equipment.status)}`}>\n                {getStatusLabel(equipment.status)}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div className=\"flex items-center gap-1\">\n                <MapPin className=\"w-3 h-3 opacity-70\" />\n                <span className=\"opacity-70\">{equipment.location}</span>\n              </div>\n              {equipment.assignedTo && (\n                <div className=\"opacity-70\">\n                  Assigné à: {equipment.assignedTo}\n                </div>\n              )}\n              {equipment.nextMaintenance && (\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"w-3 h-3 opacity-70\" />\n                  <span className=\"opacity-70\">\n                    Maintenance: {equipment.nextMaintenance.toLocaleDateString()}\n                  </span>\n                </div>\n              )}\n              <div className=\"opacity-70\">\n                S/N: {equipment.serialNumber}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n\n        {filteredEquipment.length === 0 && searchTerm && (\n          <div className={`p-4 text-center rounded-lg border-2 border-dashed ${\n            resolvedTheme === 'dark'\n              ? 'border-gray-600 text-gray-400'\n              : 'border-gray-300 text-gray-500'\n          }`}>\n            <Search className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">Aucun équipement trouvé</p>\n            <p className=\"text-xs opacity-70 mt-1\">\n              Essayez un autre terme de recherche\n            </p>\n          </div>\n        )}\n\n        {filteredEquipment.length === 0 && !searchTerm && (\n          <div className={`p-4 text-center rounded-lg border-2 border-dashed ${\n            resolvedTheme === 'dark'\n              ? 'border-gray-600 text-gray-400'\n              : 'border-gray-300 text-gray-500'\n          }`}>\n            <Package className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n            <p className=\"text-sm\">Aucun équipement configuré</p>\n            <button className=\"mt-2 flex items-center gap-1 text-xs text-blue-500 hover:text-blue-600 transition-colors mx-auto\">\n              <Plus className=\"w-3 h-3\" />\n              Ajouter un équipement\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Scanner QR Modal */}\n      <QRScanner\n        isOpen={showScanner}\n        onClose={() => setShowScanner(false)}\n        onScanSuccess={handleScanSuccess}\n        onScanError={(error) => console.error('Erreur de scan:', error)}\n      />\n    </div>\n  );\n};\n\nexport default EquipmentScannerWidget;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\OfflineStatusWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusColor' is assigned a value but never used.","line":64,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":213,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":65}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Wifi, \n  WifiOff, \n  RefreshCw, \n  Database, \n  Clock, \n  AlertCircle,\n  CheckCircle,\n  Trash2,\n  Download,\n  Upload\n} from 'lucide-react';\nimport { useTheme } from '../../../contexts/ThemeContext';\nimport { useOffline } from '../../../contexts/OfflineContext';\n\ninterface OfflineStatusWidgetProps {\n  className?: string;\n}\n\nconst OfflineStatusWidget: React.FC<OfflineStatusWidgetProps> = ({ className = '' }) => {\n  const { resolvedTheme } = useTheme();\n  const { \n    isOnline, \n    pendingActions, \n    syncPendingActions, \n    getCacheSize, \n    getLastSyncTime,\n    clearCache \n  } = useOffline();\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  const cacheSize = getCacheSize();\n  const lastSync = getLastSyncTime();\n  const pendingCount = pendingActions.length;\n\n  const handleSync = async () => {\n    setIsSyncing(true);\n    try {\n      await syncPendingActions();\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const formatLastSync = (date: Date | null) => {\n    if (!date) return 'Jamais';\n    \n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / (1000 * 60));\n    \n    if (minutes < 1) return 'À l\\'instant';\n    if (minutes < 60) return `${minutes}min`;\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours}h`;\n    const days = Math.floor(hours / 24);\n    return `${days}j`;\n  };\n\n  const getStatusColor = () => {\n    if (!isOnline) return 'text-orange-500';\n    if (pendingCount > 0) return 'text-yellow-500';\n    return 'text-green-500';\n  };\n\n  const getStatusText = () => {\n    if (!isOnline) return 'Hors ligne';\n    if (pendingCount > 0) return `${pendingCount} en attente`;\n    return 'Synchronisé';\n  };\n\n  return (\n    <div className={`h-full ${className}`}>\n      {/* En-tête principal */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-semibold flex items-center gap-2\">\n            {isOnline ? (\n              <Wifi className=\"w-5 h-5 text-green-500\" />\n            ) : (\n              <WifiOff className=\"w-5 h-5 text-orange-500\" />\n            )}\n            Mode Offline\n          </h3>\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className={`p-2 rounded-lg transition-colors ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-700 hover:bg-gray-600 text-gray-300'\n                : 'bg-gray-100 hover:bg-gray-200 text-gray-600'\n            }`}\n            title=\"Voir les détails\"\n          >\n            <Database className=\"w-4 h-4\" />\n          </button>\n        </div>\n\n        {/* Statut principal */}\n        <motion.div\n          className={`p-4 rounded-lg border ${\n            resolvedTheme === 'dark'\n              ? 'bg-gray-800 border-gray-700'\n              : 'bg-white border-gray-200'\n          }`}\n          whileHover={{ scale: 1.02 }}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`w-3 h-3 rounded-full ${\n                isOnline ? 'bg-green-500' : 'bg-orange-500'\n              } animate-pulse`} />\n              <div>\n                <p className=\"font-medium\">{getStatusText()}</p>\n                <p className=\"text-xs opacity-70\">\n                  {isOnline ? 'Connexion active' : 'Travail hors ligne possible'}\n                </p>\n              </div>\n            </div>\n            \n            {isOnline && pendingCount > 0 && (\n              <motion.button\n                onClick={handleSync}\n                disabled={isSyncing}\n                className=\"flex items-center gap-2 px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <RefreshCw className={`w-4 h-4 ${isSyncing ? 'animate-spin' : ''}`} />\n                <span className=\"text-sm\">Sync</span>\n              </motion.button>\n            )}\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Statistiques rapides */}\n      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n        <motion.div\n          className={`p-3 rounded-lg text-center ${\n            resolvedTheme === 'dark'\n              ? 'bg-blue-900/30 border border-blue-700'\n              : 'bg-blue-50 border border-blue-200'\n          }`}\n          whileHover={{ scale: 1.02 }}\n        >\n          <div className=\"flex items-center justify-center mb-1\">\n            <Upload className=\"w-4 h-4 text-blue-600\" />\n          </div>\n          <p className=\"text-xs opacity-70\">Actions</p>\n          <p className=\"text-lg font-bold text-blue-600\">\n            {pendingCount}\n          </p>\n        </motion.div>\n\n        <motion.div\n          className={`p-3 rounded-lg text-center ${\n            resolvedTheme === 'dark'\n              ? 'bg-purple-900/30 border border-purple-700'\n              : 'bg-purple-50 border border-purple-200'\n          }`}\n          whileHover={{ scale: 1.02 }}\n        >\n          <div className=\"flex items-center justify-center mb-1\">\n            <Database className=\"w-4 h-4 text-purple-600\" />\n          </div>\n          <p className=\"text-xs opacity-70\">Cache</p>\n          <p className=\"text-lg font-bold text-purple-600\">\n            {cacheSize}KB\n          </p>\n        </motion.div>\n      </div>\n\n      {/* Détails étendus */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"space-y-3\"\n          >\n            {/* Dernière synchronisation */}\n            <div className={`p-3 rounded-lg ${\n              resolvedTheme === 'dark'\n                ? 'bg-gray-800 border border-gray-700'\n                : 'bg-gray-50 border border-gray-200'\n            }`}>\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Clock className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm font-medium\">Dernière sync</span>\n              </div>\n              <p className=\"text-xs opacity-70\">\n                {formatLastSync(lastSync)}\n              </p>\n            </div>\n\n            {/* Actions en attente */}\n            {pendingCount > 0 && (\n              <div className={`p-3 rounded-lg ${\n                resolvedTheme === 'dark'\n                  ? 'bg-yellow-900/20 border border-yellow-700'\n                  : 'bg-yellow-50 border border-yellow-200'\n              }`}>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <AlertCircle className=\"w-4 h-4 text-yellow-600\" />\n                  <span className=\"text-sm font-medium\">Actions en attente</span>\n                </div>\n                <div className=\"space-y-1\">\n                  {pendingActions.slice(0, 3).map((action, index) => (\n                    <div key={action.id} className=\"flex items-center justify-between text-xs\">\n                      <span className=\"opacity-70\">\n                        {action.type} {action.collection}\n                      </span>\n                      <span className=\"text-yellow-600\">\n                        {action.retryCount > 0 ? `Retry ${action.retryCount}` : 'Nouveau'}\n                      </span>\n                    </div>\n                  ))}\n                  {pendingCount > 3 && (\n                    <p className=\"text-xs opacity-50 text-center mt-2\">\n                      +{pendingCount - 3} autres...\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Actions de gestion */}\n            <div className=\"flex gap-2\">\n              <motion.button\n                onClick={() => clearCache()}\n                className={`flex-1 flex items-center justify-center gap-2 p-2 rounded-lg transition-colors ${\n                  resolvedTheme === 'dark'\n                    ? 'bg-red-900/20 border border-red-700 text-red-400 hover:bg-red-900/30'\n                    : 'bg-red-50 border border-red-200 text-red-600 hover:bg-red-100'\n                }`}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Trash2 className=\"w-4 h-4\" />\n                <span className=\"text-xs\">Vider cache</span>\n              </motion.button>\n\n              {isOnline && (\n                <motion.button\n                  onClick={handleSync}\n                  disabled={isSyncing}\n                  className=\"flex-1 flex items-center justify-center gap-2 p-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors disabled:opacity-50\"\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <RefreshCw className={`w-4 h-4 ${isSyncing ? 'animate-spin' : ''}`} />\n                  <span className=\"text-xs\">\n                    {isSyncing ? 'Sync...' : 'Forcer sync'}\n                  </span>\n                </motion.button>\n              )}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Indicateur de statut permanent */}\n      <motion.div\n        className={`fixed bottom-4 right-4 z-50 p-2 rounded-full shadow-lg ${\n          isOnline \n            ? pendingCount > 0\n              ? 'bg-yellow-500'\n              : 'bg-green-500'\n            : 'bg-orange-500'\n        } text-white`}\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        whileHover={{ scale: 1.1 }}\n      >\n        {isOnline ? (\n          pendingCount > 0 ? (\n            <div className=\"flex items-center gap-1\">\n              <Upload className=\"w-4 h-4\" />\n              <span className=\"text-xs font-bold\">{pendingCount}</span>\n            </div>\n          ) : (\n            <CheckCircle className=\"w-4 h-4\" />\n          )\n        ) : (\n          <WifiOff className=\"w-4 h-4\" />\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default OfflineStatusWidget;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\ProjectsOverviewWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\QuoteStatsWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\RealTimeChartWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":114,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { BarChart3, TrendingUp } from 'lucide-react';\r\nimport { useProjects } from '../../../hooks/useProjects';\r\n\r\ninterface ChartData {\r\n  label: string;\r\n  value: number;\r\n  color: string;\r\n}\r\n\r\nconst RealTimeChartWidget: React.FC = () => {\r\n  const { currentProject } = useProjects();\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n\r\n  // Calculer les données de productivité basées sur le projet réel\r\n  const data = useMemo<ChartData[]>(() => {\r\n    if (!currentProject) {\r\n      return [\r\n        { label: 'Lun', value: 0, color: 'bg-gray-400' },\r\n        { label: 'Mar', value: 0, color: 'bg-gray-400' },\r\n        { label: 'Mer', value: 0, color: 'bg-gray-400' },\r\n        { label: 'Jeu', value: 0, color: 'bg-gray-400' },\r\n        { label: 'Ven', value: 0, color: 'bg-gray-400' },\r\n        { label: 'Sam', value: 0, color: 'bg-gray-400' },\r\n        { label: 'Dim', value: 0, color: 'bg-gray-400' }\r\n      ];\r\n    }\r\n\r\n    // Calculer la productivité par jour basée sur les tâches\r\n    const allTasks = (currentProject.phases || []).flatMap(phase => phase.tasks || []);\r\n    const totalTasks = allTasks.length;\r\n    const completedTasks = allTasks.filter(task => task.status === 'done').length;\r\n    const inProgressTasks = allTasks.filter(task => task.status === 'in_progress').length;\r\n    const delayedTasks = allTasks.filter(task => \r\n      task.status !== 'done' && task.dueDate && new Date(task.dueDate) < new Date()\r\n    ).length;\r\n\r\n    // Calculer l'efficacité globale\r\n    const globalEfficiency = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\r\n    const progressEfficiency = totalTasks > 0 ? Math.round(((completedTasks + inProgressTasks * 0.5) / totalTasks) * 100) : 0;\r\n    const delayPenalty = totalTasks > 0 ? Math.round((delayedTasks / totalTasks) * 30) : 0;\r\n\r\n    // Générer des données réalistes basées sur l'état du projet\r\n    const baseEfficiency = Math.max(20, progressEfficiency - delayPenalty);\r\n    \r\n    return [\r\n      { \r\n        label: 'Lun', \r\n        value: Math.min(100, baseEfficiency + (completedTasks > 0 ? 10 : -5)), \r\n        color: 'bg-blue-500' \r\n      },\r\n      { \r\n        label: 'Mar', \r\n        value: Math.min(100, baseEfficiency + (inProgressTasks > 0 ? 15 : 0)), \r\n        color: 'bg-green-500' \r\n      },\r\n      { \r\n        label: 'Mer', \r\n        value: Math.min(100, baseEfficiency + (delayedTasks === 0 ? 5 : -10)), \r\n        color: 'bg-yellow-500' \r\n      },\r\n      { \r\n        label: 'Jeu', \r\n        value: Math.min(100, globalEfficiency + 5), \r\n        color: 'bg-purple-500' \r\n      },\r\n      { \r\n        label: 'Ven', \r\n        value: Math.min(100, baseEfficiency), \r\n        color: 'bg-orange-500' \r\n      },\r\n      { \r\n        label: 'Sam', \r\n        value: Math.min(100, Math.max(30, baseEfficiency - 10)), \r\n        color: 'bg-red-500' \r\n      },\r\n      { \r\n        label: 'Dim', \r\n        value: Math.min(100, Math.max(25, baseEfficiency - 15)), \r\n        color: 'bg-indigo-500' \r\n      }\r\n    ];\r\n  }, [currentProject]);\r\n\r\n  // Animation de mise à jour périodique\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setIsUpdating(true);\r\n      setTimeout(() => setIsUpdating(false), 500);\r\n    }, 10000); // Mise à jour toutes les 10 secondes\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const maxValue = Math.max(...data.map(d => d.value));\r\n  const avgValue = data.reduce((sum, d) => sum + d.value, 0) / data.length;\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700\">\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Productivité Hebdomadaire</h3>\r\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">Progression des équipes</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className={`w-2 h-2 rounded-full ${isUpdating ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>\r\n          <BarChart3 className=\"w-5 h-5 text-gray-400\" />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chart */}\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex items-end justify-between h-40 space-x-2\">\r\n          {data.map((item, index) => (\r\n            <div key={item.label} className=\"flex flex-col items-center flex-1\">\r\n              <div className=\"w-full flex flex-col justify-end h-32 mb-2\">\r\n                <div\r\n                  className={`${item.color} rounded-t-md transition-all duration-1000 ease-out relative group cursor-pointer hover:opacity-80`}\r\n                  style={{ height: `${(item.value / maxValue) * 100}%` }}\r\n                >\r\n                  {/* Tooltip */}\r\n                  <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\r\n                    {Math.round(item.value)}%\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <span className=\"text-xs text-gray-600 dark:text-gray-300 font-medium\">\r\n                {item.label}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Stats */}\r\n        <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n          <div className=\"text-center\">\r\n            <div className=\"flex items-center justify-center space-x-1\">\r\n              <TrendingUp className=\"w-4 h-4 text-green-500\" />\r\n              <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                {Math.round(avgValue)}%\r\n              </span>\r\n            </div>\r\n            <p className=\"text-xs text-gray-600 dark:text-gray-300\">Moyenne</p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <div className=\"flex items-center justify-center space-x-1\">\r\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\r\n              <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                {Math.round(maxValue)}%\r\n              </span>\r\n            </div>\r\n            <p className=\"text-xs text-gray-600 dark:text-gray-300\">Maximum</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RealTimeChartWidget;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\TeamProductivityWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":2,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getRoleIcon' is assigned a value but never used.","line":115,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'role' is defined but never used.","line":115,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Users, MapPin, Clock, TrendingUp, AlertTriangle, CheckCircle, Star } from 'lucide-react';\nimport { useProjects } from '../../../hooks/useProjects';\n\ninterface TeamMember {\n  id: string;\n  name: string;\n  role: string;\n  isOnSite: boolean;\n  hoursToday: number;\n  tasksCompleted: number;\n  efficiency: number;\n  skills: string[];\n  lastActivity: string;\n}\n\ninterface TeamData {\n  totalMembers: number;\n  onSiteMembers: number;\n  totalHoursToday: number;\n  averageEfficiency: number;\n  tasksCompletedToday: number;\n  safetyIncidents: number;\n  topPerformers: TeamMember[];\n  skillsAvailable: string[];\n  attendanceRate: number;\n}\n\nconst TeamProductivityWidget: React.FC = () => {\n  const { currentProject } = useProjects();\n  const [teamData, setTeamData] = useState<TeamData>({\n    totalMembers: 0,\n    onSiteMembers: 0,\n    totalHoursToday: 0,\n    averageEfficiency: 0,\n    tasksCompletedToday: 0,\n    safetyIncidents: 0,\n    topPerformers: [],\n    skillsAvailable: [],\n    attendanceRate: 0\n  });\n\n  useEffect(() => {\n    if (!currentProject) return;\n\n    // Récupérer les membres de l'équipe depuis les tâches assignées\n    const assignedMembers = new Set<string>();\n    const allTasks = (currentProject.phases || []).flatMap(phase => phase.tasks || []);\n    \n    allTasks.forEach(task => {\n      (task.assignedTo || []).forEach(member => assignedMembers.add(member));\n    });\n\n    const totalMembers = assignedMembers.size;\n    \n    // Données réelles basées sur les membres assignés aux tâches\n    const membersList: TeamMember[] = Array.from(assignedMembers).map((memberName, index) => {\n      // Calculer les vraies statistiques pour chaque membre\n      const memberTasks = allTasks.filter(task => \n        (task.assignedTo || []).includes(memberName)\n      );\n      const completedTasks = memberTasks.filter(task => task.status === 'done').length;\n      const inProgressTasks = memberTasks.filter(task => task.status === 'in_progress').length;\n      \n      return {\n        id: `member-${index}`,\n        name: memberName,\n        role: 'Membre d\\'équipe', // Rôle générique car pas de données spécifiques\n        isOnSite: inProgressTasks > 0, // Considéré sur site s'il a des tâches en cours\n        hoursToday: inProgressTasks * 2, // Estimation: 2h par tâche en cours\n        tasksCompleted: completedTasks,\n        efficiency: memberTasks.length > 0 ? Math.round((completedTasks / memberTasks.length) * 100) : 0,\n        skills: [], // Pas de données de compétences disponibles\n        lastActivity: new Date().toISOString() // Activité récente si des tâches assignées\n      };\n    });\n\n    const onSiteMembers = membersList.filter(m => m.isOnSite).length;\n    const totalHoursToday = membersList.reduce((sum, m) => sum + m.hoursToday, 0);\n    const averageEfficiency = membersList.length > 0 \n      ? Math.round(membersList.reduce((sum, m) => sum + m.efficiency, 0) / membersList.length)\n      : 0;\n    const tasksCompletedToday = membersList.reduce((sum, m) => sum + m.tasksCompleted, 0);\n    \n    // Top performers (3 meilleurs)\n    const topPerformers = membersList\n      .sort((a, b) => b.efficiency - a.efficiency)\n      .slice(0, 3);\n\n    // Compétences disponibles\n    const skillsAvailable = [...new Set(membersList.flatMap(m => m.skills))];\n    \n    const attendanceRate = totalMembers > 0 ? Math.round((onSiteMembers / totalMembers) * 100) : 0;\n    const safetyIncidents = 0; // Pas de système de suivi des incidents implémenté\n\n    setTeamData({\n      totalMembers,\n      onSiteMembers,\n      totalHoursToday,\n      averageEfficiency,\n      tasksCompletedToday,\n      safetyIncidents,\n      topPerformers,\n      skillsAvailable,\n      attendanceRate\n    });\n  }, [currentProject]);\n\n  const getEfficiencyColor = (efficiency: number) => {\n    if (efficiency >= 90) return 'text-green-600 dark:text-green-400';\n    if (efficiency >= 75) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-red-600 dark:text-red-400';\n  };\n\n  const getRoleIcon = (role: string) => {\n    return <Users className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 border border-gray-200 dark:border-gray-700\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 dark:text-white\">Équipe & Productivité</h3>\n        <div className=\"flex items-center space-x-2\">\n          <MapPin className=\"w-4 h-4 text-green-600\" />\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {teamData.onSiteMembers}/{teamData.totalMembers} sur site\n          </span>\n        </div>\n      </div>\n\n      {/* Métriques principales */}\n      <div className=\"grid grid-cols-2 gap-4 mb-6\">\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Heures aujourd'hui</span>\n            <Clock className=\"w-4 h-4 text-blue-600\" />\n          </div>\n          <div className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">\n            {teamData.totalHoursToday}h\n          </div>\n        </div>\n\n        <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Tâches terminées</span>\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n          </div>\n          <div className=\"text-xl font-bold text-green-600 dark:text-green-400\">\n            {teamData.tasksCompletedToday}\n          </div>\n        </div>\n      </div>\n\n      {/* Efficacité moyenne */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between text-sm mb-2\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Efficacité moyenne</span>\n          <span className={`font-medium ${getEfficiencyColor(teamData.averageEfficiency)}`}>\n            {teamData.averageEfficiency}%\n          </span>\n        </div>\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n          <div \n            className={`h-3 rounded-full transition-all duration-500 ${\n              teamData.averageEfficiency >= 90 ? 'bg-green-500' : \n              teamData.averageEfficiency >= 75 ? 'bg-yellow-500' : 'bg-red-500'\n            }`}\n            style={{ width: `${teamData.averageEfficiency}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Taux de présence */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between text-sm mb-2\">\n          <span className=\"text-gray-600 dark:text-gray-400\">Taux de présence</span>\n          <span className={`font-medium ${\n            teamData.attendanceRate > 80 ? 'text-green-600' : \n            teamData.attendanceRate > 60 ? 'text-yellow-600' : 'text-red-600'\n          }`}>\n            {teamData.attendanceRate}%\n          </span>\n        </div>\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n          <div \n            className={`h-2 rounded-full transition-all duration-300 ${\n              teamData.attendanceRate > 80 ? 'bg-green-500' : \n              teamData.attendanceRate > 60 ? 'bg-yellow-500' : 'bg-red-500'\n            }`}\n            style={{ width: `${teamData.attendanceRate}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Top performers */}\n      {teamData.topPerformers.length > 0 && (\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 flex items-center\">\n            <Star className=\"w-4 h-4 text-yellow-500 mr-1\" />\n            Top performers\n          </h4>\n          <div className=\"space-y-2\">\n            {teamData.topPerformers.map((member, index) => (\n              <div key={member.id} className=\"flex items-center justify-between py-2 px-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                    index === 0 ? 'bg-yellow-500 text-white' :\n                    index === 1 ? 'bg-gray-400 text-white' :\n                    'bg-orange-400 text-white'\n                  }`}>\n                    {index + 1}\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {member.name}\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {member.role}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className={`text-sm font-bold ${getEfficiencyColor(member.efficiency)}`}>\n                    {member.efficiency}%\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {member.tasksCompleted} tâches\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Compétences disponibles */}\n      {teamData.skillsAvailable.length > 0 && (\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Compétences disponibles</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {teamData.skillsAvailable.slice(0, 4).map((skill) => (\n              <span key={skill} className=\"text-xs px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 rounded-full\">\n                {skill}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Incidents de sécurité */}\n      <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            {teamData.safetyIncidents === 0 ? (\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            ) : (\n              <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n            )}\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Incidents sécurité</span>\n          </div>\n          <span className={`text-sm font-bold ${\n            teamData.safetyIncidents === 0 ? 'text-green-600' : 'text-red-600'\n          }`}>\n            {teamData.safetyIncidents}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeamProductivityWidget;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\TeamTrackingWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Dashboard\\widgets\\WeatherWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\DocumentGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\DocumentList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\DocumentUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\DocumentViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\Documents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\FolderManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\ModernDocumentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\ShareModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Documents\\TagManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\Equipment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\EquipmentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\EquipmentDetailModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleChange' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleSubmit' is assigned a value but never used.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport type { Equipment } from '../../types';\r\nimport { X } from 'lucide-react';\r\n\r\nimport MaintenanceHistorySection from './MaintenanceHistorySection';\r\nimport EquipmentForm from './EquipmentForm';\r\n\r\ninterface EquipmentDetailModalProps {\r\n  equipment: Equipment | null;\r\n  onClose: () => void;\r\n  onEdit?: (equipment: Equipment) => void;\r\n  onDelete?: (equipment: Equipment) => void;\r\n  onUpdateMaintenance?: (equipment: Equipment) => void;\r\n}\r\n\r\nconst EquipmentDetailModal: React.FC<EquipmentDetailModalProps> = ({ equipment, onClose, onEdit, onDelete, onUpdateMaintenance }) => {\r\n  const [editMode, setEditMode] = React.useState(false);\r\n  const [confirmDelete, setConfirmDelete] = React.useState(false);\r\n  const [form, setForm] = React.useState<Equipment | null>(equipment);\r\n\r\n  React.useEffect(() => {\r\n    setForm(equipment);\r\n    setEditMode(false);\r\n    setConfirmDelete(false);\r\n  }, [equipment]);\r\n\r\n  if (!equipment) return null;\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    if (!form) return;\r\n    const { name, value } = e.target;\r\n    setForm({ ...form, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (form && onEdit) onEdit(form);\r\n    setEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30\">\r\n      <div className=\"bg-white rounded-lg shadow-lg p-8 w-full max-w-xl relative\">\r\n        <button className=\"absolute top-4 right-4 text-gray-400 hover:text-gray-800\" onClick={onClose}>\r\n          <X className=\"w-6 h-6\" />\r\n        </button>\r\n        <div className=\"absolute top-4 left-4 flex gap-2\">\r\n          <button className=\"px-3 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200\" onClick={() => setEditMode(!editMode)}>\r\n            {editMode ? 'Annuler' : 'Éditer'}\r\n          </button>\r\n          <button className=\"px-3 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200\" onClick={() => setConfirmDelete(true)}>\r\n            Supprimer\r\n          </button>\r\n        </div>\r\n        <h2 className=\"text-2xl font-bold mb-4 text-center\">{equipment.name}</h2>\r\n\r\n        {editMode && form ? (\r\n          <EquipmentForm\r\n            initialValues={form}\r\n            mode=\"edit\"\r\n            onCancel={() => setEditMode(false)}\r\n            onSubmit={(values) => {\r\n              if (onEdit) onEdit(values);\r\n              setEditMode(false);\r\n            }}\r\n          />\r\n        ) : (\r\n          <div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Type :</b> {equipment.type}</div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Modèle :</b> {equipment.model}</div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Numéro de série :</b> {equipment.serialNumber}</div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Statut :</b> {equipment.status}</div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Localisation :</b> {equipment.location}</div>\r\n            \r\n            <div className=\"mb-2 text-gray-700\"><b>Opérateur :</b> {equipment.operator}</div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Dernière maintenance :</b> {equipment.lastMaintenance}</div>\r\n            <div className=\"mb-2 text-gray-700\"><b>Prochaine maintenance :</b> {equipment.nextMaintenance}</div>\r\n            {equipment.coordinates && (\r\n              <div className=\"mb-2 text-gray-700\"><b>Coordonnées :</b> {equipment.coordinates.lat}, {equipment.coordinates.lng}</div>\r\n            )}\r\n            {equipment.assignedProject && (\r\n              <div className=\"mb-2 text-gray-700\"><b>Projet assigné :</b> {equipment.assignedProject}</div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Section Historique des maintenances */}\r\n        <div className=\"mt-6\">\r\n          <h3 className=\"text-lg font-bold mb-2\">Historique des maintenances</h3>\r\n          <MaintenanceHistorySection\r\n            equipment={equipment}\r\n            onUpdate={onUpdateMaintenance}\r\n          />\r\n        </div>\r\n\r\n        {confirmDelete && (\r\n          <div className=\"fixed inset-0 z-60 flex items-center justify-center bg-black bg-opacity-40\">\r\n            <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-xs\">\r\n              <div className=\"mb-4 text-center text-gray-700\">Confirmer la suppression de <b>{equipment.name}</b> ?</div>\r\n              <div className=\"flex gap-3 justify-center\">\r\n                <button className=\"px-4 py-2 bg-gray-100 rounded\" onClick={() => setConfirmDelete(false)}>Annuler</button>\r\n                <button className=\"px-4 py-2 bg-red-600 text-white rounded\" onClick={() => onDelete && onDelete(equipment)}>Supprimer</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EquipmentDetailModal;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\EquipmentForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\MaintenanceHistorySection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":35,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":35,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":45,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":45,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport type { Equipment, MaintenanceEvent } from '../../contexts/projectTypes';\r\nimport { Plus, Trash2 } from 'lucide-react';\r\n\r\ninterface MaintenanceHistorySectionProps {\r\n  equipment: Equipment | null;\r\n  onUpdate?: (equipment: Equipment) => void;\r\n}\r\n\r\nconst emptyEvent: Omit<MaintenanceEvent, 'id'> = {\r\n  date: '',\r\n  type: '',\r\n  description: '',\r\n  operator: '',\r\n};\r\n\r\nexport const MaintenanceHistorySection: React.FC<MaintenanceHistorySectionProps> = ({ equipment, onUpdate }) => {\r\n  const [adding, setAdding] = useState(false);\r\n  const [newEvent, setNewEvent] = useState(emptyEvent);\r\n\r\n  if (!equipment) return null;\r\n  const history = equipment.maintenanceHistory || [];\r\n\r\n  const handleAdd = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newEvent.date || !newEvent.type || !newEvent.description) return;\r\n    const event: MaintenanceEvent = {\r\n      ...newEvent,\r\n      id: Date.now().toString(),\r\n    };\r\n    const updated = {\r\n      ...equipment,\r\n      maintenanceHistory: [...history, event],\r\n    };\r\n    onUpdate && onUpdate(updated);\r\n    setNewEvent(emptyEvent);\r\n    setAdding(false);\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    const updated = {\r\n      ...equipment,\r\n      maintenanceHistory: history.filter(ev => ev.id !== id),\r\n    };\r\n    onUpdate && onUpdate(updated);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"mb-2\">\r\n        {history.length === 0 && <li className=\"text-gray-500\">Aucune maintenance enregistrée.</li>}\r\n        {history.map(ev => (\r\n          <li key={ev.id} className=\"flex items-center justify-between border-b py-1 text-sm\">\r\n            <span>\r\n              <span className=\"font-medium\">{ev.date}</span> – <span>{ev.type}</span> : {ev.description} {ev.operator && (<span className=\"text-gray-500\">({ev.operator})</span>)}\r\n            </span>\r\n            <button onClick={() => handleDelete(ev.id)} className=\"ml-2 text-red-500 hover:text-red-700\"><Trash2 size={16} /></button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {adding ? (\r\n        <form onSubmit={handleAdd} className=\"flex flex-col gap-2 mb-2\">\r\n          <input className=\"border rounded px-2 py-1\" type=\"date\" value={newEvent.date} onChange={e => setNewEvent({ ...newEvent, date: e.target.value })} required />\r\n          <input className=\"border rounded px-2 py-1\" placeholder=\"Type (révision, réparation...)\" value={newEvent.type} onChange={e => setNewEvent({ ...newEvent, type: e.target.value })} required />\r\n          <input className=\"border rounded px-2 py-1\" placeholder=\"Description\" value={newEvent.description} onChange={e => setNewEvent({ ...newEvent, description: e.target.value })} required />\r\n          <input className=\"border rounded px-2 py-1\" placeholder=\"Opérateur\" value={newEvent.operator} onChange={e => setNewEvent({ ...newEvent, operator: e.target.value })} />\r\n          <div className=\"flex gap-2\">\r\n            <button className=\"bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700\" type=\"submit\">Ajouter</button>\r\n            <button className=\"bg-gray-200 px-2 py-1 rounded\" type=\"button\" onClick={() => setAdding(false)}>Annuler</button>\r\n          </div>\r\n        </form>\r\n      ) : (\r\n        <button className=\"flex items-center gap-1 text-blue-700 hover:underline\" onClick={() => setAdding(true)}>\r\n          <Plus size={16} /> Ajouter une maintenance\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceHistorySection;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\MaintenancePlanningModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Equipment\\QRScanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'isScanning' and 'startCamera'. Either include them or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, isScanning, startCamera]","fix":{"range":[2730,2738],"text":"[isOpen, isScanning, startCamera]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5899,5902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5899,5902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Camera, \n  Scan, \n  X, \n  Flashlight, \n  FlashlightOff, \n  RotateCcw,\n  CheckCircle,\n  AlertCircle,\n  Package,\n  MapPin,\n  Calendar,\n  User\n} from 'lucide-react';\nimport { useTheme } from '../../contexts/ThemeContext';\n\ninterface Equipment {\n  id: string;\n  name: string;\n  type: string;\n  serialNumber: string;\n  status: 'available' | 'in-use' | 'maintenance' | 'damaged';\n  location: string;\n  assignedTo?: string;\n  lastMaintenance?: Date;\n  nextMaintenance?: Date;\n  qrCode: string;\n  barcode?: string;\n}\n\ninterface QRScannerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onScanSuccess: (equipment: Equipment) => void;\n  onScanError?: (error: string) => void;\n}\n\n// Simulation d'équipements pour la démo\nconst mockEquipments: Equipment[] = [\n  {\n    id: 'eq-001',\n    name: 'Pelleteuse CAT 320',\n    type: 'Engin de chantier',\n    serialNumber: 'CAT320-2024-001',\n    status: 'available',\n    location: 'Chantier Dakar Nord',\n    qrCode: 'QR001',\n    barcode: '1234567890123',\n    lastMaintenance: new Date('2024-07-01'),\n    nextMaintenance: new Date('2024-08-15'),\n  },\n  {\n    id: 'eq-002',\n    name: 'Grue mobile 50T',\n    type: 'Engin de levage',\n    serialNumber: 'GROVE-RT550-002',\n    status: 'in-use',\n    location: 'Chantier Almadies',\n    assignedTo: 'Mamadou Diallo',\n    qrCode: 'QR002',\n    barcode: '2345678901234',\n    lastMaintenance: new Date('2024-06-15'),\n    nextMaintenance: new Date('2024-09-01'),\n  },\n  {\n    id: 'eq-003',\n    name: 'Bétonnière 500L',\n    type: 'Équipement de construction',\n    serialNumber: 'BET500-2024-003',\n    status: 'maintenance',\n    location: 'Atelier central',\n    qrCode: 'QR003',\n    barcode: '3456789012345',\n    lastMaintenance: new Date('2024-07-20'),\n    nextMaintenance: new Date('2024-08-20'),\n  },\n];\n\nconst QRScanner: React.FC<QRScannerProps> = ({\n  isOpen,\n  onClose,\n  onScanSuccess,\n  onScanError,\n}) => {\n  const { resolvedTheme } = useTheme();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [hasCamera, setHasCamera] = useState(false);\n  const [flashlightOn, setFlashlightOn] = useState(false);\n  const [scanResult, setScanResult] = useState<Equipment | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [manualInput, setManualInput] = useState('');\n  const [showManualInput, setShowManualInput] = useState(false);\n\n  // Initialiser la caméra\n  useEffect(() => {\n    if (isOpen && !isScanning) {\n      startCamera();\n    }\n    return () => {\n      stopCamera();\n    };\n  }, [isOpen]);\n\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { \n          facingMode: 'environment', // Caméra arrière\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        setHasCamera(true);\n        setIsScanning(true);\n        setError(null);\n        \n        // Démarrer la détection de QR codes\n        startQRDetection();\n      }\n    } catch (err) {\n      console.error('Erreur d\\'accès à la caméra:', err);\n      setError('Impossible d\\'accéder à la caméra. Vérifiez les permissions.');\n      setHasCamera(false);\n    }\n  };\n\n  const stopCamera = () => {\n    if (videoRef.current?.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsScanning(false);\n    setHasCamera(false);\n  };\n\n  const startQRDetection = () => {\n    const detectQR = () => {\n      if (!videoRef.current || !canvasRef.current || !isScanning) return;\n\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      if (!ctx || video.videoWidth === 0) {\n        requestAnimationFrame(detectQR);\n        return;\n      }\n\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      ctx.drawImage(video, 0, 0);\n\n      // Simulation de détection QR (en production, utiliser une lib comme jsQR)\n      // Pour la démo, on simule une détection aléatoire\n      if (Math.random() < 0.01) { // 1% de chance par frame\n        const randomEquipment = mockEquipments[Math.floor(Math.random() * mockEquipments.length)];\n        handleScanSuccess(randomEquipment);\n        return;\n      }\n\n      if (isScanning) {\n        requestAnimationFrame(detectQR);\n      }\n    };\n\n    requestAnimationFrame(detectQR);\n  };\n\n  const handleScanSuccess = (equipment: Equipment) => {\n    setScanResult(equipment);\n    setIsScanning(false);\n    \n    // Vibration si supportée\n    if (navigator.vibrate) {\n      navigator.vibrate(200);\n    }\n    \n    // Appeler le callback après un délai pour montrer le résultat\n    setTimeout(() => {\n      onScanSuccess(equipment);\n      onClose();\n    }, 2000);\n  };\n\n  const handleManualInput = () => {\n    if (!manualInput.trim()) return;\n    \n    // Chercher l'équipement par QR code ou code-barres\n    const equipment = mockEquipments.find(eq => \n      eq.qrCode === manualInput || eq.barcode === manualInput\n    );\n    \n    if (equipment) {\n      handleScanSuccess(equipment);\n    } else {\n      setError('Code non reconnu. Vérifiez le code saisi.');\n      onScanError?.('Code non reconnu');\n    }\n  };\n\n  const toggleFlashlight = async () => {\n    try {\n      const stream = videoRef.current?.srcObject as MediaStream;\n      const track = stream?.getVideoTracks()[0];\n      \n      if (track && 'torch' in track.getCapabilities()) {\n        await track.applyConstraints({\n          advanced: [{ torch: !flashlightOn } as any]\n        });\n        setFlashlightOn(!flashlightOn);\n      }\n    } catch (err) {\n      console.error('Erreur flash:', err);\n    }\n  };\n\n  const getStatusColor = (status: Equipment['status']) => {\n    switch (status) {\n      case 'available': return 'text-green-500';\n      case 'in-use': return 'text-blue-500';\n      case 'maintenance': return 'text-yellow-500';\n      case 'damaged': return 'text-red-500';\n      default: return 'text-gray-500';\n    }\n  };\n\n  const getStatusLabel = (status: Equipment['status']) => {\n    switch (status) {\n      case 'available': return 'Disponible';\n      case 'in-use': return 'En cours d\\'utilisation';\n      case 'maintenance': return 'En maintenance';\n      case 'damaged': return 'Endommagé';\n      default: return 'Inconnu';\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        className=\"fixed inset-0 bg-black/90 flex items-center justify-center z-50\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <motion.div\n          className={`\n            relative w-full max-w-md mx-4 rounded-2xl overflow-hidden\n            ${resolvedTheme === 'dark'\n              ? 'bg-gray-900 border border-gray-700'\n              : 'bg-white border border-gray-200'\n            }\n          `}\n          initial={{ scale: 0.9, y: 20 }}\n          animate={{ scale: 1, y: 0 }}\n          exit={{ scale: 0.9, y: 20 }}\n        >\n          {/* Header */}\n          <div className={`\n            flex items-center justify-between p-4 border-b\n            ${resolvedTheme === 'dark' ? 'border-gray-700' : 'border-gray-200'}\n          `}>\n            <div className=\"flex items-center gap-2\">\n              <Scan className=\"w-5 h-5 text-blue-500\" />\n              <h2 className=\"font-semibold\">Scanner Équipement</h2>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          {/* Contenu principal */}\n          <div className=\"p-4\">\n            {/* Résultat du scan */}\n            {scanResult ? (\n              <motion.div\n                className=\"text-center space-y-4\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n              >\n                <div className=\"flex justify-center\">\n                  <CheckCircle className=\"w-16 h-16 text-green-500\" />\n                </div>\n                \n                <div>\n                  <h3 className=\"text-lg font-semibold text-green-600\">\n                    Équipement détecté !\n                  </h3>\n                  <p className=\"text-sm opacity-70\">\n                    Redirection en cours...\n                  </p>\n                </div>\n\n                <div className={`\n                  p-4 rounded-lg border text-left\n                  ${resolvedTheme === 'dark'\n                    ? 'bg-gray-800 border-gray-700'\n                    : 'bg-gray-50 border-gray-200'\n                  }\n                `}>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Package className=\"w-4 h-4\" />\n                    <span className=\"font-medium\">{scanResult.name}</span>\n                  </div>\n                  \n                  <div className=\"space-y-1 text-sm opacity-70\">\n                    <div className=\"flex items-center gap-2\">\n                      <span>Statut:</span>\n                      <span className={getStatusColor(scanResult.status)}>\n                        {getStatusLabel(scanResult.status)}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"w-3 h-3\" />\n                      <span>{scanResult.location}</span>\n                    </div>\n                    {scanResult.assignedTo && (\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"w-3 h-3\" />\n                        <span>Assigné à: {scanResult.assignedTo}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n            ) : (\n              <>\n                {/* Zone de scan */}\n                <div className=\"relative mb-4\">\n                  {hasCamera && !error ? (\n                    <div className=\"relative\">\n                      <video\n                        ref={videoRef}\n                        className=\"w-full h-64 object-cover rounded-lg bg-black\"\n                        playsInline\n                        muted\n                      />\n                      <canvas ref={canvasRef} className=\"hidden\" />\n                      \n                      {/* Overlay de scan */}\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <motion.div\n                          className=\"w-48 h-48 border-2 border-white rounded-lg\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 0 0 rgba(59, 130, 246, 0.7)',\n                              '0 0 0 10px rgba(59, 130, 246, 0)',\n                            ],\n                          }}\n                          transition={{\n                            duration: 1.5,\n                            repeat: Infinity,\n                            ease: 'easeOut',\n                          }}\n                        >\n                          <div className=\"absolute top-0 left-0 w-6 h-6 border-t-4 border-l-4 border-blue-500 rounded-tl-lg\" />\n                          <div className=\"absolute top-0 right-0 w-6 h-6 border-t-4 border-r-4 border-blue-500 rounded-tr-lg\" />\n                          <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-4 border-l-4 border-blue-500 rounded-bl-lg\" />\n                          <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-4 border-r-4 border-blue-500 rounded-br-lg\" />\n                        </motion.div>\n                      </div>\n\n                      {/* Instructions */}\n                      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white text-center\">\n                        <p className=\"text-sm bg-black/50 px-3 py-1 rounded-full\">\n                          Pointez vers un QR code ou code-barres\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className={`\n                      w-full h-64 rounded-lg border-2 border-dashed flex flex-col items-center justify-center\n                      ${resolvedTheme === 'dark'\n                        ? 'border-gray-600 bg-gray-800'\n                        : 'border-gray-300 bg-gray-50'\n                      }\n                    `}>\n                      <Camera className=\"w-12 h-12 text-gray-400 mb-2\" />\n                      <p className=\"text-sm text-gray-500 text-center\">\n                        {error || 'Caméra non disponible'}\n                      </p>\n                      <button\n                        onClick={startCamera}\n                        className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n                      >\n                        <RotateCcw className=\"w-4 h-4 inline mr-2\" />\n                        Réessayer\n                      </button>\n                    </div>\n                  )}\n                </div>\n\n                {/* Contrôles */}\n                {hasCamera && (\n                  <div className=\"flex justify-center gap-4 mb-4\">\n                    <button\n                      onClick={toggleFlashlight}\n                      className={`\n                        p-3 rounded-full transition-colors\n                        ${flashlightOn\n                          ? 'bg-yellow-500 text-white'\n                          : resolvedTheme === 'dark'\n                            ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n                            : 'bg-gray-200 text-gray-600 hover:bg-gray-300'\n                        }\n                      `}\n                    >\n                      {flashlightOn ? (\n                        <Flashlight className=\"w-5 h-5\" />\n                      ) : (\n                        <FlashlightOff className=\"w-5 h-5\" />\n                      )}\n                    </button>\n                  </div>\n                )}\n\n                {/* Saisie manuelle */}\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={() => setShowManualInput(!showManualInput)}\n                    className=\"w-full text-sm text-blue-500 hover:text-blue-600 transition-colors\"\n                  >\n                    {showManualInput ? 'Masquer' : 'Saisir'} le code manuellement\n                  </button>\n\n                  {showManualInput && (\n                    <motion.div\n                      initial={{ opacity: 0, height: 0 }}\n                      animate={{ opacity: 1, height: 'auto' }}\n                      exit={{ opacity: 0, height: 0 }}\n                      className=\"space-y-3\"\n                    >\n                      <input\n                        type=\"text\"\n                        value={manualInput}\n                        onChange={(e) => setManualInput(e.target.value)}\n                        placeholder=\"QR code ou code-barres\"\n                        className={`\n                          w-full px-3 py-2 rounded-lg border\n                          ${resolvedTheme === 'dark'\n                            ? 'bg-gray-800 border-gray-600 text-white'\n                            : 'bg-white border-gray-300 text-gray-900'\n                          }\n                        `}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') {\n                            handleManualInput();\n                          }\n                        }}\n                      />\n                      <button\n                        onClick={handleManualInput}\n                        disabled={!manualInput.trim()}\n                        className=\"w-full py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                      >\n                        Rechercher\n                      </button>\n                    </motion.div>\n                  )}\n                </div>\n\n                {/* Codes d'exemple pour la démo */}\n                <div className={`\n                  mt-4 p-3 rounded-lg text-xs\n                  ${resolvedTheme === 'dark'\n                    ? 'bg-gray-800 border border-gray-700'\n                    : 'bg-gray-50 border border-gray-200'\n                  }\n                `}>\n                  <p className=\"font-medium mb-2\">🎯 Codes de test :</p>\n                  <div className=\"space-y-1 opacity-70\">\n                    <p>• QR001 - Pelleteuse CAT 320</p>\n                    <p>• QR002 - Grue mobile 50T</p>\n                    <p>• QR003 - Bétonnière 500L</p>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Erreur */}\n            {error && !scanResult && (\n              <motion.div\n                className=\"flex items-center gap-2 p-3 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg mt-4\"\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n              >\n                <AlertCircle className=\"w-4 h-4\" />\n                <span className=\"text-sm\">{error}</span>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default QRScanner;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Finances\\Finances.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Finances\\FinancesAdvanced.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4550,4553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4550,4553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Finances\\TransactionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Finances\\TransactionTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Financial\\FinancialDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Geolocation\\TeamTrackingMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\GlobalLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\HeaderUpdated.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\ModernFooter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MapPin' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport {\n  Zap,\n  Mail,\n  Phone,\n  MapPin,\n  Facebook,\n  Twitter,\n  Linkedin,\n  Instagram,\n  Youtube,\n  ArrowRight,\n  Heart,\n  Globe,\n  Shield,\n  Smartphone,\n  Users,\n  BarChart3,\n  Calendar,\n  FileText,\n  CreditCard\n} from 'lucide-react';\n\nconst ModernFooter: React.FC = () => {\n  const footerSections = [\n    {\n      title: 'Produit',\n      links: [\n        { name: 'Fonctionnalités', href: '/features', icon: BarChart3 },\n        { name: 'Tarification', href: '/pricing', icon: CreditCard },\n        { name: 'Mobile Money', href: '/features/payments', icon: Smartphone },\n        { name: 'Sécurité', href: '/security', icon: Shield },\n      ]\n    },\n    {\n      title: 'Solutions',\n      links: [\n        { name: 'PME & Startups', href: '/solutions/sme', icon: Users },\n        { name: 'Grandes Entreprises', href: '/solutions/enterprise', icon: BarChart3 },\n        { name: 'Afrique Francophone', href: '/solutions/francophone', icon: Globe },\n        { name: 'Intégrations', href: '/integrations', icon: Calendar },\n      ]\n    },\n    {\n      title: 'Ressources',\n      links: [\n        { name: 'Documentation', href: '/docs', icon: FileText },\n        { name: 'API', href: '/api', icon: BarChart3 },\n        { name: 'Support', href: '/support', icon: Users },\n        { name: 'Blog', href: '/blog', icon: FileText },\n      ]\n    },\n    {\n      title: 'Entreprise',\n      links: [\n        { name: 'À propos', href: '/about', icon: Users },\n        { name: 'Carrières', href: '/careers', icon: Heart },\n        { name: 'Contact', href: '/contact', icon: Mail },\n        { name: 'Partenaires', href: '/partners', icon: Globe },\n      ]\n    }\n  ];\n\n  const socialLinks = [\n    { name: 'Facebook', href: '#', icon: Facebook, color: 'hover:text-blue-600' },\n    { name: 'Twitter', href: '#', icon: Twitter, color: 'hover:text-sky-500' },\n    { name: 'LinkedIn', href: '#', icon: Linkedin, color: 'hover:text-blue-700' },\n    { name: 'Instagram', href: '#', icon: Instagram, color: 'hover:text-pink-600' },\n    { name: 'YouTube', href: '#', icon: Youtube, color: 'hover:text-red-600' },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.6, ease: \"easeOut\" }\n    }\n  };\n\n  const linkHoverVariants = {\n    hover: {\n      x: 5,\n      color: \"#3B82F6\",\n      transition: { duration: 0.2 }\n    }\n  };\n\n  return (\n    <footer className=\"bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 text-white relative overflow-hidden\">\n      {/* Animations de fond */}\n      <div className=\"absolute inset-0\">\n        <motion.div\n          animate={{\n            scale: [1, 1.2, 1],\n            rotate: [0, 180, 360],\n          }}\n          transition={{\n            duration: 30,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n          className=\"absolute -top-20 -right-20 w-96 h-96 bg-blue-500/5 rounded-full blur-3xl\"\n        />\n        <motion.div\n          animate={{\n            scale: [1.2, 1, 1.2],\n            rotate: [360, 180, 0],\n          }}\n          transition={{\n            duration: 25,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n          className=\"absolute -bottom-20 -left-20 w-80 h-80 bg-purple-500/5 rounded-full blur-3xl\"\n        />\n      </div>\n\n      <div className=\"relative\">\n        {/* Section principale */}\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true, margin: \"-100px\" }}\n          className=\"container mx-auto px-6 py-16\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-6 gap-12\">\n            {/* Logo et description */}\n            <motion.div variants={itemVariants} className=\"lg:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center\"\n                >\n                  <Zap className=\"w-7 h-7 text-white\" />\n                </motion.div>\n                <div>\n                  <h3 className=\"text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                    IntuitionConcept\n                  </h3>\n                  <p className=\"text-sm text-gray-400\">SaaS pour l'Afrique</p>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-300 leading-relaxed mb-6\">\n                La plateforme de gestion de projets conçue spécialement pour l'Afrique francophone. \n                Gérez vos projets, équipes et paiements Mobile Money en toute simplicité.\n              </p>\n\n              {/* Statistiques animées */}\n              <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                {[\n                  { number: '10K+', label: 'Utilisateurs' },\n                  { number: '25+', label: 'Pays' },\n                  { number: '99.9%', label: 'Uptime' }\n                ].map((stat, index) => (\n                  <motion.div\n                    key={stat.label}\n                    initial={{ opacity: 0, scale: 0.5 }}\n                    whileInView={{ opacity: 1, scale: 1 }}\n                    transition={{ delay: index * 0.2, duration: 0.6 }}\n                    className=\"text-center\"\n                  >\n                    <motion.div\n                      animate={{ scale: [1, 1.1, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: index * 0.5 }}\n                      className=\"text-2xl font-bold text-blue-400\"\n                    >\n                      {stat.number}\n                    </motion.div>\n                    <div className=\"text-xs text-gray-400\">{stat.label}</div>\n                  </motion.div>\n                ))}\n              </div>\n\n              {/* Réseaux sociaux */}\n              <div className=\"flex space-x-4\">\n                {socialLinks.map((social, index) => (\n                  <motion.a\n                    key={social.name}\n                    href={social.href}\n                    initial={{ opacity: 0, scale: 0 }}\n                    whileInView={{ opacity: 1, scale: 1 }}\n                    transition={{ delay: index * 0.1, duration: 0.4 }}\n                    whileHover={{ scale: 1.2, rotate: 5 }}\n                    className={`w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center text-gray-400 ${social.color} transition-all duration-300 backdrop-blur-sm`}\n                  >\n                    <social.icon className=\"w-5 h-5\" />\n                  </motion.a>\n                ))}\n              </div>\n            </motion.div>\n\n            {/* Liens de navigation */}\n            {footerSections.map((section, sectionIndex) => (\n              <motion.div\n                key={section.title}\n                variants={itemVariants}\n                className=\"lg:col-span-1\"\n              >\n                <h4 className=\"text-lg font-semibold mb-6 text-white\">\n                  {section.title}\n                </h4>\n                <ul className=\"space-y-3\">\n                  {section.links.map((link, linkIndex) => (\n                    <motion.li\n                      key={link.name}\n                      initial={{ opacity: 0, x: -20 }}\n                      whileInView={{ opacity: 1, x: 0 }}\n                      transition={{ delay: (sectionIndex * 0.1) + (linkIndex * 0.05), duration: 0.4 }}\n                    >\n                      <motion.div\n                        variants={linkHoverVariants}\n                        whileHover=\"hover\"\n                      >\n                        <Link\n                          to={link.href}\n                          className=\"flex items-center space-x-2 text-gray-300 hover:text-blue-400 transition-colors group\"\n                        >\n                          <link.icon className=\"w-4 h-4 group-hover:scale-110 transition-transform\" />\n                          <span>{link.name}</span>\n                          <ArrowRight className=\"w-3 h-3 opacity-0 group-hover:opacity-100 group-hover:translate-x-1 transition-all\" />\n                        </Link>\n                      </motion.div>\n                    </motion.li>\n                  ))}\n                </ul>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Newsletter */}\n          <motion.div\n            variants={itemVariants}\n            className=\"mt-16 p-8 bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10\"\n          >\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n              <div>\n                <h4 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                  Restez informé\n                </h4>\n                <p className=\"text-gray-300\">\n                  Recevez les dernières nouvelles sur nos fonctionnalités et l'écosystème SaaS africain.\n                </p>\n              </div>\n              <div className=\"flex space-x-3\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Votre adresse email\"\n                  className=\"flex-1 px-4 py-3 bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl font-semibold hover:shadow-lg transition-all duration-300 flex items-center space-x-2\"\n                >\n                  <span>S'abonner</span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </motion.button>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        {/* Barre de copyright */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.8 }}\n          className=\"border-t border-white/10 py-8\"\n        >\n          <div className=\"container mx-auto px-6\">\n            <div className=\"flex flex-col lg:flex-row justify-between items-center space-y-4 lg:space-y-0\">\n              <div className=\"flex items-center space-x-2 text-gray-400\">\n                <span>© 2024 IntuitionConcept. Fait avec</span>\n                <motion.div\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                >\n                  <Heart className=\"w-4 h-4 text-red-500 fill-current\" />\n                </motion.div>\n                <span>pour l'Afrique francophone.</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-6 text-sm text-gray-400\">\n                <Link to=\"/privacy\" className=\"hover:text-blue-400 transition-colors\">\n                  Confidentialité\n                </Link>\n                <Link to=\"/terms\" className=\"hover:text-blue-400 transition-colors\">\n                  Conditions\n                </Link>\n                <Link to=\"/cookies\" className=\"hover:text-blue-400 transition-colors\">\n                  Cookies\n                </Link>\n                <div className=\"flex items-center space-x-2\">\n                  <Globe className=\"w-4 h-4\" />\n                  <span>Français</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </footer>\n  );\n};\n\nexport default ModernFooter;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\ModernHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Layout\\Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentProject' is assigned a value but never used.","line":198,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Truck, \n  Euro, \n  FileText, \n  BarChart3, \n  Users,\n  Calendar,\n  MapPin,\n  ChevronLeft,\n  PieChart,\n  HardHat,\n  Hammer,\n  Building,\n  Wrench,\n  Clock,\n  Target,\n  ShoppingCart\n} from 'lucide-react';\n\ninterface SidebarProps {\n  activeSection: string;\n  onNavigate: (section: string, id?: string) => void;\n  collapsed: boolean;\n  onCollapse: (collapsed: boolean) => void;\n  onCreateProject: () => void;\n  currentProjectId: string | null;\n  projects: Array<{ id: string; name: string }>;\n  onProjectSelect: (projectId: string | null) => void;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({ \n  activeSection, \n  onNavigate, \n  collapsed, \n  onCollapse,\n  onCreateProject,\n  currentProjectId,\n  projects,\n  onProjectSelect\n}) => {\n  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n  \n  // Données simulées pour les mini-aperçus\n  const getProjectStats = (projectId: string | null) => {\n    if (!projectId) return null;\n    return {\n      progress: Math.floor(Math.random() * 100),\n      activeTasks: Math.floor(Math.random() * 20) + 1,\n      budget: Math.floor(Math.random() * 5000000) + 1000000,\n      team: Math.floor(Math.random() * 15) + 5\n    };\n  };\n\n  const menuItems = [\n    { \n      id: 'dashboard', \n      label: 'Tableau de Bord', \n      icon: HardHat, \n      color: 'text-orange-500',\n      bgColor: 'bg-orange-500/10',\n      hoverColor: 'hover:bg-orange-500/20',\n      description: 'Vue d\\'ensemble du projet'\n    },\n    { \n      id: 'projects', \n      label: 'Projets', \n      icon: Building, \n      color: 'text-blue-500',\n      bgColor: 'bg-blue-500/10',\n      hoverColor: 'hover:bg-blue-500/20',\n      description: 'Gestion des projets'\n    },\n    { \n      id: 'project-budget', \n      label: 'Budget Projet', \n      icon: Euro, \n      disabled: !currentProjectId,\n      color: 'text-green-500',\n      bgColor: 'bg-green-500/10',\n      hoverColor: 'hover:bg-green-500/20',\n      description: 'Suivi budgétaire',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'equipment', \n      label: 'Équipements', \n      icon: Truck, \n      disabled: !currentProjectId,\n      color: 'text-yellow-500',\n      bgColor: 'bg-yellow-500/10',\n      hoverColor: 'hover:bg-yellow-500/20',\n      description: 'Matériel de chantier',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'tasks', \n      label: 'Tâches', \n      icon: Hammer, \n      disabled: !currentProjectId,\n      color: 'text-purple-500',\n      bgColor: 'bg-purple-500/10',\n      hoverColor: 'hover:bg-purple-500/20',\n      description: 'Gestion des tâches',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'planning', \n      label: 'Planning', \n      icon: Calendar, \n      disabled: !currentProjectId,\n      color: 'text-indigo-500',\n      bgColor: 'bg-indigo-500/10',\n      hoverColor: 'hover:bg-indigo-500/20',\n      description: 'Planification projet',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'finances', \n      label: 'Finances', \n      icon: PieChart, \n      disabled: !currentProjectId,\n      color: 'text-emerald-500',\n      bgColor: 'bg-emerald-500/10',\n      hoverColor: 'hover:bg-emerald-500/20',\n      description: 'Analyse financière',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'documents', \n      label: 'Documents', \n      icon: FileText, \n      disabled: !currentProjectId,\n      color: 'text-cyan-500',\n      bgColor: 'bg-cyan-500/10',\n      hoverColor: 'hover:bg-cyan-500/20',\n      description: 'Documentation projet',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'quotes', \n      label: 'Devis', \n      icon: Euro, \n      color: 'text-green-500',\n      bgColor: 'bg-green-500/10',\n      hoverColor: 'hover:bg-green-500/20',\n      description: 'Création et gestion des devis'\n    },\n    { \n      id: 'reports', \n      label: 'Rapports', \n      icon: BarChart3, \n      color: 'text-pink-500',\n      bgColor: 'bg-pink-500/10',\n      hoverColor: 'hover:bg-pink-500/20',\n      description: 'Rapports et analyses'\n    },\n    { \n      id: 'team', \n      label: 'Équipe', \n      icon: Users, \n      color: 'text-violet-500',\n      bgColor: 'bg-violet-500/10',\n      hoverColor: 'hover:bg-violet-500/20',\n      description: 'Gestion de l\\'équipe'\n    },\n    { \n      id: 'purchase-orders', \n      label: 'Bons d\\'Achat', \n      icon: ShoppingCart, \n      disabled: !currentProjectId,\n      color: 'text-orange-500',\n      bgColor: 'bg-orange-500/10',\n      hoverColor: 'hover:bg-orange-500/20',\n      description: 'Gestion des commandes et livraisons',\n      status: currentProjectId ? 'active' : 'disabled'\n    },\n    { \n      id: 'locations', \n      label: 'Localisation', \n      icon: MapPin, \n      color: 'text-red-500',\n      bgColor: 'bg-red-500/10',\n      hoverColor: 'hover:bg-red-500/20',\n      description: 'Géolocalisation'\n    },\n    { \n      id: 'settings', \n      label: 'Paramètres', \n      icon: Wrench, \n      color: 'text-gray-500',\n      bgColor: 'bg-gray-500/10',\n      hoverColor: 'hover:bg-gray-500/20',\n      description: 'Configuration'\n    }\n  ];\n\n  const currentProject = projects.find(p => p.id === currentProjectId);\n  const projectStats = getProjectStats(currentProjectId);\n\n  return (\n    <div className={`bg-gradient-to-b from-slate-900 to-slate-800 text-white transition-all duration-300 flex-shrink-0 shadow-2xl ${\n      collapsed ? 'w-16' : 'w-72'\n    }`}>\n      {/* Header avec logo et toggle */}\n      <div className=\"p-4 border-b border-slate-700/50 flex justify-between items-center bg-slate-800/50\">\n        {!collapsed && (\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-white\">BTP Manager</div>\n              <div className=\"text-xs text-slate-400\">Construction Pro</div>\n            </div>\n          </div>\n        )}\n        <button\n          onClick={() => onCollapse(!collapsed)}\n          className=\"p-2 rounded-lg hover:bg-slate-700/50 transition-all duration-200 group\"\n          title={collapsed ? 'Agrandir' : 'Réduire'}\n        >\n          <ChevronLeft className={`h-4 w-4 transition-transform duration-200 group-hover:scale-110 ${\n            !collapsed ? 'rotate-180' : ''\n          }`} />\n        </button>\n      </div>\n      \n      {/* Sélecteur de projet avec stats */}\n      {!collapsed && (\n        <div className=\"p-4 border-b border-slate-700/50 bg-slate-800/30\">\n          <div className=\"mb-3\">\n            <label className=\"text-xs font-medium text-slate-400 uppercase tracking-wide mb-2 block\">\n              Projet Actuel\n            </label>\n            <select\n              value={currentProjectId || ''}\n              onChange={(e) => onProjectSelect(e.target.value || null)}\n              className=\"w-full bg-slate-700/50 text-white rounded-lg p-3 text-sm border border-slate-600/50 focus:border-orange-500 focus:ring-1 focus:ring-orange-500 transition-all\"\n            >\n              <option value=\"\">Sélectionner un projet</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Mini stats du projet */}\n          {currentProjectId && projectStats && (\n            <div className=\"bg-slate-700/30 rounded-lg p-3 mb-3\">\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div className=\"flex items-center space-x-2\">\n                  <Target className=\"w-3 h-3 text-orange-400\" />\n                  <span className=\"text-slate-300\">{projectStats.progress}%</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-3 h-3 text-blue-400\" />\n                  <span className=\"text-slate-300\">{projectStats.activeTasks}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Euro className=\"w-3 h-3 text-green-400\" />\n                  <span className=\"text-slate-300\">{(projectStats.budget / 1000000).toFixed(1)}M</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-3 h-3 text-purple-400\" />\n                  <span className=\"text-slate-300\">{projectStats.team}</span>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <button\n            onClick={onCreateProject}\n            className=\"w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white py-2.5 px-4 rounded-lg text-sm font-medium transition-all duration-200 transform hover:scale-105 hover:shadow-lg flex items-center justify-center space-x-2\"\n          >\n            <Building className=\"w-4 h-4\" />\n            <span>Nouveau Projet</span>\n          </button>\n        </div>\n      )}\n      \n      {/* Navigation avec icônes colorées */}\n      <nav className=\"p-3 overflow-y-auto flex-1\">\n        <ul className=\"space-y-1\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeSection === item.id;\n            \n            return (\n              <li key={item.id}>\n                <button\n                  onClick={() => !item.disabled && onNavigate(item.id)}\n                  disabled={item.disabled}\n                  onMouseEnter={() => setHoveredItem(item.id)}\n                  onMouseLeave={() => setHoveredItem(null)}\n                  className={`group relative flex items-center w-full p-3 rounded-xl transition-all duration-200 ${\n                    isActive \n                      ? `bg-gradient-to-r from-orange-500/20 to-orange-600/20 border border-orange-500/30 text-white shadow-lg` \n                      : item.disabled\n                      ? 'text-slate-500 cursor-not-allowed'\n                      : `text-slate-300 hover:text-white ${item.hoverColor} hover:shadow-md hover:transform hover:scale-105`\n                  }`}\n                  title={collapsed ? item.label : item.disabled ? 'Sélectionnez d\\'abord un projet' : item.description}\n                >\n                  {/* Indicateur de statut */}\n                  {!collapsed && item.status && (\n                    <div className={`absolute -left-1 top-1/2 transform -translate-y-1/2 w-1 h-6 rounded-full ${\n                      item.status === 'active' ? 'bg-green-500' : 'bg-gray-500'\n                    }`}></div>\n                  )}\n                  \n                  {/* Icône avec couleur */}\n                  <div className={`flex-shrink-0 p-2 rounded-lg ${\n                    isActive ? 'bg-orange-500/30' : item.disabled ? 'bg-slate-700/30' : item.bgColor\n                  }`}>\n                    <Icon className={`w-4 h-4 ${\n                      isActive ? 'text-orange-300' : item.disabled ? 'text-slate-500' : item.color\n                    }`} />\n                  </div>\n                  \n                  {!collapsed && (\n                    <div className=\"ml-3 flex-1\">\n                      <div className=\"font-medium text-sm\">{item.label}</div>\n                      {hoveredItem === item.id && !item.disabled && (\n                        <div className=\"text-xs text-slate-400 mt-0.5\">\n                          {item.description}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {/* Badge de notification (exemple) */}\n                  {!collapsed && item.id === 'tasks' && currentProjectId && (\n                    <div className=\"bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                      {projectStats?.activeTasks || 0}\n                    </div>\n                  )}\n                  \n                  {/* Effet de hover */}\n                  {isActive && (\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500/10 to-transparent rounded-xl\"></div>\n                  )}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n        \n        {/* Status en bas */}\n        {!collapsed && (\n          <div className=\"mt-6 p-3 bg-slate-800/50 rounded-lg border border-slate-700/50\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-xs text-slate-400\">Système en ligne</span>\n            </div>\r\n            <div className=\"text-xs text-slate-500\">\r\n              {projects.length} projet{projects.length > 1 ? 's' : ''} • Version 2.1.0\r\n            </div>\r\n          </div>\r\n        )}\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Location\\Location.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Locations\\Locations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Navigation\\MegaMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Offline\\OfflineReportForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Planning\\PhaseModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Planning\\Planning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Planning\\RobustGanttChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Planning\\TaskListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Planning\\TaskModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\BudgetSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskBudgetChart' is defined but never used.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MATERIALS_EQUIPMENTS' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MaterialOrEquipment' is defined but never used.","line":13,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'overviewData' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'allTasks' is assigned a value but never used.","line":67,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":17}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { BudgetOverview } from '../Costs/BudgetOverview';\r\nimport ExpenseList from '../Budget/ExpenseList';\r\nimport ExpenseForm from '../Budget/ExpenseForm';\r\nimport { useProjectContext } from '../../contexts/ProjectContext';\r\nimport type { FinancialRecord } from '../../types';\r\nimport ProjectBudgetChart from './ProjectBudgetChart';\r\nimport PhaseBudgetChart from './PhaseBudgetChart';\r\nimport TaskBudgetChart from './TaskBudgetChart';\r\nimport { exportProjectBudgetToCSV } from '../../utils/exportBudget';\r\n\r\nimport type { Project } from '../../contexts/projectTypes';\r\nimport { MATERIALS_EQUIPMENTS, MaterialOrEquipment } from '../../data/materials';\r\n\r\ninterface BudgetSectionProps {\r\n  project: Project;\r\n}\r\n\r\nconst BudgetSection: React.FC<BudgetSectionProps> = ({ project }) => {\r\n  const { expenses, addExpense, editExpense, deleteExpense } = useProjectContext();\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [editingExpense, setEditingExpense] = useState<FinancialRecord | null>(null);\r\n\r\n  // Filtrer les dépenses du projet courant\r\n  const projectExpenses = expenses.filter(e => e.projectId === project.id);\r\n\r\n  const handleAdd = () => {\r\n    setEditingExpense(null);\r\n    setModalOpen(true);\r\n  };\r\n  const handleEdit = (expense: FinancialRecord) => {\r\n    setEditingExpense(expense);\r\n    setModalOpen(true);\r\n  };\r\n  const handleDelete = async (expenseId: string) => {\r\n    await deleteExpense(expenseId);\r\n  };\r\n  const handleSubmit = async (data: Omit<FinancialRecord, 'id'>) => {\r\n    if (editingExpense) {\r\n      await editExpense(editingExpense.id, data);\r\n    } else {\r\n      await addExpense(data);\r\n    }\r\n    setModalOpen(false);\r\n    setEditingExpense(null);\r\n  };\r\n  // Adaptation des données pour BudgetOverview (si besoin)\r\n  const overviewData = {\r\n    name: project.name,\r\n    budget: project.budget,\r\n    actualSpent: project.spent,\r\n    phases: (project.phases || []).map((ph) => {\r\n      // Calculer le budget et les dépenses de la phase à partir des tâches\r\n      const phaseBudget = ph.tasks.reduce((sum, task) => sum + (task.budget || 0), 0);\r\n      const phaseSpent = ph.tasks.reduce((sum, task) => sum + (task.spent || 0), 0);\r\n      return {\r\n        id: ph.id,\r\n        name: ph.name,\r\n        estimatedCost: phaseBudget,\r\n        actualCost: phaseSpent,\r\n        completion: phaseBudget > 0 ? (phaseSpent / phaseBudget) * 100 : 0\r\n      };\r\n    })\r\n  };\r\n\r\n  // Récupération des tâches avec nom de phase\r\n  const allTasks = (project.phases || []).flatMap(phase =>\r\n    (phase.tasks || []).map(task => ({\r\n      id: task.id,\r\n      name: task.name,\r\n      budget: task.budget ?? 0,\r\n      spent: task.spent ?? 0,\r\n      phaseName: phase.name\r\n    }))\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-xl font-bold\">Synthèse budget</h2>\r\n        <button\r\n          className=\"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition\"\r\n          onClick={() => exportProjectBudgetToCSV(project)}\r\n        >\r\n          Exporter CSV\r\n        </button>\r\n      </div>\r\n      <BudgetOverview />\r\n      <div className=\"grid md:grid-cols-2 gap-8 mt-8\">\r\n        <ProjectBudgetChart budget={project.budget} spent={project.spent} />\r\n        <PhaseBudgetChart phases={(project.phases || []).map(ph => {\r\n          // Calculer le budget et les dépenses de la phase à partir des tâches\r\n          const phaseBudget = ph.tasks.reduce((sum, task) => sum + (task.budget || 0), 0);\r\n          const phaseSpent = ph.tasks.reduce((sum, task) => sum + (task.spent || 0), 0);\r\n          return {\r\n            id: ph.id,\r\n            name: ph.name,\r\n            budget: phaseBudget,\r\n            spent: phaseSpent\r\n          };\r\n        })} />\r\n      </div>\r\n      {/* TaskBudgetChart temporairement commenté pour debug */}\r\n      {/* <TaskBudgetChart tasks={allTasks} /> */}\r\n      \r\n      {/* Tableau des tâches temporairement commenté pour debug */}\r\n      {/* <div className=\"mt-8\">\r\n        <h3 className=\"text-lg font-semibold mb-2\">Détail des tâches</h3>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full border text-sm\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"px-2 py-1 border\">Phase</th>\r\n                <th className=\"px-2 py-1 border\">Tâche</th>\r\n                <th className=\"px-2 py-1 border\">Budget</th>\r\n                <th className=\"px-2 py-1 border\">Dépensé</th>\r\n                <th className=\"px-2 py-1 border\">Reste</th>\r\n                <th className=\"px-2 py-1 border\">%</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {allTasks.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={6} className=\"text-center py-4 text-gray-400\">Aucune tâche définie pour ce projet</td>\r\n                </tr>\r\n              ) : (\r\n                allTasks.map(task => {\r\n                  const reste = (task.budget ?? 0) - (task.spent ?? 0);\r\n                  const pct = task.budget > 0 ? (task.spent / task.budget) * 100 : 0;\r\n                  return (\r\n                    <tr key={task.id}>\r\n                      <td className=\"px-2 py-1 border\">{task.phaseName}</td>\r\n                      <td className=\"px-2 py-1 border\">{task.name}</td>\r\n                      <td className=\"px-2 py-1 border\">{(task.budget ?? 0).toLocaleString('fr-FR')} FCFA</td>\r\n                      <td className=\"px-2 py-1 border\">{(task.spent ?? 0).toLocaleString('fr-FR')} FCFA</td>\r\n                      <td className={`px-2 py-1 border ${reste < 0 ? 'text-red-600' : 'text-green-700'}`}>{reste.toLocaleString('fr-FR')} FCFA</td>\r\n                      <td className=\"px-2 py-1 border\">{pct.toFixed(1)}%</td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div> */}\r\n\r\n\r\n      {/* Dépenses réelles */}\r\n\r\n      <div className=\"mt-12\">\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          <h3 className=\"text-lg font-semibold\">Dépenses réelles</h3>\r\n          <button\r\n            className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition\"\r\n            onClick={handleAdd}\r\n          >\r\n            + Ajouter une dépense\r\n          </button>\r\n        </div>\r\n        <ExpenseList\r\n          expenses={projectExpenses}\r\n          onEdit={handleEdit}\r\n          onDelete={handleDelete}\r\n        />\r\n        {isModalOpen && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-40 z-50\">\r\n            <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\r\n              <ExpenseForm\r\n                initialValues={editingExpense || undefined}\r\n                onSubmit={handleSubmit}\r\n                onCancel={() => { setModalOpen(false); setEditingExpense(null); }}\r\n                projectId={project.id}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BudgetSection;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\CreateProjectModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\DeleteConfirmation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\EditProjectModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\PhaseBudgetChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectAccessGuard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'project' is defined but never used.","line":9,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":73}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport type { Project } from '../../contexts/projectTypes';\r\n\r\ninterface ProjectAccessGuardProps {\r\n  project: Project;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ProjectAccessGuard: React.FC<ProjectAccessGuardProps> = ({ project, children }) => {\r\n  // DÉVELOPPEMENT: Pas de contrôle d'accès - tous les utilisateurs ont accès\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default ProjectAccessGuard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectActionsMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectBudgetChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectHistoryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\ProjectTeamModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\Projects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Projects\\TaskBudgetChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\PurchaseOrders\\DeliveryNoteModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'purchaseOrders'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, purchaseOrders.length, deliveryNote, purchaseOrder, purchaseOrders]","fix":{"range":[2259,2319],"text":"[isOpen, purchaseOrders.length, deliveryNote, purchaseOrder, purchaseOrders]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  X, \n  Truck, \n  Package, \n  Calendar, \n  User, \n  FileText, \n  CheckCircle, \n  AlertTriangle, \n  XCircle,\n  Save,\n  MapPin,\n  Clock,\n  Clipboard\n} from 'lucide-react';\nimport { DeliveryNote, DeliveryNoteItem, PurchaseOrder } from '../../types/purchaseOrder';\nimport { usePurchaseOrderContext } from '../../contexts/PurchaseOrderContext';\n\ninterface DeliveryNoteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  deliveryNote?: DeliveryNote | null;\n  purchaseOrder?: PurchaseOrder | null;\n}\n\nconst DeliveryNoteModal: React.FC<DeliveryNoteModalProps> = ({ \n  isOpen, \n  onClose, \n  deliveryNote, \n  purchaseOrder \n}) => {\n  const { addDeliveryNote, updateDeliveryNote, purchaseOrders, deliveryNotes } = usePurchaseOrderContext();\n\n  // États du formulaire\n  const [formData, setFormData] = useState({\n    purchaseOrderId: '',\n    deliveryNumber: '',\n    deliveryDate: '',\n    deliveredBy: '',\n    receivedBy: '',\n    deliveryAddress: '',\n    transportCompany: '',\n    vehicleInfo: '',\n    notes: ''\n  });\n\n  const [items, setItems] = useState<Omit<DeliveryNoteItem, 'id'>[]>([]);\n  const [selectedPurchaseOrder, setSelectedPurchaseOrder] = useState<PurchaseOrder | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  // Générer un numéro de bon de livraison\n  const generateDeliveryNumber = () => {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n    return `BL-${year}${month}${day}-${random}`;\n  };\n\n  // Rafraîchir la liste des bons d'achat quand le modal s'ouvre\n  useEffect(() => {\n    if (isOpen && !deliveryNote && !purchaseOrder) {\n      // Force un petit délai pour s'assurer que les nouveaux bons d'achat sont synchronisés\n      const timer = setTimeout(() => {\n        console.log('Synchronisation des bons d\\'achat:', purchaseOrders.length, 'bons disponibles');\n        if (purchaseOrders.length > 0) {\n          console.log('Premier bon d\\'achat:', purchaseOrders[0]);\n        }\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [isOpen, purchaseOrders.length, deliveryNote, purchaseOrder]);\n\n  // Initialiser le formulaire\n  useEffect(() => {\n    if (deliveryNote) {\n      setFormData({\n        purchaseOrderId: deliveryNote.purchaseOrderId,\n        deliveryNumber: deliveryNote.deliveryNumber,\n        deliveryDate: deliveryNote.deliveryDate.split('T')[0],\n        deliveredBy: deliveryNote.deliveredBy || '',\n        receivedBy: deliveryNote.receivedBy || '',\n        deliveryAddress: '',\n        transportCompany: '',\n        vehicleInfo: '',\n        notes: deliveryNote.notes || ''\n      });\n      setItems(deliveryNote.items.map(item => ({\n        purchaseOrderItemId: item.purchaseOrderItemId,\n        name: item.name,\n        orderedQuantity: item.orderedQuantity,\n        deliveredQuantity: item.deliveredQuantity,\n        unit: item.unit,\n        status: item.status,\n        condition: item.condition,\n        notes: item.notes\n      })));\n      setSelectedPurchaseOrder(purchaseOrders.find(po => po.id === deliveryNote.purchaseOrderId) || null);\n    } else if (purchaseOrder) {\n      setFormData({\n        purchaseOrderId: purchaseOrder.id,\n        deliveryNumber: generateDeliveryNumber(),\n        deliveryDate: new Date().toISOString().split('T')[0],\n        deliveredBy: '',\n        receivedBy: '',\n        deliveryAddress: purchaseOrder.deliveryAddress || '',\n        transportCompany: '',\n        vehicleInfo: '',\n        notes: ''\n      });\n      setItems(purchaseOrder.items.map(item => ({\n        purchaseOrderItemId: item.id,\n        name: item.name,\n        orderedQuantity: item.quantity,\n        deliveredQuantity: 0,\n        unit: item.unit,\n        status: 'pending',\n        condition: 'good',\n        notes: ''\n      })));\n      setSelectedPurchaseOrder(purchaseOrder);\n    } else {\n      setFormData({\n        purchaseOrderId: '',\n        deliveryNumber: generateDeliveryNumber(),\n        deliveryDate: new Date().toISOString().split('T')[0],\n        deliveredBy: '',\n        receivedBy: '',\n        deliveryAddress: '',\n        transportCompany: '',\n        vehicleInfo: '',\n        notes: ''\n      });\n      setItems([]);\n      setSelectedPurchaseOrder(null);\n    }\n  }, [deliveryNote, purchaseOrder, purchaseOrders]);\n\n  // Gérer la sélection du bon d'achat\n  const handlePurchaseOrderChange = (purchaseOrderId: string) => {\n    const po = purchaseOrders.find(p => p.id === purchaseOrderId);\n    setFormData({ ...formData, purchaseOrderId });\n    setSelectedPurchaseOrder(po || null);\n    if (po) {\n      setItems(po.items.map(item => ({\n        purchaseOrderItemId: item.id,\n        name: item.name,\n        orderedQuantity: item.quantity,\n        deliveredQuantity: 0,\n        unit: item.unit,\n        status: 'pending',\n        condition: 'good',\n        notes: ''\n      })));\n    } else {\n      setItems([]);\n    }\n  };\n\n  // Mettre à jour un article\n  const updateItem = (index: number, field: string, value: string | number) => {\n    const updatedItems = [...items];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n\n    if (field === 'deliveredQuantity') {\n      const delivered = Number(value);\n      const ordered = updatedItems[index].orderedQuantity;\n\n      if (delivered === 0) updatedItems[index].status = 'pending';\n      else if (delivered < ordered) updatedItems[index].status = 'partial';\n      else if (delivered === ordered) updatedItems[index].status = 'delivered';\n      else updatedItems[index].status = 'excess';\n    }\n\n    setItems(updatedItems);\n  };\n\n  // Calculer les statistiques de livraison\n  const deliveryStats = {\n    totalItems: items.length,\n    deliveredItems: items.filter(item => item.status === 'delivered').length,\n    partialItems: items.filter(item => item.status === 'partial').length,\n    pendingItems: items.filter(item => item.status === 'pending').length,\n    damagedItems: items.filter(item => item.condition === 'damaged').length\n  };\n\n  // Déterminer le statut global\n  const determineOverallStatus = (): 'pending' | 'in_transit' | 'delivered' | 'partially_received' | 'received' | 'rejected' => {\n    const delivered = deliveryStats.deliveredItems;\n    const partial = deliveryStats.partialItems;\n    const total = deliveryStats.totalItems;\n\n    if (delivered === total) return 'delivered';\n    if (delivered > 0 || partial > 0) return 'partially_received';\n    return 'pending';\n  };\n\n  // Icônes de statut\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'partial': return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'pending': return <Clock className=\"h-4 w-4 text-gray-500\" />;\n      case 'excess': return <AlertTriangle className=\"h-4 w-4 text-blue-500\" />;\n      default: return <XCircle className=\"h-4 w-4 text-red-500\" />;\n    }\n  };\n\n  // Couleurs de condition\n  const getConditionColor = (condition: string) => {\n    switch (condition) {\n      case 'good': return 'text-green-600 bg-green-50';\n      case 'damaged': return 'text-red-600 bg-red-50';\n      case 'defective': return 'text-orange-600 bg-orange-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  // Soumettre le formulaire\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    console.log('=== DÉBOGAGE SOUMISSION BON DE LIVRAISON ===');\n    console.log('FormData:', formData);\n    console.log('Items:', items);\n    console.log('SelectedPurchaseOrder:', selectedPurchaseOrder);\n    \n    // Validation\n    if (!formData.purchaseOrderId) {\n      console.log('ERREUR: purchaseOrderId manquant');\n      alert('Veuillez sélectionner un bon d\\'achat.');\n      return;\n    }\n    if (!formData.deliveryDate) {\n      console.log('ERREUR: deliveryDate manquante');\n      alert('Veuillez saisir une date de livraison.');\n      return;\n    }\n    if (items.length === 0) {\n      console.log('ERREUR: aucun article à livrer');\n      alert('Aucun article à livrer. Veuillez sélectionner un bon d\\'achat contenant des articles.');\n      return;\n    }\n    if (!selectedPurchaseOrder) {\n      console.log('ERREUR: selectedPurchaseOrder est null');\n      alert('Erreur: bon d\\'achat non trouvé.');\n      return;\n    }\n    \n    console.log('Validation OK, préparation des données...');\n    setLoading(true);\n    \n    try {\n      const deliveryNoteData = {\n        purchaseOrderId: formData.purchaseOrderId,\n        purchaseOrder: selectedPurchaseOrder,\n        deliveryNumber: formData.deliveryNumber,\n        deliveryDate: new Date(formData.deliveryDate).toISOString(),\n        status: determineOverallStatus(),\n        items: items.map((item, index) => ({\n          ...item,\n          id: `item-${Date.now()}-${index}`\n        })),\n        deliveredBy: formData.deliveredBy || '',\n        receivedBy: formData.receivedBy || '',\n        notes: formData.notes || '',\n        qualityCheck: false,\n        overallCondition: 'good' as const\n      };\n      \n      console.log('Données à sauvegarder:', deliveryNoteData);\n\n      if (deliveryNote) {\n        console.log('Mise à jour du bon de livraison existant...');\n        await updateDeliveryNote(deliveryNote.id, deliveryNoteData);\n      } else {\n        console.log('Création d\\'un nouveau bon de livraison...');\n        await addDeliveryNote(deliveryNoteData);\n      }\n      \n      console.log('Sauvegarde réussie!');\n      onClose();\n    } catch (error) {\n      console.error('ERREUR lors de la sauvegarde:', error);\n      console.error('Détails de l\\'erreur:', {\n        message: error instanceof Error ? error.message : 'Erreur inconnue',\n        stack: error instanceof Error ? error.stack : 'Pas de stack trace'\n      });\n      alert(`Erreur lors de la sauvegarde du bon de livraison: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);\n    } finally {\n      setLoading(false);\n      console.log('=== FIN DÉBOGAGE ===');\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200/50\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-gradient-to-br from-green-500 to-teal-600 rounded-lg text-white\">\n              <Truck className=\"h-6 w-6\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-teal-600 bg-clip-text text-transparent\">\n                {deliveryNote ? 'Modifier le Bon de Livraison' : 'Nouveau Bon de Livraison'}\n              </h2>\n              <p className=\"text-gray-600\">\n                {deliveryNote ? `Modification du bon ${deliveryNote.deliveryNumber}` : 'Enregistrer une nouvelle livraison'}\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Fermer le modal\"\n          >\n            <X className=\"h-6 w-6 text-gray-500\" />\n          </button>\n        </div>\n\n        {/* Formulaire principal */}\n        <form onSubmit={handleSubmit} className=\"flex flex-col flex-1 min-h-0\">\n          <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n            {/* Informations générales */}\n            <div className=\"glass-card p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2\">\n                <FileText className=\"h-5 w-5 text-blue-600\" />\n                <span>Informations de Livraison</span>\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Bon d'achat */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Clipboard className=\"h-4 w-4 inline mr-1 text-purple-500\" />\n                    Bon d'Achat *\n                  </label>\n                  <select\n                    value={formData.purchaseOrderId}\n                    onChange={(e) => handlePurchaseOrderChange(e.target.value)}\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                    required\n                    disabled={!!purchaseOrder}\n                  >\n                    <option value=\"\">Sélectionner un bon d'achat</option>\n                    {(() => {\n                      console.log('=== DÉBOGAGE FILTRAGE BONS D\\'ACHAT ===');\n                      console.log('Nombre total de bons d\\'achat:', purchaseOrders.length);\n                      console.log('Bons d\\'achat disponibles:', purchaseOrders.map(po => ({ id: po.id, orderNumber: po.orderNumber, status: po.status })));\n                      \n                      const filteredOrders = purchaseOrders\n                        .filter(po => {\n                          // Inclure plus de statuts pour permettre la création de bons de livraison\n                          const allowedStatuses = ['draft', 'pending_approval', 'approved', 'ordered'];\n                          const statusAllowed = allowedStatuses.includes(po.status);\n                          \n                          // CONTRAINTE 1:1 - Exclure les bons d'achat qui ont déjà un bon de livraison\n                          // Sauf si on modifie le bon de livraison existant\n                          const hasExistingDeliveryNote = deliveryNotes.some(dn => \n                            dn.purchaseOrderId === po.id && \n                            (!deliveryNote || dn.id !== deliveryNote.id)\n                          );\n                          \n                          const finalAllowed = statusAllowed && !hasExistingDeliveryNote;\n                          \n                          console.log(`Bon d'achat ${po.orderNumber} (${po.status}): statut=${statusAllowed ? 'OK' : 'KO'}, déjà livré=${hasExistingDeliveryNote ? 'OUI' : 'NON'} => ${finalAllowed ? 'INCLUS' : 'EXCLU'}`);\n                          return finalAllowed;\n                        })\n                        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n                      \n                      console.log('Bons d\\'achat filtrés:', filteredOrders.length);\n                      console.log('=== FIN DÉBOGAGE ===');\n                      \n                      return filteredOrders.map(po => (\n                        <option key={po.id} value={po.id}>\n                          {po.orderNumber} - {po.supplier?.name || 'Fournisseur inconnu'} ({po.status === 'ordered' ? 'Commandé' : po.status === 'approved' ? 'Approuvé' : po.status === 'pending_approval' ? 'En attente' : 'Brouillon'})\n                        </option>\n                      ));\n                    })()}\n                    {purchaseOrders.filter(po => ['draft', 'pending_approval', 'approved', 'ordered'].includes(po.status)).length === 0 && (\n                      <option disabled>Aucun bon d'achat disponible - Créez d'abord un bon d'achat</option>\n                    )}\n                  </select>\n                </div>\n\n                {/* Numéro de livraison */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Numéro de livraison *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.deliveryNumber}\n                    onChange={(e) => setFormData({ ...formData, deliveryNumber: e.target.value })}\n                    placeholder=\"BL-YYYYMMDD-XXX\"\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                    required\n                  />\n                </div>\n\n                {/* Date de livraison */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Calendar className=\"h-4 w-4 inline mr-1 text-orange-500\" />\n                    Date de livraison *\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={formData.deliveryDate}\n                    onChange={(e) => setFormData({ ...formData, deliveryDate: e.target.value })}\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                    required\n                  />\n                </div>\n\n                {/* Livré par */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <User className=\"h-4 w-4 inline mr-1 text-blue-500\" />\n                    Livré par\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.deliveredBy}\n                    onChange={(e) => setFormData({ ...formData, deliveredBy: e.target.value })}\n                    placeholder=\"Nom du livreur\"\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                </div>\n\n                {/* Reçu par */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <User className=\"h-4 w-4 inline mr-1 text-green-500\" />\n                    Reçu par\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.receivedBy}\n                    onChange={(e) => setFormData({ ...formData, receivedBy: e.target.value })}\n                    placeholder=\"Nom du réceptionnaire\"\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                </div>\n\n                {/* Entreprise de transport */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <Truck className=\"h-4 w-4 inline mr-1 text-purple-500\" />\n                    Entreprise de transport\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.transportCompany}\n                    onChange={(e) => setFormData({ ...formData, transportCompany: e.target.value })}\n                    placeholder=\"Nom de l'entreprise de transport\"\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                </div>\n\n                {/* Adresse de livraison */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    <MapPin className=\"h-4 w-4 inline mr-1 text-red-500\" />\n                    Adresse de livraison\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.deliveryAddress}\n                    onChange={(e) => setFormData({ ...formData, deliveryAddress: e.target.value })}\n                    placeholder=\"Adresse complète de livraison\"\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                </div>\n\n                {/* Informations véhicule */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Informations véhicule\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.vehicleInfo}\n                    onChange={(e) => setFormData({ ...formData, vehicleInfo: e.target.value })}\n                    placeholder=\"Plaque d'immatriculation, type de véhicule...\"\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Statistiques de livraison */}\n            {items.length > 0 && (\n              <div className=\"glass-card p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Résumé de la Livraison</h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{deliveryStats.totalItems}</div>\n                    <div className=\"text-sm text-gray-600\">Total articles</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">{deliveryStats.deliveredItems}</div>\n                    <div className=\"text-sm text-gray-600\">Livrés</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">{deliveryStats.partialItems}</div>\n                    <div className=\"text-sm text-gray-600\">Partiels</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-600\">{deliveryStats.pendingItems}</div>\n                    <div className=\"text-sm text-gray-600\">En attente</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-red-600\">{deliveryStats.damagedItems}</div>\n                    <div className=\"text-sm text-gray-600\">Endommagés</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Articles livrés */}\n            <div className=\"glass-card p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2\">\n                <Package className=\"h-5 w-5 text-purple-600\" />\n                <span>Articles à Réceptionner</span>\n              </h3>\n              {items.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Package className=\"h-12 w-12 mx-auto mb-2 text-gray-300\" />\n                  <p>Sélectionnez un bon d'achat pour voir les articles à livrer.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {items.map((item, index) => (\n                    <div key={index} className=\"bg-gray-50/50 rounded-lg p-4 border border-gray-200/50\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-8 gap-4 items-center\">\n                        <div className=\"md:col-span-2\">\n                          <div className=\"font-medium text-gray-900\">{item.name}</div>\n                          <div className=\"text-sm text-gray-500\">{item.unit}</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-sm text-gray-600\">Commandée</div>\n                          <div className=\"font-semibold\">{item.orderedQuantity}</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-xs text-gray-600 mb-1\">Livrée</label>\n                          <input\n                            type=\"number\"\n                            value={item.deliveredQuantity}\n                            onChange={(e) => updateItem(index, 'deliveredQuantity', parseFloat(e.target.value) || 0)}\n                            min=\"0\"\n                            max={item.orderedQuantity * 1.1}\n                            step=\"0.01\"\n                            className=\"w-full px-2 py-1 text-sm bg-white border border-gray-300 rounded focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500\"\n                          />\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"flex items-center justify-center space-x-1\">\n                            {getStatusIcon(item.status)}\n                            <span className=\"text-xs capitalize\">{item.status}</span>\n                          </div>\n                        </div>\n                        <div>\n                          <select\n                            value={item.condition}\n                            onChange={(e) => updateItem(index, 'condition', e.target.value)}\n                            className={`w-full px-2 py-1 text-xs rounded border ${getConditionColor(item.condition)}`}\n                          >\n                            <option value=\"good\">Bon état</option>\n                            <option value=\"damaged\">Endommagé</option>\n                            <option value=\"defective\">Défectueux</option>\n                          </select>\n                        </div>\n                        <div>\n                          <input\n                            type=\"text\"\n                            value={item.notes || ''}\n                            onChange={(e) => updateItem(index, 'notes', e.target.value)}\n                            placeholder=\"Notes...\"\n                            className=\"w-full px-2 py-1 text-xs bg-white border border-gray-300 rounded focus:ring-1 focus:ring-blue-500/20 focus:border-blue-500\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Notes générales */}\n            <div className=\"glass-card p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Notes de Livraison</h3>\n              <textarea\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                placeholder=\"Observations sur la livraison, problèmes rencontrés, remarques...\"\n                rows={4}\n                className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300\"\n              />\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-end space-x-4 p-6 border-t border-gray-200/50 bg-gray-50/50 flex-shrink-0\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-6 py-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              Annuler\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading || items.length === 0}\n              className=\"px-6 py-2 bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-lg hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              <span>{loading ? 'Sauvegarde...' : (deliveryNote ? 'Modifier' : 'Enregistrer')}</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default DeliveryNoteModal;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\PurchaseOrders\\PurchaseOrderCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\PurchaseOrders\\PurchaseOrderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\PurchaseOrders\\PurchaseOrders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\PurchaseOrders\\SupplierModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Quotes\\QuoteCreator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Quotes\\QuoteCreatorSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Quotes\\QuoteCreatorSimple_backup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Quotes\\QuoteList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Quotes\\QuotesModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Reports\\Reports.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":3,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":3,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":4,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Printer' is defined but never used.","line":5,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":5,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Share2' is defined but never used.","line":5,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":5,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedPeriod' is assigned a value but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedPeriod' is assigned a value but never used.","line":39,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5050,5053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5050,5053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\r\nimport {\r\n  FileText, Download, BarChart3, PieChart, Calendar, Users,\r\n  TrendingUp, DollarSign, Clock, CheckCircle, AlertTriangle,\r\n  Filter, Search, Eye, Printer, Mail, Share2, Settings,\r\n  Target, Activity, Zap, Award\r\n} from 'lucide-react';\r\nimport { useProjectContext } from '../../contexts/ProjectContext';\r\nimport { motion } from 'framer-motion';\r\n\r\ninterface ReportData {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n  progress: number;\r\n  budget: number;\r\n  spent: number;\r\n  tasks: number;\r\n  completedTasks: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  status: 'active' | 'completed' | 'delayed' | 'on_hold';\r\n}\r\n\r\ninterface ReportStats {\r\n  totalProjects: number;\r\n  activeProjects: number;\r\n  completedProjects: number;\r\n  totalBudget: number;\r\n  totalSpent: number;\r\n  totalTasks: number;\r\n  completedTasks: number;\r\n  averageProgress: number;\r\n}\r\n\r\nconst Reports: React.FC = () => {\r\n  const { projects } = useProjectContext();\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [selectedPeriod, setSelectedPeriod] = useState('month');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n\r\n  // Calcul des données de rapport\r\n  const reportData: ReportData[] = useMemo(() => {\r\n    return projects.map(project => {\r\n      const totalTasks = project.phases?.reduce((acc, phase) => acc + (phase.tasks?.length || 0), 0) || 0;\r\n      const completedTasks = project.phases?.reduce((acc, phase) => \r\n        acc + (phase.tasks?.filter(task => task.status === 'done').length || 0), 0) || 0;\r\n      const progress = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\r\n      \r\n      // Déterminer le statut du projet\r\n      let status: ReportData['status'] = 'active';\r\n      if (progress === 100) status = 'completed';\r\n      else if (progress < 30) status = 'delayed';\r\n      else if (project.status === 'on_hold') status = 'on_hold';\r\n\r\n      return {\r\n        id: project.id,\r\n        name: project.name,\r\n        type: project.type || 'Construction',\r\n        progress,\r\n        budget: project.budget,\r\n        spent: project.spent || 0,\r\n        tasks: totalTasks,\r\n        completedTasks,\r\n        startDate: project.startDate,\r\n        endDate: project.endDate,\r\n        status\r\n      };\r\n    });\r\n  }, [projects]);\r\n\r\n  // Calcul des statistiques globales\r\n  const stats: ReportStats = useMemo(() => {\r\n    const totalProjects = reportData.length;\r\n    const activeProjects = reportData.filter(p => p.status === 'active').length;\r\n    const completedProjects = reportData.filter(p => p.status === 'completed').length;\r\n    const totalBudget = reportData.reduce((sum, p) => sum + p.budget, 0);\r\n    const totalSpent = reportData.reduce((sum, p) => sum + p.spent, 0);\r\n    const totalTasks = reportData.reduce((sum, p) => sum + p.tasks, 0);\r\n    const completedTasks = reportData.reduce((sum, p) => sum + p.completedTasks, 0);\r\n    const averageProgress = totalProjects > 0 ? Math.round(reportData.reduce((sum, p) => sum + p.progress, 0) / totalProjects) : 0;\r\n\r\n    return {\r\n      totalProjects,\r\n      activeProjects,\r\n      completedProjects,\r\n      totalBudget,\r\n      totalSpent,\r\n      totalTasks,\r\n      completedTasks,\r\n      averageProgress\r\n    };\r\n  }, [reportData]);\r\n\r\n  // Données filtrées\r\n  const filteredData = useMemo(() => {\r\n    return reportData.filter(item => {\r\n      const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n      const matchesStatus = filterStatus === 'all' || item.status === filterStatus;\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [reportData, searchTerm, filterStatus]);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-green-100 text-green-800';\r\n      case 'active': return 'bg-blue-100 text-blue-800';\r\n      case 'delayed': return 'bg-red-100 text-red-800';\r\n      case 'on_hold': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'Terminé';\r\n      case 'active': return 'En cours';\r\n      case 'delayed': return 'En retard';\r\n      case 'on_hold': return 'En pause';\r\n      default: return 'Inconnu';\r\n    }\r\n  };\r\n\r\n  const generateReport = (type: string) => {\r\n    console.log(`Génération du rapport: ${type}`);\r\n    // Ici, vous ajouteriez la logique de génération de rapport PDF\r\n    alert(`Génération du rapport ${type} en cours... (Fonctionnalité à implémenter)`);\r\n  };\r\n\r\n  const exportData = (format: string) => {\r\n    console.log(`Export des données au format: ${format}`);\r\n    alert(`Export ${format} en cours... (Fonctionnalité à implémenter)`);\r\n  };\r\n\r\n  // Composant pour les statistiques KPI\r\n  const StatsCard = ({ title, value, icon: Icon, color, subtitle }: {\r\n    title: string;\r\n    value: string | number;\r\n    icon: React.ComponentType<any>;\r\n    color: string;\r\n    subtitle?: string;\r\n  }) => (\r\n    <motion.div\r\n      whileHover={{ y: -2, scale: 1.02 }}\r\n      className=\"glass-card p-6 hover:shadow-xl transition-all duration-300\"\r\n    >\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\r\n          <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\r\n          {subtitle && <p className=\"text-xs text-gray-500 mt-1\">{subtitle}</p>}\r\n        </div>\r\n        <div className={`p-3 rounded-xl ${color}`}>\r\n          <Icon className=\"h-6 w-6 text-white\" />\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n\r\n  // Composant pour la barre de progression\r\n  const ProgressBar = ({ percentage, color = 'bg-blue-500' }: { percentage: number; color?: string }) => (\r\n    <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n      <div \r\n        className={`h-2 rounded-full transition-all duration-800 ${color}`}\r\n        style={{ width: `${Math.min(percentage, 100)}%` }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-6 max-w-full\">\r\n      {/* Header */}\r\n      <div className=\"glass-card w-full\">\r\n        <div className=\"flex items-center justify-between p-4 px-3 md:px-4 lg:px-6\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"p-3 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl\">\r\n              <BarChart3 className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\r\n                Rapports & Analytics\r\n              </h1>\r\n              <p className=\"text-gray-600 mt-1\">\r\n                Analysez les performances et générez des rapports détaillés\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center space-x-3\">\r\n            <button\r\n              onClick={() => exportData('Excel')}\r\n              className=\"flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-xl hover:scale-105 transition-all duration-200 shadow-lg\"\r\n            >\r\n              <Download className=\"h-4 w-4\" />\r\n              <span>Excel</span>\r\n            </button>\r\n            <button\r\n              onClick={() => generateReport('global')}\r\n              className=\"flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl\"\r\n            >\r\n              <FileText className=\"h-5 w-5\" />\r\n              <span>Rapport PDF</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistiques globales */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-4 lg:gap-5 w-full\">\r\n        <StatsCard\r\n          title=\"Total Projets\"\r\n          value={stats.totalProjects}\r\n          icon={Target}\r\n          color=\"bg-blue-500\"\r\n          subtitle={`${stats.activeProjects} actifs`}\r\n        />\r\n        <StatsCard\r\n          title=\"Budget Total\"\r\n          value={`${stats.totalBudget.toLocaleString()} FCFA`}\r\n          icon={DollarSign}\r\n          color=\"bg-green-500\"\r\n          subtitle={`${stats.totalSpent.toLocaleString()} FCFA dépensés`}\r\n        />\r\n        <StatsCard\r\n          title=\"Tâches\"\r\n          value={`${stats.completedTasks}/${stats.totalTasks}`}\r\n          icon={CheckCircle}\r\n          color=\"bg-purple-500\"\r\n          subtitle={`${Math.round((stats.completedTasks / Math.max(stats.totalTasks, 1)) * 100)}% terminées`}\r\n        />\r\n        <StatsCard\r\n          title=\"Progression Moyenne\"\r\n          value={`${stats.averageProgress}%`}\r\n          icon={TrendingUp}\r\n          color=\"bg-orange-500\"\r\n          subtitle={`${stats.completedProjects} projets terminés`}\r\n        />\r\n      </div>\r\n\r\n      {/* Navigation par onglets */}\r\n      <div className=\"glass-card w-full\">\r\n        <div className=\"border-b border-white/20\">\r\n          <nav className=\"flex space-x-4 md:space-x-6 lg:space-x-8 px-3 md:px-4 lg:px-6\">\r\n            {[\r\n              { id: 'overview', label: 'Vue d\\'ensemble', icon: Eye },\r\n              { id: 'projects', label: 'Projets', icon: Target },\r\n              { id: 'financial', label: 'Financier', icon: DollarSign },\r\n              { id: 'performance', label: 'Performance', icon: Activity }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.id}\r\n                onClick={() => setActiveTab(tab.id)}\r\n                className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm transition-colors duration-200 ${\r\n                  activeTab === tab.id\r\n                    ? 'border-purple-500 text-purple-600'\r\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                }`}\r\n              >\r\n                <tab.icon className=\"h-4 w-4\" />\r\n                <span>{tab.label}</span>\r\n              </button>\r\n            ))}\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"p-3 md:p-4 lg:p-5\">\r\n          {activeTab === 'overview' && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4 lg:gap-5 w-full\">\r\n                {/* Répartition des projets par statut */}\r\n                <div className=\"glass-card p-3 md:p-4 lg:p-5 w-full\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\r\n                    <PieChart className=\"h-5 w-5 mr-2 text-purple-600\" />\r\n                    Répartition par Statut\r\n                  </h3>\r\n                  <div className=\"space-y-3\">\r\n                    {[\r\n                      { status: 'active', label: 'En cours', count: stats.activeProjects, color: 'bg-blue-500' },\r\n                      { status: 'completed', label: 'Terminés', count: stats.completedProjects, color: 'bg-green-500' },\r\n                      { status: 'delayed', label: 'En retard', count: reportData.filter(p => p.status === 'delayed').length, color: 'bg-red-500' },\r\n                      { status: 'on_hold', label: 'En pause', count: reportData.filter(p => p.status === 'on_hold').length, color: 'bg-yellow-500' }\r\n                    ].map(item => (\r\n                      <div key={item.status} className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className={`w-3 h-3 rounded-full ${item.color}`} />\r\n                          <span className=\"text-sm text-gray-600\">{item.label}</span>\r\n                        </div>\r\n                        <span className=\"text-sm font-semibold text-gray-800\">{item.count}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Progression budgétaire */}\r\n                <div className=\"glass-card p-3 md:p-4 lg:p-5 w-full\">\r\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\r\n                    <DollarSign className=\"h-5 w-5 mr-2 text-green-600\" />\r\n                    Progression Budgétaire\r\n                  </h3>\r\n                  <div className=\"space-y-4\">\r\n                    <div>\r\n                      <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\r\n                        <span>Budget utilisé</span>\r\n                        <span>{Math.round((stats.totalSpent / Math.max(stats.totalBudget, 1)) * 100)}%</span>\r\n                      </div>\r\n                      <ProgressBar \r\n                        percentage={(stats.totalSpent / Math.max(stats.totalBudget, 1)) * 100}\r\n                        color=\"bg-green-500\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"grid grid-cols-2 gap-4 pt-2\">\r\n                      <div className=\"text-center\">\r\n                        <p className=\"text-lg md:text-xl font-bold text-green-600 break-words\">{stats.totalSpent.toLocaleString()} FCFA</p>\r\n                        <p className=\"text-xs text-gray-500\">Dépensé</p>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <p className=\"text-lg md:text-xl font-bold text-gray-800 break-words\">{(stats.totalBudget - stats.totalSpent).toLocaleString()} FCFA</p>\r\n                        <p className=\"text-xs text-gray-500\">Restant</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Tendances récentes */}\r\n              <div className=\"glass-card p-3 md:p-4 lg:p-5 w-full\">\r\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-3 flex items-center\">\r\n                  <TrendingUp className=\"h-5 w-5 mr-2 text-blue-600\" />\r\n                  Tendances Récentes\r\n                </h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-4\">\r\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n                    <Zap className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\r\n                    <p className=\"text-lg font-bold text-blue-600\">+15%</p>\r\n                    <p className=\"text-sm text-gray-600\">Productivité ce mois</p>\r\n                  </div>\r\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n                    <Award className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\r\n                    <p className=\"text-lg font-bold text-green-600\">98%</p>\r\n                    <p className=\"text-sm text-gray-600\">Taux de satisfaction</p>\r\n                  </div>\r\n                  <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\r\n                    <Clock className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\r\n                    <p className=\"text-lg font-bold text-purple-600\">-8%</p>\r\n                    <p className=\"text-sm text-gray-600\">Délais de livraison</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'projects' && (\r\n            <div className=\"space-y-6\">\r\n              {/* Filtres */}\r\n              <div className=\"flex flex-col sm:flex-row gap-3 md:gap-4 w-full\">\r\n                <div className=\"relative flex-1\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Rechercher un projet...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"w-full pl-10 pr-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all duration-200\"\r\n                  />\r\n                </div>\r\n                <select\r\n                  value={filterStatus}\r\n                  onChange={(e) => setFilterStatus(e.target.value)}\r\n                  className=\"px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all duration-200\"\r\n                >\r\n                  <option value=\"all\">Tous les statuts</option>\r\n                  <option value=\"active\">En cours</option>\r\n                  <option value=\"completed\">Terminés</option>\r\n                  <option value=\"delayed\">En retard</option>\r\n                  <option value=\"on_hold\">En pause</option>\r\n                </select>\r\n              </div>\r\n\r\n              {/* Liste des projets */}\r\n              <div className=\"space-y-4\">\r\n                {filteredData.map((project) => (\r\n                  <motion.div\r\n                    key={project.id}\r\n                    whileHover={{ y: -2 }}\r\n                    className=\"glass-card p-3 md:p-4 lg:p-5 w-full hover:shadow-xl transition-all duration-300\"\r\n                  >\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center space-x-3 mb-2\">\r\n                          <h4 className=\"text-lg font-semibold text-gray-800\">{project.name}</h4>\r\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(project.status)}`}>\r\n                            {getStatusText(project.status)}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 md:gap-3 lg:gap-4 text-sm w-full\">\r\n                          <div>\r\n                            <p className=\"text-gray-500\">Progression</p>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <ProgressBar percentage={project.progress} />\r\n                              <span className=\"font-semibold\">{project.progress}%</span>\r\n                            </div>\r\n                          </div>\r\n                          <div>\r\n                            <p className=\"text-gray-500\">Budget</p>\r\n                            <p className=\"font-semibold text-green-600\">{project.budget.toLocaleString()} FCFA</p>\r\n                          </div>\r\n                          <div>\r\n                            <p className=\"text-gray-500\">Dépensé</p>\r\n                            <p className=\"font-semibold text-red-600\">{project.spent.toLocaleString()} FCFA</p>\r\n                          </div>\r\n                          <div>\r\n                            <p className=\"text-gray-500\">Tâches</p>\r\n                            <p className=\"font-semibold\">{project.completedTasks}/{project.tasks}</p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-1 md:space-x-2 ml-2 md:ml-3\">\r\n                        <button\r\n                          onClick={() => generateReport(`project-${project.id}`)}\r\n                          className=\"p-2 bg-purple-100 text-purple-600 rounded-lg hover:bg-purple-200 transition-colors duration-200\"\r\n                        >\r\n                          <FileText className=\"h-4 w-4\" />\r\n                        </button>\r\n                        <button\r\n                          onClick={() => exportData(`project-${project.id}`)}\r\n                          className=\"p-2 bg-blue-100 text-blue-600 rounded-lg hover:bg-blue-200 transition-colors duration-200\"\r\n                        >\r\n                          <Download className=\"h-4 w-4\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'financial' && (\r\n            <div className=\"space-y-4 w-full\">\r\n              <div className=\"text-center py-8 px-3 md:px-4 lg:px-6 w-full\">\r\n                <DollarSign className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\r\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">Rapport Financier Détaillé</h3>\r\n                <p className=\"text-gray-600 mb-6\">Analyse approfondie des coûts, revenus et rentabilité</p>\r\n                <button\r\n                  onClick={() => generateReport('financial')}\r\n                  className=\"px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-xl hover:scale-105 transition-all duration-200 shadow-lg\"\r\n                >\r\n                  Générer le rapport financier\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === 'performance' && (\r\n            <div className=\"space-y-4 w-full\">\r\n              <div className=\"text-center py-8 px-3 md:px-4 lg:px-6 w-full\">\r\n                <Activity className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\r\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">Analyse de Performance</h3>\r\n                <p className=\"text-gray-600 mb-6\">Métriques de productivité, qualité et efficacité</p>\r\n                <button\r\n                  onClick={() => generateReport('performance')}\r\n                  className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:scale-105 transition-all duration-200 shadow-lg\"\r\n                >\r\n                  Générer l'analyse de performance\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reports;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Settings\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Tasks\\CostManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Tasks\\TaskModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Tasks\\Tasks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\Team\\Team.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7680,7683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7680,7683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\r\nimport { \r\n  Users, \r\n  UserPlus, \r\n  Search, \r\n  Filter, \r\n  Grid, \r\n  List, \r\n  BarChart3, \r\n  CheckCircle, \r\n  Clock, \r\n  Award, \r\n  Crown, \r\n  Shield, \r\n  Eye, \r\n  HardHat, \r\n  User,\r\n  Edit,\r\n  Trash2,\r\n  X,\r\n  Mail,\r\n  Phone,\r\n  Building2,\r\n  Briefcase\r\n} from 'lucide-react';\r\nimport { useProjectContext } from '../../contexts/ProjectContext';\r\nimport { TeamMember, Role, TeamStats, BTP_SPECIALTIES, BTP_DEPARTMENTS } from '../../types/team';\r\nimport TeamService from '../../services/teamService';\r\nimport CurrencyService from '../../services/currencyService';\r\n\r\nconst Team: React.FC = () => {\r\n  const { currentProject } = useProjectContext();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedRole, setSelectedRole] = useState<string>('all');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\r\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedMember, setSelectedMember] = useState<TeamMember | null>(null);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    role: 'worker',\r\n    speciality: 'macon',\r\n    department: 'gros_oeuvre',\r\n    salary: '',\r\n    skills: [] as string[],\r\n    certifications: [] as string[]\r\n  });\r\n  \r\n  // État pour la monnaie\r\n  const [currency, setCurrency] = useState({ symbol: 'FCFA', position: 'after' as 'before' | 'after' });\r\n  \r\n  // Charger la monnaie par défaut\r\n  useEffect(() => {\r\n    const loadCurrency = async () => {\r\n      try {\r\n        const defaultCurrency = await CurrencyService.getDefaultCurrency();\r\n        setCurrency({ symbol: defaultCurrency.symbol, position: defaultCurrency.position });\r\n      } catch (error) {\r\n        console.warn('Erreur lors du chargement de la monnaie:', error);\r\n      }\r\n    };\r\n    loadCurrency();\r\n  }, []);\r\n  \r\n  // Fonction pour formater le salaire avec la monnaie\r\n  const formatSalary = (amount: number | string) => {\r\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) || 0 : amount;\r\n    if (numAmount === 0) return 'Non renseigné';\r\n    \r\n    const formatted = numAmount.toLocaleString('fr-FR');\r\n    return currency.position === 'before' \r\n      ? `${currency.symbol} ${formatted}`\r\n      : `${formatted} ${currency.symbol}`;\r\n  };\r\n\r\n  // État des membres d'équipe depuis Firebase\r\n  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Charger les membres depuis Firebase\r\n  useEffect(() => {\r\n    const loadTeamMembers = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const members = await TeamService.getAllMembers();\r\n        setTeamMembers(members);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des membres:', error);\r\n        setError('Erreur lors du chargement des membres');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTeamMembers();\r\n\r\n    // S'abonner aux mises à jour temps réel\r\n    const unsubscribe = TeamService.subscribeToMembers((members) => {\r\n      setTeamMembers(members);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => {\r\n      if (unsubscribe) {\r\n        unsubscribe();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const roles: Role[] = [\r\n    {\r\n      key: 'admin',\r\n      name: 'Administrateur',\r\n      description: 'Accès complet au système',\r\n      permissions: ['all'],\r\n      color: 'bg-red-500',\r\n      icon: Crown,\r\n      level: 1\r\n    },\r\n    {\r\n      key: 'project_manager',\r\n      name: 'Chef de Projet',\r\n      description: 'Gestion des projets et équipes',\r\n      permissions: ['project_management', 'team_management'],\r\n      color: 'bg-blue-500',\r\n      icon: Shield,\r\n      level: 2\r\n    },\r\n    {\r\n      key: 'supervisor',\r\n      name: 'Superviseur',\r\n      description: 'Supervision des travaux',\r\n      permissions: ['supervision', 'quality_control'],\r\n      color: 'bg-green-500',\r\n      icon: Eye,\r\n      level: 3\r\n    },\r\n    {\r\n      key: 'worker',\r\n      name: 'Ouvrier',\r\n      description: 'Exécution des travaux',\r\n      permissions: ['task_execution'],\r\n      color: 'bg-yellow-500',\r\n      icon: HardHat,\r\n      level: 4\r\n    },\r\n    {\r\n      key: 'client',\r\n      name: 'Client',\r\n      description: 'Consultation des projets',\r\n      permissions: ['view_projects'],\r\n      color: 'bg-purple-500',\r\n      icon: User,\r\n      level: 5\r\n    }\r\n  ];\r\n\r\n  // Filtrage des membres\r\n  const filteredMembers = useMemo(() => {\r\n    return teamMembers.filter(member => {\r\n      const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                           member.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                           member.speciality.toLowerCase().includes(searchTerm.toLowerCase());\r\n      const matchesRole = selectedRole === 'all' || member.role === selectedRole;\r\n      const matchesStatus = selectedStatus === 'all' || member.status === selectedStatus;\r\n      \r\n      return matchesSearch && matchesRole && matchesStatus;\r\n    });\r\n  }, [teamMembers, searchTerm, selectedRole, selectedStatus]);\r\n\r\n  // Fonctions utilitaires\r\n  const getRoleInfo = (roleKey: string): Role => {\r\n    return roles.find(role => role.key === roleKey) || roles[0];\r\n  };\r\n\r\n  const getStatusColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'active': return 'bg-green-100 text-green-800';\r\n      case 'inactive': return 'bg-gray-100 text-gray-800';\r\n      case 'on_leave': return 'bg-yellow-100 text-yellow-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string): string => {\r\n    switch (status) {\r\n      case 'active': return 'Actif';\r\n      case 'inactive': return 'Inactif';\r\n      case 'on_leave': return 'En congé';\r\n      default: return 'Inconnu';\r\n    }\r\n  };\r\n\r\n  // Calcul des statistiques de l'équipe\r\n  const teamStats: TeamStats = useMemo(() => {\r\n    const totalMembers = teamMembers.length;\r\n    const activeMembers = teamMembers.filter(m => m.status === 'active').length;\r\n    const onLeaveMembers = teamMembers.filter(m => m.status === 'on_leave').length;\r\n    const averageWorkload = totalMembers > 0 \r\n      ? Math.round(teamMembers.reduce((sum, m) => sum + (m.workload || 0), 0) / totalMembers)\r\n      : 0;\r\n    const topPerformers = teamMembers.filter(m => (m.performance || 0) >= 90).length;\r\n    \r\n    return {\r\n      totalMembers,\r\n      activeMembers,\r\n      onLeaveMembers,\r\n      averageWorkload,\r\n      topPerformers\r\n    };\r\n  }, [teamMembers]);\r\n\r\n  // Gestionnaires d'événements\r\n  const handleAddMember = () => {\r\n    openMemberModal();\r\n  };\r\n\r\n  const handleEditMember = (member: TeamMember) => {\r\n    openMemberModal(member);\r\n  };\r\n\r\n  const handleDeleteMember = async (memberId: string) => {\r\n    try {\r\n      await TeamService.deleteMember(memberId);\r\n      // La mise à jour se fera automatiquement via l'abonnement temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression du membre:', error);\r\n      setError('Erreur lors de la suppression du membre');\r\n    }\r\n  };\r\n\r\n  const handleSaveMember = async () => {\r\n    if (!formData.name || !formData.phone) {\r\n      alert('Veuillez remplir au moins le nom et le téléphone');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const memberData = {\r\n        name: formData.name,\r\n        email: formData.email || '', // Email optionnel\r\n        phone: formData.phone,\r\n        role: formData.role as any,\r\n        speciality: formData.speciality,\r\n        status: 'active' as const,\r\n        joinDate: selectedMember ? selectedMember.joinDate : new Date().toISOString().split('T')[0],\r\n        projectsCount: selectedMember ? selectedMember.projectsCount : 0,\r\n        department: formData.department,\r\n        salary: formData.salary ? parseInt(formData.salary) : 0,\r\n        workload: selectedMember ? selectedMember.workload : 0,\r\n        skills: formData.skills,\r\n        certifications: formData.certifications,\r\n        lastActivity: new Date().toISOString().split('T')[0],\r\n        performance: selectedMember ? selectedMember.performance : 80\r\n      };\r\n\r\n      if (selectedMember) {\r\n        await TeamService.updateMember(selectedMember.id, memberData);\r\n      } else {\r\n        await TeamService.addMember(memberData);\r\n      }\r\n\r\n      // Fermer la modal et réinitialiser le formulaire\r\n      setIsModalOpen(false);\r\n      setSelectedMember(null);\r\n      setFormData({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        role: 'worker',\r\n        speciality: '',\r\n        department: 'Production',\r\n        salary: '',\r\n        skills: [],\r\n        certifications: []\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde du membre:', error);\r\n      setError('Erreur lors de la sauvegarde du membre');\r\n    }\r\n  };\r\n\r\n  const openMemberModal = (member?: TeamMember) => {\r\n    if (member) {\r\n      setSelectedMember(member);\r\n      setFormData({\r\n        name: member.name,\r\n        email: member.email,\r\n        phone: member.phone || '',\r\n        role: member.role,\r\n        speciality: member.speciality,\r\n        department: member.department || 'Production',\r\n        salary: member.salary ? member.salary.toString() : '',\r\n        skills: member.skills || [],\r\n        certifications: member.certifications || []\r\n      });\r\n    } else {\r\n      setSelectedMember(null);\r\n      setFormData({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        role: 'worker',\r\n        speciality: '',\r\n        department: 'Production',\r\n        salary: '',\r\n        skills: [],\r\n        certifications: []\r\n      });\r\n    }\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  // Affichage de l'état de chargement\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-8\">\r\n        <div className=\"glass-card\">\r\n          <div className=\"flex items-center justify-between p-6\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"p-3 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl\">\r\n                <Users className=\"h-8 w-8 text-white\" />\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent\">\r\n                  Équipe\r\n                </h1>\r\n                <p className=\"text-gray-600 mt-1\">\r\n                  Chargement des membres de l'équipe...\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"glass-card p-12 text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600\">Chargement des données...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Affichage des erreurs */}\r\n      {error && (\r\n        <div className=\"glass-card border-red-200 bg-red-50/50\">\r\n          <div className=\"p-4\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <X className=\"h-5 w-5 text-red-400\" />\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm text-red-800\">{error}</p>\r\n              </div>\r\n              <div className=\"ml-auto pl-3\">\r\n                <button\r\n                  onClick={() => setError(null)}\r\n                  className=\"inline-flex text-red-400 hover:text-red-600\"\r\n                >\r\n                  <X className=\"h-5 w-5\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Header */}\r\n      <div className=\"glass-card\">\r\n        <div className=\"flex items-center justify-between p-6\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"p-3 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl\">\r\n              <Users className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent\">\r\n                Équipe\r\n              </h1>\r\n              <p className=\"text-gray-600 mt-1\">\r\n                Gestion des membres de l'équipe et des rôles\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <button\r\n            onClick={handleAddMember}\r\n            className=\"flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 text-white rounded-xl hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl\"\r\n          >\r\n            <UserPlus className=\"h-5 w-5\" />\r\n            <span>Nouveau membre</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistiques */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <div className=\"glass-card p-6 hover:shadow-xl hover:-translate-y-1 transition-all duration-300\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Total Membres</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{teamStats.totalMembers}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-blue-100 rounded-xl\">\r\n              <BarChart3 className=\"h-6 w-6 text-blue-600\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"glass-card p-6 hover:shadow-xl hover:-translate-y-1 transition-all duration-300\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Actifs</p>\r\n              <p className=\"text-2xl font-bold text-green-600\">{teamStats.activeMembers}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-green-100 rounded-xl\">\r\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"glass-card p-6 hover:shadow-xl hover:-translate-y-1 transition-all duration-300\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">En Congé</p>\r\n              <p className=\"text-2xl font-bold text-yellow-600\">{teamStats.onLeaveMembers}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-yellow-100 rounded-xl\">\r\n              <Clock className=\"h-6 w-6 text-yellow-600\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"glass-card p-6 hover:shadow-xl hover:-translate-y-1 transition-all duration-300\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Top Performers</p>\r\n              <p className=\"text-2xl font-bold text-purple-600\">{teamStats.topPerformers}</p>\r\n            </div>\r\n            <div className=\"p-3 bg-purple-100 rounded-xl\">\r\n              <Award className=\"h-6 w-6 text-purple-600\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filtres */}\r\n      <div className=\"glass-card p-6\">\r\n        <div className=\"flex items-center space-x-3 mb-6\">\r\n          <Filter className=\"h-5 w-5 text-blue-600\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-800\">Filtres</h3>\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Rechercher un membre...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"w-full pl-10 pr-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n            />\r\n          </div>\r\n\r\n          <select\r\n            value={selectedRole}\r\n            onChange={(e) => setSelectedRole(e.target.value)}\r\n            className=\"px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n          >\r\n            <option value=\"all\">Tous les rôles</option>\r\n            {roles.map(role => (\r\n              <option key={role.key} value={role.key}>{role.name}</option>\r\n            ))}\r\n          </select>\r\n\r\n          <select\r\n            value={selectedStatus}\r\n            onChange={(e) => setSelectedStatus(e.target.value)}\r\n            className=\"px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n          >\r\n            <option value=\"all\">Tous les statuts</option>\r\n            <option value=\"active\">Actif</option>\r\n            <option value=\"inactive\">Inactif</option>\r\n            <option value=\"on_leave\">En congé</option>\r\n          </select>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <button\r\n              onClick={() => setViewMode('grid')}\r\n              className={`p-2 rounded-lg transition-colors duration-200 ${\r\n                viewMode === 'grid' \r\n                  ? 'bg-blue-100 text-blue-600' \r\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n              }`}\r\n            >\r\n              <Grid className=\"h-4 w-4\" />\r\n            </button>\r\n            <button\r\n              onClick={() => setViewMode('list')}\r\n              className={`p-2 rounded-lg transition-colors duration-200 ${\r\n                viewMode === 'list' \r\n                  ? 'bg-blue-100 text-blue-600' \r\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n              }`}\r\n            >\r\n              <List className=\"h-4 w-4\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste des membres */}\r\n      <div className=\"glass-card\">\r\n        <div className=\"flex items-center justify-between p-6 border-b border-white/20\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Users className=\"h-6 w-6 text-blue-600\" />\r\n            <h3 className=\"text-xl font-semibold text-gray-800\">\r\n              Membres de l'équipe ({filteredMembers.length})\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        {filteredMembers.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n            <p className=\"text-gray-600 mb-4\">Aucun membre trouvé</p>\r\n            <button\r\n              onClick={handleAddMember}\r\n              className=\"flex items-center space-x-2 mx-auto px-6 py-3 bg-gradient-to-r from-orange-600 to-red-600 text-white rounded-xl hover:scale-105 transition-all duration-200\"\r\n            >\r\n              <UserPlus className=\"h-5 w-5\" />\r\n              <span>Ajouter le premier membre</span>\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className={`grid gap-4 ${\r\n            viewMode === 'grid' \r\n              ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5' \r\n              : 'grid-cols-1'\r\n          }`}>\r\n            {filteredMembers.map((member) => {\r\n              const role = getRoleInfo(member.role);\r\n              const IconComponent = role.icon;\r\n              const specialtyDisplay = BTP_SPECIALTIES[member.speciality as keyof typeof BTP_SPECIALTIES] || member.speciality;\r\n              const departmentDisplay = BTP_DEPARTMENTS[member.department as keyof typeof BTP_DEPARTMENTS] || member.department;\r\n              \r\n              return (\r\n                <div key={member.id} className=\"glass-card p-4 rounded-xl border border-white/20 bg-white/70 backdrop-blur-sm hover:scale-[1.02] transition-all duration-300 group relative overflow-hidden\">\r\n                  {/* Gradient d'arrière-plan selon le rôle */}\r\n                  <div className={`absolute inset-0 opacity-5 ${role.color.replace('bg-', 'bg-gradient-to-br from-')}-500 to-transparent`}></div>\r\n                  \r\n                  {/* En-tête avec avatar et actions */}\r\n                  <div className=\"relative flex items-start justify-between mb-3\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"relative flex-shrink-0\">\r\n                        <div className={`w-12 h-12 rounded-xl ${role.color} flex items-center justify-center text-white shadow-lg group-hover:shadow-xl transition-shadow`}>\r\n                          <IconComponent size={20} />\r\n                        </div>\r\n                        <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white shadow-sm ${\r\n                          getStatusColor(member.status)\r\n                        }`}></div>\r\n                      </div>\r\n                      <div className=\"min-w-0 flex-1\">\r\n                        <h3 className=\"font-semibold text-gray-800 group-hover:text-blue-600 transition-colors truncate text-sm\">\r\n                          {member.name}\r\n                        </h3>\r\n                        <p className=\"text-xs text-gray-500 truncate\">{role.name}</p>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Actions */}\r\n                    <div className=\"flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\r\n                      <button\r\n                        onClick={() => handleEditMember(member)}\r\n                        className=\"p-1.5 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors\"\r\n                        title=\"Modifier\"\r\n                      >\r\n                        <Edit size={14} />\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleDeleteMember(member.id)}\r\n                        className=\"p-1.5 text-red-600 hover:bg-red-100 rounded-lg transition-colors\"\r\n                        title=\"Supprimer\"\r\n                      >\r\n                        <Trash2 size={14} />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Informations principales */}\r\n                  <div className=\"relative space-y-2 text-xs\">\r\n                    <div className=\"flex items-center text-gray-600\">\r\n                      <Mail size={12} className=\"mr-2 flex-shrink-0\" />\r\n                      <span className=\"truncate\">{member.email}</span>\r\n                    </div>\r\n                    \r\n                    {member.phone && (\r\n                      <div className=\"flex items-center text-gray-600\">\r\n                        <Phone size={12} className=\"mr-2 flex-shrink-0\" />\r\n                        <span className=\"truncate\">{member.phone}</span>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    <div className=\"flex items-center text-gray-600\">\r\n                      <HardHat size={12} className=\"mr-2 flex-shrink-0\" />\r\n                      <span className=\"truncate font-medium\">{specialtyDisplay}</span>\r\n                    </div>\r\n                    \r\n                    {member.department && (\r\n                      <div className=\"flex items-center text-gray-600\">\r\n                        <Building2 size={12} className=\"mr-2 flex-shrink-0\" />\r\n                        <span className=\"truncate\">{departmentDisplay}</span>\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {member.salary && (\r\n                      <div className=\"flex items-center text-gray-600\">\r\n                        <Briefcase size={12} className=\"mr-2 flex-shrink-0\" />\r\n                        <span className=\"truncate font-medium text-green-600\">{formatSalary(member.salary)}</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* Statistiques compactes */}\r\n                  <div className=\"relative mt-3 pt-3 border-t border-gray-200\">\r\n                    <div className=\"grid grid-cols-3 gap-2 text-center\">\r\n                      <div>\r\n                        <div className=\"text-sm font-semibold text-blue-600\">{member.projectsCount || 0}</div>\r\n                        <div className=\"text-xs text-gray-500\">Projets</div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"text-sm font-semibold text-green-600\">\r\n                          {member.performance ? `${member.performance}%` : 'N/A'}\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500\">Perf.</div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"text-sm font-semibold text-purple-600\">\r\n                          {member.workload ? `${member.workload}%` : 'N/A'}\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500\">Charge</div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Barre de charge de travail */}\r\n                    {member.workload !== undefined && (\r\n                      <div className=\"mt-2\">\r\n                        <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\r\n                          <div \r\n                            className={`h-1.5 rounded-full transition-all duration-300 ${\r\n                              member.workload > 80 ? 'bg-red-500' :\r\n                              member.workload > 60 ? 'bg-yellow-500' : 'bg-green-500'\r\n                            }`}\r\n                            style={{ width: `${Math.min(member.workload, 100)}%` }}\r\n                          ></div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* Statut et compétences */}\r\n                  <div className=\"relative mt-3 flex items-center justify-between\">\r\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\r\n                      member.status === 'active' ? 'bg-green-100 text-green-800' :\r\n                      member.status === 'inactive' ? 'bg-red-100 text-red-800' :\r\n                      'bg-yellow-100 text-yellow-800'\r\n                    }`}>\r\n                      {getStatusText(member.status)}\r\n                    </span>\r\n                    \r\n                    {member.skills && member.skills.length > 0 && (\r\n                      <div className=\"text-xs text-gray-500\">\r\n                        +{member.skills.length} compétences\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Modal de gestion des membres */}\r\n      {isModalOpen && (\r\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\r\n          <div className=\"glass-card max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-6\">\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <h3 className=\"text-xl font-semibold text-gray-800\">\r\n                  {selectedMember ? 'Modifier le membre' : 'Nouveau membre'}\r\n                </h3>\r\n                <button\r\n                  onClick={() => setIsModalOpen(false)}\r\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\r\n                >\r\n                  <X className=\"h-5 w-5\" />\r\n                </button>\r\n              </div>\r\n              \r\n              {/* Formulaire d'ajout/modification de membre */}\r\n              <div className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Nom complet *\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formData.name}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                      placeholder=\"Nom complet\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Email\r\n                    </label>\r\n                    <input\r\n                      type=\"email\"\r\n                      value={formData.email}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                      placeholder=\"email@example.com (optionnel)\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Téléphone *\r\n                    </label>\r\n                    <input\r\n                      type=\"tel\"\r\n                      value={formData.phone}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                      placeholder=\"+237 6XX XX XX XX\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Rôle\r\n                    </label>\r\n                    <select\r\n                      value={formData.role}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                    >\r\n                      {roles.map(role => (\r\n                        <option key={role.key} value={role.key}>{role.name}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Spécialité BTP\r\n                    </label>\r\n                    <select\r\n                      value={formData.speciality}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, speciality: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                    >\r\n                      <option value=\"\">Sélectionner une spécialité</option>\r\n                      <optgroup label=\"Direction & Management\">\r\n                        <option value=\"directeur_travaux\">{BTP_SPECIALTIES.directeur_travaux}</option>\r\n                        <option value=\"conducteur_travaux\">{BTP_SPECIALTIES.conducteur_travaux}</option>\r\n                        <option value=\"chef_chantier\">{BTP_SPECIALTIES.chef_chantier}</option>\r\n                        <option value=\"ingenieur_btp\">{BTP_SPECIALTIES.ingenieur_btp}</option>\r\n                        <option value=\"architecte\">{BTP_SPECIALTIES.architecte}</option>\r\n                        <option value=\"economiste_construction\">{BTP_SPECIALTIES.economiste_construction}</option>\r\n                      </optgroup>\r\n                      <optgroup label=\"Gros Œuvre\">\r\n                        <option value=\"macon\">{BTP_SPECIALTIES.macon}</option>\r\n                        <option value=\"coffreur_bancheur\">{BTP_SPECIALTIES.coffreur_bancheur}</option>\r\n                        <option value=\"ferrailleur\">{BTP_SPECIALTIES.ferrailleur}</option>\r\n                        <option value=\"grutier\">{BTP_SPECIALTIES.grutier}</option>\r\n                        <option value=\"conducteur_engins\">{BTP_SPECIALTIES.conducteur_engins}</option>\r\n                        <option value=\"terrassier\">{BTP_SPECIALTIES.terrassier}</option>\r\n                      </optgroup>\r\n                      <optgroup label=\"Second Œuvre\">\r\n                        <option value=\"electricien\">{BTP_SPECIALTIES.electricien}</option>\r\n                        <option value=\"plombier\">{BTP_SPECIALTIES.plombier}</option>\r\n                        <option value=\"chauffagiste\">{BTP_SPECIALTIES.chauffagiste}</option>\r\n                        <option value=\"menuisier\">{BTP_SPECIALTIES.menuisier}</option>\r\n                        <option value=\"carreleur\">{BTP_SPECIALTIES.carreleur}</option>\r\n                        <option value=\"peintre\">{BTP_SPECIALTIES.peintre}</option>\r\n                        <option value=\"platrier\">{BTP_SPECIALTIES.platrier}</option>\r\n                        <option value=\"couvreur\">{BTP_SPECIALTIES.couvreur}</option>\r\n                        <option value=\"etancheur\">{BTP_SPECIALTIES.etancheur}</option>\r\n                        <option value=\"serrurier\">{BTP_SPECIALTIES.serrurier}</option>\r\n                      </optgroup>\r\n                      <optgroup label=\"Finitions\">\r\n                        <option value=\"decorateur\">{BTP_SPECIALTIES.decorateur}</option>\r\n                        <option value=\"moquetteur\">{BTP_SPECIALTIES.moquetteur}</option>\r\n                        <option value=\"vitrier\">{BTP_SPECIALTIES.vitrier}</option>\r\n                        <option value=\"ascensoriste\">{BTP_SPECIALTIES.ascensoriste}</option>\r\n                      </optgroup>\r\n                      <optgroup label=\"Spécialisés\">\r\n                        <option value=\"geometre\">{BTP_SPECIALTIES.geometre}</option>\r\n                        <option value=\"topographe\">{BTP_SPECIALTIES.topographe}</option>\r\n                        <option value=\"controleur_qualite\">{BTP_SPECIALTIES.controleur_qualite}</option>\r\n                        <option value=\"coordinateur_sps\">{BTP_SPECIALTIES.coordinateur_sps}</option>\r\n                        <option value=\"technicien_bureau_etudes\">{BTP_SPECIALTIES.technicien_bureau_etudes}</option>\r\n                      </optgroup>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Département {currentProject && `(Projet: ${currentProject.name})`}\r\n                    </label>\r\n                    <select\r\n                      value={formData.department}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, department: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                    >\r\n                      <option value=\"\">Sélectionner un département</option>\r\n                      {Object.entries(BTP_DEPARTMENTS).map(([key, value]) => (\r\n                        <option key={key} value={key}>{value}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Salaire annuel ({currency.symbol})\r\n                    </label>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={formData.salary}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, salary: e.target.value }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                      placeholder={`Ex: 2500000 (optionnel)`}\r\n                      min=\"0\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Compétences (séparées par des virgules)\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={formData.skills.join(', ')}\r\n                      onChange={(e) => setFormData(prev => ({ ...prev, skills: e.target.value.split(',').map(s => s.trim()).filter(s => s) }))}\r\n                      className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                      placeholder=\"Maçonnerie, Béton, Finitions\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Certifications (séparées par des virgules)\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={formData.certifications.join(', ')}\r\n                    onChange={(e) => setFormData(prev => ({ ...prev, certifications: e.target.value.split(',').map(s => s.trim()).filter(s => s) }))}\r\n                    className=\"w-full px-4 py-2 bg-white/70 backdrop-blur-sm border-2 border-white/30 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200\"\r\n                    placeholder=\"CAP Maçon, CACES, etc.\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\r\n                <button\r\n                  onClick={() => setIsModalOpen(false)}\r\n                  className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors duration-200\"\r\n                >\r\n                  Annuler\r\n                </button>\r\n                <button\r\n                  onClick={handleSaveMember}\r\n                  className=\"px-6 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 text-white rounded-lg hover:scale-105 transition-all duration-200 shadow-lg font-medium\"\r\n                >\r\n                  💾 Enregistrer\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Team;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\DragDropZone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\GlassCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\GlobalSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\InteractiveFeatures.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HelpCircle' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zap' is defined but never used.","line":2,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":5,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":5,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { HelpCircle, Keyboard, Search, Command, Zap, Eye, EyeOff } from 'lucide-react';\r\n\r\n// Hook pour les raccourcis clavier\r\nexport const useKeyboardShortcuts = (shortcuts: Record<string, () => void>) => {\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      // Vérifier que event.key existe avant d'appeler toLowerCase\r\n      if (!event.key) return;\r\n      \r\n      const key = event.key.toLowerCase();\r\n      const ctrlKey = event.ctrlKey || event.metaKey;\r\n      const altKey = event.altKey;\r\n      const shiftKey = event.shiftKey;\r\n\r\n      let shortcutKey = '';\r\n      if (ctrlKey) shortcutKey += 'ctrl+';\r\n      if (altKey) shortcutKey += 'alt+';\r\n      if (shiftKey) shortcutKey += 'shift+';\r\n      shortcutKey += key;\r\n\r\n      if (shortcuts[shortcutKey]) {\r\n        event.preventDefault();\r\n        shortcuts[shortcutKey]();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [shortcuts]);\r\n};\r\n\r\n// Composant Tooltip Intelligent\r\ninterface SmartTooltipProps {\r\n  content: string;\r\n  children: React.ReactNode;\r\n  position?: 'top' | 'bottom' | 'left' | 'right';\r\n  delay?: number;\r\n  interactive?: boolean;\r\n  shortcut?: string;\r\n}\r\n\r\nexport const SmartTooltip: React.FC<SmartTooltipProps> = ({\r\n  content,\r\n  children,\r\n  position = 'top',\r\n  delay = 500,\r\n  interactive = false,\r\n  shortcut\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [actualPosition, setActualPosition] = useState(position);\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n  const tooltipRef = useRef<HTMLDivElement>(null);\r\n  const triggerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const showTooltip = useCallback(() => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    timeoutRef.current = setTimeout(() => {\r\n      setIsVisible(true);\r\n      // Ajuster la position si nécessaire\r\n      if (tooltipRef.current && triggerRef.current) {\r\n        const tooltipRect = tooltipRef.current.getBoundingClientRect();\r\n        const triggerRect = triggerRef.current.getBoundingClientRect();\r\n        const viewportHeight = window.innerHeight;\r\n        const viewportWidth = window.innerWidth;\r\n\r\n        let newPosition = position;\r\n        if (position === 'top' && triggerRect.top < tooltipRect.height + 10) {\r\n          newPosition = 'bottom';\r\n        } else if (position === 'bottom' && triggerRect.bottom + tooltipRect.height + 10 > viewportHeight) {\r\n          newPosition = 'top';\r\n        } else if (position === 'left' && triggerRect.left < tooltipRect.width + 10) {\r\n          newPosition = 'right';\r\n        } else if (position === 'right' && triggerRect.right + tooltipRect.width + 10 > viewportWidth) {\r\n          newPosition = 'left';\r\n        }\r\n        setActualPosition(newPosition);\r\n      }\r\n    }, delay);\r\n  }, [delay, position]);\r\n\r\n  const hideTooltip = useCallback(() => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (!interactive) {\r\n      setIsVisible(false);\r\n    }\r\n  }, [interactive]);\r\n\r\n  const getPositionClasses = () => {\r\n    switch (actualPosition) {\r\n      case 'top':\r\n        return 'bottom-full left-1/2 transform -translate-x-1/2 mb-2';\r\n      case 'bottom':\r\n        return 'top-full left-1/2 transform -translate-x-1/2 mt-2';\r\n      case 'left':\r\n        return 'right-full top-1/2 transform -translate-y-1/2 mr-2';\r\n      case 'right':\r\n        return 'left-full top-1/2 transform -translate-y-1/2 ml-2';\r\n      default:\r\n        return 'bottom-full left-1/2 transform -translate-x-1/2 mb-2';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div \r\n      ref={triggerRef}\r\n      className=\"relative inline-block\"\r\n      onMouseEnter={showTooltip}\r\n      onMouseLeave={hideTooltip}\r\n      onFocus={showTooltip}\r\n      onBlur={hideTooltip}\r\n    >\r\n      {children}\r\n      {isVisible && (\r\n        <div\r\n          ref={tooltipRef}\r\n          className={`absolute z-50 px-3 py-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg whitespace-nowrap ${getPositionClasses()}`}\r\n          onMouseEnter={() => interactive && setIsVisible(true)}\r\n          onMouseLeave={() => interactive && setIsVisible(false)}\r\n        >\r\n          <div className=\"flex items-center space-x-2\">\r\n            <span>{content}</span>\r\n            {shortcut && (\r\n              <kbd className=\"px-1.5 py-0.5 text-xs bg-gray-700 rounded border border-gray-600\">\r\n                {shortcut}\r\n              </kbd>\r\n            )}\r\n          </div>\r\n          {/* Flèche du tooltip */}\r\n          <div className={`absolute w-2 h-2 bg-gray-900 transform rotate-45 ${\r\n            actualPosition === 'top' ? 'top-full left-1/2 -translate-x-1/2 -mt-1' :\r\n            actualPosition === 'bottom' ? 'bottom-full left-1/2 -translate-x-1/2 -mb-1' :\r\n            actualPosition === 'left' ? 'left-full top-1/2 -translate-y-1/2 -ml-1' :\r\n            'right-full top-1/2 -translate-y-1/2 -mr-1'\r\n          }`}></div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant de Recherche Intelligente\r\ninterface SmartSearchProps {\r\n  placeholder?: string;\r\n  onSearch: (query: string) => void;\r\n  suggestions?: string[];\r\n  className?: string;\r\n}\r\n\r\nexport const SmartSearch: React.FC<SmartSearchProps> = ({\r\n  placeholder = \"Rechercher...\",\r\n  onSearch,\r\n  suggestions = [],\r\n  className = \"\"\r\n}) => {\r\n  const [query, setQuery] = useState('');\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(-1);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const filteredSuggestions = suggestions.filter(suggestion =>\r\n    suggestion.toLowerCase().includes(query.toLowerCase())\r\n  ).slice(0, 5);\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      setSelectedIndex(prev => \r\n        prev < filteredSuggestions.length - 1 ? prev + 1 : prev\r\n      );\r\n    } else if (e.key === 'ArrowUp') {\r\n      e.preventDefault();\r\n      setSelectedIndex(prev => prev > 0 ? prev - 1 : -1);\r\n    } else if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      if (selectedIndex >= 0) {\r\n        setQuery(filteredSuggestions[selectedIndex]);\r\n        onSearch(filteredSuggestions[selectedIndex]);\r\n      } else {\r\n        onSearch(query);\r\n      }\r\n      setIsOpen(false);\r\n    } else if (e.key === 'Escape') {\r\n      setIsOpen(false);\r\n      inputRef.current?.blur();\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setQuery(value);\r\n    setIsOpen(value.length > 0 && filteredSuggestions.length > 0);\r\n    setSelectedIndex(-1);\r\n  };\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <div className=\"relative\">\r\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n          onFocus={() => setIsOpen(query.length > 0 && filteredSuggestions.length > 0)}\r\n          onBlur={() => setTimeout(() => setIsOpen(false), 200)}\r\n          placeholder={placeholder}\r\n          className=\"w-full pl-10 pr-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all\"\r\n        />\r\n      </div>\r\n      \r\n      {isOpen && filteredSuggestions.length > 0 && (\r\n        <div className=\"absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto\">\r\n          {filteredSuggestions.map((suggestion, index) => (\r\n            <button\r\n              key={index}\r\n              onClick={() => {\r\n                setQuery(suggestion);\r\n                onSearch(suggestion);\r\n                setIsOpen(false);\r\n              }}\r\n              className={`w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors ${\r\n                index === selectedIndex ? 'bg-orange-50 dark:bg-orange-900/20 text-orange-600 dark:text-orange-400' : ''\r\n              }`}\r\n            >\r\n              {suggestion}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant de Raccourcis Clavier\r\ninterface KeyboardShortcutsProps {\r\n  shortcuts: Array<{\r\n    key: string;\r\n    description: string;\r\n    action: () => void;\r\n  }>;\r\n}\r\n\r\nexport const KeyboardShortcutsPanel: React.FC<KeyboardShortcutsProps> = ({ shortcuts }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useKeyboardShortcuts({\r\n    'ctrl+/': () => setIsOpen(!isOpen),\r\n    'escape': () => setIsOpen(false)\r\n  });\r\n\r\n  if (!isOpen) {\r\n    return (\r\n      <SmartTooltip content=\"Raccourcis clavier\" shortcut=\"Ctrl+/\">\r\n        <button\r\n          onClick={() => setIsOpen(true)}\r\n          className=\"fixed bottom-4 right-4 p-3 bg-orange-500 hover:bg-orange-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-200 z-40\"\r\n        >\r\n          <Keyboard className=\"w-5 h-5\" />\r\n        </button>\r\n      </SmartTooltip>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-md w-full max-h-96 overflow-y-auto\">\r\n        <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              Raccourcis Clavier\r\n            </h3>\r\n            <button\r\n              onClick={() => setIsOpen(false)}\r\n              className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n            >\r\n              ×\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-6 space-y-3\">\r\n          {shortcuts.map((shortcut, index) => (\r\n            <div key={index} className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n                {shortcut.description}\r\n              </span>\r\n              <kbd className=\"px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 rounded border border-gray-300 dark:border-gray-600\">\r\n                {shortcut.key}\r\n              </kbd>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant de Mode Focus\r\nexport const FocusMode: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [isFocusMode, setIsFocusMode] = useState(false);\r\n\r\n  useKeyboardShortcuts({\r\n    'ctrl+shift+f': () => setIsFocusMode(!isFocusMode)\r\n  });\r\n\r\n  return (\r\n    <div className={`transition-all duration-300 ${isFocusMode ? 'focus-mode' : ''}`}>\r\n      {children}\r\n      <SmartTooltip content=\"Mode Focus\" shortcut=\"Ctrl+Shift+F\">\r\n        <button\r\n          onClick={() => setIsFocusMode(!isFocusMode)}\r\n          className={`fixed top-4 right-4 p-2 rounded-lg shadow-lg transition-all duration-200 z-40 ${\r\n            isFocusMode \r\n              ? 'bg-orange-500 text-white' \r\n              : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-300'\r\n          }`}\r\n        >\r\n          {isFocusMode ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n        </button>\r\n      </SmartTooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant de Commande Rapide\r\ninterface QuickCommandProps {\r\n  commands: Array<{\r\n    id: string;\r\n    label: string;\r\n    icon?: React.ReactNode;\r\n    action: () => void;\r\n    shortcut?: string;\r\n  }>;\r\n}\r\n\r\nexport const QuickCommand: React.FC<QuickCommandProps> = ({ commands }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n  const filteredCommands = commands.filter(command =>\r\n    command.label.toLowerCase().includes(query.toLowerCase())\r\n  );\r\n\r\n  useKeyboardShortcuts({\r\n    'ctrl+k': () => setIsOpen(true),\r\n    'escape': () => {\r\n      setIsOpen(false);\r\n      setQuery('');\r\n      setSelectedIndex(0);\r\n    }\r\n  });\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      setSelectedIndex(prev => \r\n        prev < filteredCommands.length - 1 ? prev + 1 : 0\r\n      );\r\n    } else if (e.key === 'ArrowUp') {\r\n      e.preventDefault();\r\n      setSelectedIndex(prev => \r\n        prev > 0 ? prev - 1 : filteredCommands.length - 1\r\n      );\r\n    } else if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      if (filteredCommands[selectedIndex]) {\r\n        filteredCommands[selectedIndex].action();\r\n        setIsOpen(false);\r\n        setQuery('');\r\n        setSelectedIndex(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/50 flex items-start justify-center pt-32 z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-lg w-full\">\r\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\r\n          <div className=\"relative\">\r\n            <Command className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n            <input\r\n              type=\"text\"\r\n              value={query}\r\n              onChange={(e) => {\r\n                setQuery(e.target.value);\r\n                setSelectedIndex(0);\r\n              }}\r\n              onKeyDown={handleKeyDown}\r\n              placeholder=\"Tapez une commande...\"\r\n              className=\"w-full pl-10 pr-4 py-2 bg-transparent border-none outline-none text-gray-900 dark:text-white placeholder-gray-500\"\r\n              autoFocus\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"max-h-64 overflow-y-auto\">\r\n          {filteredCommands.map((command, index) => (\r\n            <button\r\n              key={command.id}\r\n              onClick={() => {\r\n                command.action();\r\n                setIsOpen(false);\r\n                setQuery('');\r\n                setSelectedIndex(0);\r\n              }}\r\n              className={`w-full flex items-center space-x-3 px-4 py-3 text-left hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors ${\r\n                index === selectedIndex ? 'bg-orange-50 dark:bg-orange-900/20' : ''\r\n              }`}\r\n            >\r\n              {command.icon && (\r\n                <div className=\"flex-shrink-0 w-5 h-5 text-gray-400\">\r\n                  {command.icon}\r\n                </div>\r\n              )}\r\n              <div className=\"flex-1\">\r\n                <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                  {command.label}\r\n                </div>\r\n              </div>\r\n              {command.shortcut && (\r\n                <kbd className=\"px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 rounded\">\r\n                  {command.shortcut}\r\n                </kbd>\r\n              )}\r\n            </button>\r\n          ))}\r\n          {filteredCommands.length === 0 && (\r\n            <div className=\"px-4 py-8 text-center text-gray-500 dark:text-gray-400\">\r\n              Aucune commande trouvée\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default {\r\n  useKeyboardShortcuts,\r\n  SmartTooltip,\r\n  SmartSearch,\r\n  KeyboardShortcutsPanel,\r\n  FocusMode,\r\n  QuickCommand\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\ModernButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\ModernCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\ModernLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\NotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\ThemeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\VisualEffects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\UI\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\payments\\CountrySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\components\\payments\\MobileMoneyPayment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is defined but never used.","line":42,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":47},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":99,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":99,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  uid: string;\n  email: string;\n  displayName?: string;\n  phoneNumber?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string, displayName?: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Simuler un utilisateur connecté pour les tests\n  useEffect(() => {\n    // En production, vous intégreriez Firebase Auth ici\n    const mockUser: User = {\n      uid: 'test-user-123',\n      email: 'test@example.com',\n      displayName: 'Utilisateur Test',\n      phoneNumber: '+221701234567'\n    };\n    \n    setUser(mockUser);\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    setIsLoading(true);\n    try {\n      // Simuler une connexion\n      const mockUser: User = {\n        uid: 'user-' + Date.now(),\n        email,\n        displayName: email.split('@')[0],\n        phoneNumber: '+221701234567'\n      };\n      setUser(mockUser);\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    setUser(null);\n  };\n\n  const register = async (email: string, password: string, displayName?: string): Promise<void> => {\n    setIsLoading(true);\n    try {\n      // Simuler une inscription\n      const mockUser: User = {\n        uid: 'user-' + Date.now(),\n        email,\n        displayName: displayName || email.split('@')[0],\n        phoneNumber: ''\n      };\n      setUser(mockUser);\n    } catch (error) {\n      console.error('Erreur d\\'inscription:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    login,\n    logout,\n    register,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\BrandingContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'load'. Either include it or remove the dependency array.","line":81,"column":7,"nodeType":"ArrayExpression","endLine":81,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [loading, profile, logoDataUrl, load, ownerId]","fix":{"range":[2383,2423],"text":"[loading, profile, logoDataUrl, load, ownerId]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":90,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":90,"endColumn":25}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [load, ownerId]","fix":{"range":[1879,1888],"text":"[load, ownerId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { BrandingService, CompanyBranding } from '../services/brandingService';\nimport { useAuth } from './AuthContext';\n\nexport interface BrandingContextValue {\n  loading: boolean;\n  profile: CompanyBranding | null;\n  logoDataUrl?: string | null;\n  refresh: () => Promise<void>;\n  save: (data: Partial<CompanyBranding>) => Promise<void>;\n  uploadLogo: (file: File) => Promise<void>;\n}\n\nconst BrandingContext = createContext<BrandingContextValue | undefined>(undefined);\n\nasync function urlToDataUrl(url: string): Promise<string> {\n  const res = await fetch(url);\n  const blob = await res.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport const BrandingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [profile, setProfile] = useState<CompanyBranding | null>(null);\n  const [logoDataUrl, setLogoDataUrl] = useState<string | null>(null);\n\n  const ownerId = user?.uid || null;\n\n  const load = async () => {\n    if (!ownerId) {\n      setProfile(null);\n      setLogoDataUrl(null);\n      return;\n    }\n    setLoading(true);\n    try {\n      const p = await BrandingService.getProfile(ownerId);\n      setProfile(p);\n      if (p?.logoUrl) {\n        try {\n          const dataUrl = await urlToDataUrl(p.logoUrl);\n          setLogoDataUrl(dataUrl);\n        } catch {\n          setLogoDataUrl(null);\n        }\n      } else {\n        setLogoDataUrl(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ownerId]);\n\n  const value = useMemo<BrandingContextValue>(() => ({\n    loading,\n    profile,\n    logoDataUrl,\n    refresh: load,\n    save: async (data) => {\n      if (!ownerId) return;\n      await BrandingService.saveProfile(ownerId, data);\n      await load();\n    },\n    uploadLogo: async (file: File) => {\n      if (!ownerId) return;\n      const url = await BrandingService.uploadLogo(ownerId, file);\n      await BrandingService.saveProfile(ownerId, { logoUrl: url });\n      await load();\n    }\n  }), [loading, profile, logoDataUrl, ownerId]);\n\n  return (\n    <BrandingContext.Provider value={value}>\n      {children}\n    </BrandingContext.Provider>\n  );\n};\n\nexport const useBranding = () => {\n  const ctx = useContext(BrandingContext);\n  if (!ctx) throw new Error('useBranding must be used within BrandingProvider');\n  return ctx;\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\CurrencyContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":18,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":18,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useMemo } from 'react';\r\n\r\ninterface CurrencyContextProps {\r\n  currency: string; // ex: 'XOF'\r\n  locale: string;   // ex: 'fr-FR'\r\n}\r\n\r\nconst CurrencyContext = createContext<CurrencyContextProps>({\r\n  currency: 'XOF',\r\n  locale: 'fr-FR',\r\n});\r\n\r\nexport const CurrencyProvider: React.FC<{ currency?: string; locale?: string; children: React.ReactNode }> = ({ currency = 'XOF', locale = 'fr-FR', children }) => {\r\n  const value = useMemo(() => ({ currency, locale }), [currency, locale]);\r\n  return <CurrencyContext.Provider value={value}>{children}</CurrencyContext.Provider>;\r\n};\r\n\r\nexport const useCurrency = () => useContext(CurrencyContext);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\GeolocationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":84,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5857,5860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5857,5860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'checkGeofenceViolations'. Either include it or remove the dependency array.","line":251,"column":6,"nodeType":"ArrayExpression","endLine":251,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [checkGeofenceViolations, isLocationEnabled]","fix":{"range":[7570,7589],"text":"[checkGeofenceViolations, isLocationEnabled]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'checkGeofenceViolations'. Either include it or remove the dependency array.","line":294,"column":6,"nodeType":"ArrayExpression","endLine":294,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkGeofenceViolations]","fix":{"range":[8858,8860],"text":"[checkGeofenceViolations]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\n\nexport interface LocationData {\n  latitude: number;\n  longitude: number;\n  accuracy: number;\n  timestamp: Date;\n  address?: string;\n}\n\nexport interface TeamMember {\n  id: string;\n  name: string;\n  role: string;\n  avatar?: string;\n  isOnline: boolean;\n  lastSeen: Date;\n  currentLocation?: LocationData;\n  assignedSite?: string;\n}\n\nexport interface GeofenceZone {\n  id: string;\n  name: string;\n  type: 'site' | 'office' | 'warehouse' | 'restricted';\n  center: { lat: number; lng: number };\n  radius: number; // en mètres\n  isActive: boolean;\n  notifications: {\n    onEnter: boolean;\n    onExit: boolean;\n    onLongStay: boolean;\n  };\n  allowedMembers?: string[];\n}\n\nexport interface LocationEvent {\n  id: string;\n  memberId: string;\n  type: 'enter' | 'exit' | 'arrival' | 'departure' | 'alert';\n  zoneId?: string;\n  location: LocationData;\n  timestamp: Date;\n  message: string;\n}\n\ninterface GeolocationContextType {\n  // État de géolocalisation\n  isLocationEnabled: boolean;\n  currentLocation: LocationData | null;\n  locationError: string | null;\n  isTracking: boolean;\n  \n  // Équipe et suivi\n  teamMembers: TeamMember[];\n  geofenceZones: GeofenceZone[];\n  locationEvents: LocationEvent[];\n  \n  // Actions de géolocalisation\n  enableLocation: () => Promise<boolean>;\n  disableLocation: () => void;\n  startTracking: () => void;\n  stopTracking: () => void;\n  getCurrentPosition: () => Promise<LocationData | null>;\n  \n  // Gestion des équipes\n  updateMemberLocation: (memberId: string, location: LocationData) => void;\n  setMemberOnline: (memberId: string, isOnline: boolean) => void;\n  \n  // Gestion des géofences\n  addGeofenceZone: (zone: Omit<GeofenceZone, 'id'>) => void;\n  updateGeofenceZone: (zoneId: string, updates: Partial<GeofenceZone>) => void;\n  removeGeofenceZone: (zoneId: string) => void;\n  checkGeofenceViolations: (memberId: string, location: LocationData) => void;\n  \n  // Utilitaires\n  calculateDistance: (point1: LocationData, point2: LocationData) => number;\n  getAddressFromCoordinates: (lat: number, lng: number) => Promise<string>;\n  getNearbyMembers: (location: LocationData, radiusKm: number) => TeamMember[];\n}\n\nconst GeolocationContext = createContext<GeolocationContextType | undefined>(undefined);\n\nexport const useGeolocation = () => {\n  const context = useContext(GeolocationContext);\n  if (!context) {\n    throw new Error('useGeolocation must be used within a GeolocationProvider');\n  }\n  return context;\n};\n\ninterface GeolocationProviderProps {\n  children: React.ReactNode;\n}\n\nexport const GeolocationProvider: React.FC<GeolocationProviderProps> = ({ children }) => {\n  const [isLocationEnabled, setIsLocationEnabled] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<LocationData | null>(null);\n  const [locationError, setLocationError] = useState<string | null>(null);\n  const [isTracking, setIsTracking] = useState(false);\n  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\n  const [geofenceZones, setGeofenceZones] = useState<GeofenceZone[]>([]);\n  const [locationEvents, setLocationEvents] = useState<LocationEvent[]>([]);\n  const [watchId, setWatchId] = useState<number | null>(null);\n\n  // Vérifier la disponibilité de la géolocalisation\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setLocationError('La géolocalisation n\\'est pas supportée par ce navigateur');\n    }\n  }, []);\n\n  // Charger les données depuis localStorage\n  useEffect(() => {\n    const savedZones = localStorage.getItem('geofence-zones');\n    const savedMembers = localStorage.getItem('team-members');\n    const savedEvents = localStorage.getItem('location-events');\n\n    if (savedZones) {\n      try {\n        setGeofenceZones(JSON.parse(savedZones));\n      } catch (error) {\n        console.error('Erreur lors du chargement des zones:', error);\n      }\n    }\n\n    if (savedMembers) {\n      try {\n        setTeamMembers(JSON.parse(savedMembers));\n      } catch (error) {\n        console.error('Erreur lors du chargement des membres:', error);\n      }\n    }\n\n    if (savedEvents) {\n      try {\n        const events = JSON.parse(savedEvents);\n        // Garder seulement les événements des 7 derniers jours\n        const weekAgo = new Date();\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        const recentEvents = events.filter((event: LocationEvent) => \n          new Date(event.timestamp) > weekAgo\n        );\n        setLocationEvents(recentEvents);\n      } catch (error) {\n        console.error('Erreur lors du chargement des événements:', error);\n      }\n    }\n  }, []);\n\n  // Sauvegarder les données dans localStorage\n  useEffect(() => {\n    localStorage.setItem('geofence-zones', JSON.stringify(geofenceZones));\n  }, [geofenceZones]);\n\n  useEffect(() => {\n    localStorage.setItem('team-members', JSON.stringify(teamMembers));\n  }, [teamMembers]);\n\n  useEffect(() => {\n    localStorage.setItem('location-events', JSON.stringify(locationEvents));\n  }, [locationEvents]);\n\n  const enableLocation = useCallback(async (): Promise<boolean> => {\n    if (!navigator.geolocation) {\n      setLocationError('Géolocalisation non supportée');\n      return false;\n    }\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000,\n        });\n      });\n\n      const location: LocationData = {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        accuracy: position.coords.accuracy,\n        timestamp: new Date(),\n      };\n\n      setCurrentLocation(location);\n      setIsLocationEnabled(true);\n      setLocationError(null);\n      return true;\n    } catch (error: any) {\n      let errorMessage = 'Erreur de géolocalisation';\n      \n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = 'Permission de géolocalisation refusée';\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = 'Position non disponible';\n          break;\n        case error.TIMEOUT:\n          errorMessage = 'Timeout de géolocalisation';\n          break;\n      }\n      \n      setLocationError(errorMessage);\n      return false;\n    }\n  }, []);\n\n  const disableLocation = useCallback(() => {\n    if (watchId) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n    }\n    setIsLocationEnabled(false);\n    setIsTracking(false);\n    setCurrentLocation(null);\n  }, [watchId]);\n\n  const startTracking = useCallback(() => {\n    if (!isLocationEnabled) return;\n\n    const id = navigator.geolocation.watchPosition(\n      (position) => {\n        const location: LocationData = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n          timestamp: new Date(),\n        };\n        \n        setCurrentLocation(location);\n        \n        // Vérifier les violations de géofence pour l'utilisateur actuel\n        // (assumons que l'utilisateur actuel a l'ID 'current-user')\n        checkGeofenceViolations('current-user', location);\n      },\n      (error) => {\n        console.error('Erreur de suivi:', error);\n        setLocationError('Erreur lors du suivi de position');\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 30000,\n        maximumAge: 10000,\n      }\n    );\n\n    setWatchId(id);\n    setIsTracking(true);\n  }, [isLocationEnabled]);\n\n  const stopTracking = useCallback(() => {\n    if (watchId) {\n      navigator.geolocation.clearWatch(watchId);\n      setWatchId(null);\n    }\n    setIsTracking(false);\n  }, [watchId]);\n\n  const getCurrentPosition = useCallback(async (): Promise<LocationData | null> => {\n    if (!navigator.geolocation) return null;\n\n    try {\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000,\n        });\n      });\n\n      return {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        accuracy: position.coords.accuracy,\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      console.error('Erreur getCurrentPosition:', error);\n      return null;\n    }\n  }, []);\n\n  const updateMemberLocation = useCallback((memberId: string, location: LocationData) => {\n    setTeamMembers(prev => prev.map(member => \n      member.id === memberId\n        ? { ...member, currentLocation: location, lastSeen: new Date() }\n        : member\n    ));\n    \n    // Vérifier les violations de géofence\n    checkGeofenceViolations(memberId, location);\n  }, []);\n\n  const setMemberOnline = useCallback((memberId: string, isOnline: boolean) => {\n    setTeamMembers(prev => prev.map(member => \n      member.id === memberId\n        ? { ...member, isOnline, lastSeen: new Date() }\n        : member\n    ));\n  }, []);\n\n  const addGeofenceZone = useCallback((zone: Omit<GeofenceZone, 'id'>) => {\n    const newZone: GeofenceZone = {\n      ...zone,\n      id: `zone-${Date.now()}`,\n    };\n    setGeofenceZones(prev => [...prev, newZone]);\n  }, []);\n\n  const updateGeofenceZone = useCallback((zoneId: string, updates: Partial<GeofenceZone>) => {\n    setGeofenceZones(prev => prev.map(zone => \n      zone.id === zoneId ? { ...zone, ...updates } : zone\n    ));\n  }, []);\n\n  const removeGeofenceZone = useCallback((zoneId: string) => {\n    setGeofenceZones(prev => prev.filter(zone => zone.id !== zoneId));\n  }, []);\n\n  const calculateDistance = useCallback((point1: LocationData, point2: LocationData): number => {\n    const R = 6371; // Rayon de la Terre en km\n    const dLat = (point2.latitude - point1.latitude) * Math.PI / 180;\n    const dLon = (point2.longitude - point1.longitude) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(point1.latitude * Math.PI / 180) * Math.cos(point2.latitude * Math.PI / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }, []);\n\n  const checkGeofenceViolations = useCallback((memberId: string, location: LocationData) => {\n    const member = teamMembers.find(m => m.id === memberId);\n    if (!member) return;\n\n    geofenceZones.forEach(zone => {\n      if (!zone.isActive) return;\n\n      const zoneCenter = { latitude: zone.center.lat, longitude: zone.center.lng, accuracy: 0, timestamp: new Date() };\n      const distance = calculateDistance(location, zoneCenter) * 1000; // Convertir en mètres\n      const isInside = distance <= zone.radius;\n\n      // Vérifier si le membre était déjà dans la zone\n      const wasInside = member.currentLocation ? \n        calculateDistance(member.currentLocation, zoneCenter) * 1000 <= zone.radius : false;\n\n      // Générer des événements selon les transitions\n      if (isInside && !wasInside && zone.notifications.onEnter) {\n        const event: LocationEvent = {\n          id: `event-${Date.now()}`,\n          memberId,\n          type: 'enter',\n          zoneId: zone.id,\n          location,\n          timestamp: new Date(),\n          message: `${member.name} est entré dans ${zone.name}`,\n        };\n        setLocationEvents(prev => [event, ...prev.slice(0, 99)]); // Garder les 100 derniers événements\n      } else if (!isInside && wasInside && zone.notifications.onExit) {\n        const event: LocationEvent = {\n          id: `event-${Date.now()}`,\n          memberId,\n          type: 'exit',\n          zoneId: zone.id,\n          location,\n          timestamp: new Date(),\n          message: `${member.name} a quitté ${zone.name}`,\n        };\n        setLocationEvents(prev => [event, ...prev.slice(0, 99)]);\n      }\n\n      // Vérifier les restrictions d'accès\n      if (zone.allowedMembers && !zone.allowedMembers.includes(memberId) && isInside) {\n        const event: LocationEvent = {\n          id: `event-${Date.now()}`,\n          memberId,\n          type: 'alert',\n          zoneId: zone.id,\n          location,\n          timestamp: new Date(),\n          message: `⚠️ ${member.name} dans une zone restreinte: ${zone.name}`,\n        };\n        setLocationEvents(prev => [event, ...prev.slice(0, 99)]);\n      }\n    });\n  }, [teamMembers, geofenceZones, calculateDistance]);\n\n  const getAddressFromCoordinates = useCallback(async (lat: number, lng: number): Promise<string> => {\n    try {\n      // Utiliser une API de géocodage inverse (exemple avec OpenStreetMap Nominatim)\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`\n      );\n      const data = await response.json();\n      return data.display_name || `${lat.toFixed(6)}, ${lng.toFixed(6)}`;\n    } catch (error) {\n      console.error('Erreur géocodage:', error);\n      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;\n    }\n  }, []);\n\n  const getNearbyMembers = useCallback((location: LocationData, radiusKm: number): TeamMember[] => {\n    return teamMembers.filter(member => {\n      if (!member.currentLocation || !member.isOnline) return false;\n      const distance = calculateDistance(location, member.currentLocation);\n      return distance <= radiusKm;\n    });\n  }, [teamMembers, calculateDistance]);\n\n  const value: GeolocationContextType = {\n    isLocationEnabled,\n    currentLocation,\n    locationError,\n    isTracking,\n    teamMembers,\n    geofenceZones,\n    locationEvents,\n    enableLocation,\n    disableLocation,\n    startTracking,\n    stopTracking,\n    getCurrentPosition,\n    updateMemberLocation,\n    setMemberOnline,\n    addGeofenceZone,\n    updateGeofenceZone,\n    removeGeofenceZone,\n    checkGeofenceViolations,\n    calculateDistance,\n    getAddressFromCoordinates,\n    getNearbyMembers,\n  };\n\n  return (\n    <GeolocationContext.Provider value={value}>\n      {children}\n    </GeolocationContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\OfflineContext.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":41,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":41,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\PaymentContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":272,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":272,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { collection, addDoc, updateDoc, doc, query, where, getDocs, orderBy, Timestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { PaymentRecord } from '../services/PaymentService';\nimport { useAuth } from './AuthContext';\n\ninterface PaymentContextType {\n  payments: PaymentRecord[];\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  createPayment: (paymentData: Omit<PaymentRecord, 'id' | 'createdAt' | 'updatedAt'>) => Promise<string>;\n  updatePaymentStatus: (paymentId: string, status: PaymentRecord['status'], flutterwaveRef?: string) => Promise<void>;\n  getUserPayments: () => Promise<PaymentRecord[]>;\n  getProjectPayments: (projectId: string) => Promise<PaymentRecord[]>;\n  \n  // Utilitaires\n  calculateMonthlyRevenue: () => number;\n  getPaymentStats: () => {\n    total: number;\n    successful: number;\n    pending: number;\n    failed: number;\n    totalAmount: number;\n  };\n}\n\nconst PaymentContext = createContext<PaymentContextType | undefined>(undefined);\n\ninterface PaymentProviderProps {\n  children: ReactNode;\n}\n\nexport const PaymentProvider: React.FC<PaymentProviderProps> = ({ children }) => {\n  const [payments, setPayments] = useState<PaymentRecord[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  /**\n   * Crée un nouveau paiement dans Firestore\n   */\n  const createPayment = useCallback(async (paymentData: Omit<PaymentRecord, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> => {\n    if (!user) {\n      throw new Error('Utilisateur non connecté');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const paymentRecord: Omit<PaymentRecord, 'id'> = {\n        ...paymentData,\n        userId: user.uid,\n        createdAt: Timestamp.fromDate(new Date()),\n        updatedAt: Timestamp.fromDate(new Date()),\n      };\n\n      const docRef = await addDoc(collection(db, 'payments'), paymentRecord);\n      \n      // Mettre à jour l'état local\n      const newPayment: PaymentRecord = {\n        ...paymentRecord,\n        id: docRef.id,\n      };\n      \n      setPayments(prev => [newPayment, ...prev]);\n      \n      console.log('✅ Paiement créé avec succès:', docRef.id);\n      return docRef.id;\n    } catch (err) {\n      console.error('❌ Erreur lors de la création du paiement:', err);\n      setError('Erreur lors de la création du paiement');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  /**\n   * Met à jour le statut d'un paiement\n   */\n  const updatePaymentStatus = useCallback(async (\n    paymentId: string, \n    status: PaymentRecord['status'], \n    flutterwaveRef?: string\n  ): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const paymentRef = doc(db, 'payments', paymentId);\n      const updateData: Partial<PaymentRecord> = {\n        status,\n        updatedAt: Timestamp.fromDate(new Date()),\n      };\n\n      if (flutterwaveRef) {\n        updateData.flutterwaveRef = flutterwaveRef;\n      }\n\n      await updateDoc(paymentRef, updateData);\n\n      // Mettre à jour l'état local\n      setPayments(prev => prev.map(payment => \n        payment.id === paymentId \n          ? { ...payment, status, flutterwaveRef, updatedAt: Timestamp.fromDate(new Date()) }\n          : payment\n      ));\n\n      console.log('✅ Statut du paiement mis à jour:', paymentId, status);\n    } catch (err) {\n      console.error('❌ Erreur lors de la mise à jour du paiement:', err);\n      setError('Erreur lors de la mise à jour du paiement');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Récupère tous les paiements de l'utilisateur connecté\n   */\n  const getUserPayments = useCallback(async (): Promise<PaymentRecord[]> => {\n    if (!user) {\n      throw new Error('Utilisateur non connecté');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const q = query(\n        collection(db, 'payments'),\n        where('userId', '==', user.uid),\n        orderBy('createdAt', 'desc')\n      );\n\n      const querySnapshot = await getDocs(q);\n      const userPayments: PaymentRecord[] = [];\n\n      querySnapshot.forEach((doc) => {\n        userPayments.push({\n          id: doc.id,\n          ...doc.data()\n        } as PaymentRecord);\n      });\n\n      setPayments(userPayments);\n      console.log('✅ Paiements utilisateur chargés:', userPayments.length);\n      return userPayments;\n    } catch (err) {\n      console.error('❌ Erreur lors du chargement des paiements:', err);\n      setError('Erreur lors du chargement des paiements');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  /**\n   * Récupère tous les paiements d'un projet\n   */\n  const getProjectPayments = useCallback(async (projectId: string): Promise<PaymentRecord[]> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const q = query(\n        collection(db, 'payments'),\n        where('projectId', '==', projectId),\n        orderBy('createdAt', 'desc')\n      );\n\n      const querySnapshot = await getDocs(q);\n      const projectPayments: PaymentRecord[] = [];\n\n      querySnapshot.forEach((doc) => {\n        projectPayments.push({\n          id: doc.id,\n          ...doc.data()\n        } as PaymentRecord);\n      });\n\n      console.log('✅ Paiements du projet chargés:', projectPayments.length);\n      return projectPayments;\n    } catch (err) {\n      console.error('❌ Erreur lors du chargement des paiements du projet:', err);\n      setError('Erreur lors du chargement des paiements du projet');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Calcule le chiffre d'affaires mensuel\n   */\n  const calculateMonthlyRevenue = useCallback((): number => {\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n\n    return payments\n      .filter(payment => {\n        if (payment.status !== 'successful') return false;\n        \n        const paymentDate = payment.createdAt instanceof Date \n          ? payment.createdAt \n          : new Date(payment.createdAt.seconds * 1000);\n        \n        return paymentDate.getMonth() === currentMonth && \n               paymentDate.getFullYear() === currentYear;\n      })\n      .reduce((total, payment) => total + payment.amount, 0);\n  }, [payments]);\n\n  /**\n   * Calcule les statistiques des paiements\n   */\n  const getPaymentStats = useCallback(() => {\n    const stats = payments.reduce((acc, payment) => {\n      acc.total++;\n      acc[payment.status]++;\n      \n      if (payment.status === 'successful') {\n        acc.totalAmount += payment.amount;\n      }\n      \n      return acc;\n    }, {\n      total: 0,\n      successful: 0,\n      pending: 0,\n      failed: 0,\n      cancelled: 0,\n      totalAmount: 0\n    });\n\n    return {\n      total: stats.total,\n      successful: stats.successful,\n      pending: stats.pending,\n      failed: stats.failed + stats.cancelled,\n      totalAmount: stats.totalAmount\n    };\n  }, [payments]);\n\n  const value: PaymentContextType = {\n    payments,\n    isLoading,\n    error,\n    createPayment,\n    updatePaymentStatus,\n    getUserPayments,\n    getProjectPayments,\n    calculateMonthlyRevenue,\n    getPaymentStats,\n  };\n\n  return (\n    <PaymentContext.Provider value={value}>\n      {children}\n    </PaymentContext.Provider>\n  );\n};\n\n/**\n * Hook pour utiliser le contexte de paiement\n */\nexport const usePayment = (): PaymentContextType => {\n  const context = useContext(PaymentContext);\n  if (context === undefined) {\n    throw new Error('usePayment must be used within a PaymentProvider');\n  }\n  return context;\n};\n\nexport default PaymentContext;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\ProjectContext.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[890,893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[890,893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2175,2178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2175,2178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":117,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updates' is defined but never used.","line":117,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":51,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":124,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_parentTaskId' is defined but never used.","line":367,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":367,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":616,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":616,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\PurchaseOrderContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":255,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":255,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport { PurchaseOrderService } from '../services/purchaseOrderService';\r\nimport { BudgetIntegrationService } from '../services/budgetIntegrationService';\r\nimport type { \r\n  PurchaseOrder, \r\n  DeliveryNote, \r\n  Supplier, \r\n  PurchaseOrderStats, \r\n  DeliveryStats,\r\n  PurchaseOrderContextType \r\n} from '../types/purchaseOrder';\r\n\r\nconst PurchaseOrderContext = createContext<PurchaseOrderContextType | undefined>(undefined);\r\n\r\nexport const PurchaseOrderProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  // États pour les bons d'achat\r\n  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);\r\n  const [loadingPurchaseOrders, setLoadingPurchaseOrders] = useState<boolean>(true);\r\n\r\n  // États pour les bons de livraison\r\n  const [deliveryNotes, setDeliveryNotes] = useState<DeliveryNote[]>([]);\r\n  const [loadingDeliveryNotes, setLoadingDeliveryNotes] = useState<boolean>(true);\r\n\r\n  // États pour les fournisseurs\r\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\r\n\r\n  // États pour les statistiques\r\n  const [purchaseOrderStats, setPurchaseOrderStats] = useState<PurchaseOrderStats | null>(null);\r\n  const [deliveryStats, setDeliveryStats] = useState<DeliveryStats | null>(null);\r\n\r\n  // Charger les données initiales\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      try {\r\n        setLoadingPurchaseOrders(true);\r\n        setLoadingDeliveryNotes(true);\r\n\r\n        // Charger les données en parallèle\r\n        const [ordersData, notesData, suppliersData] = await Promise.all([\r\n          PurchaseOrderService.getAllPurchaseOrders(),\r\n          PurchaseOrderService.getAllDeliveryNotes(),\r\n          PurchaseOrderService.getAllSuppliers()\r\n        ]);\r\n\r\n        setPurchaseOrders(ordersData);\r\n        setDeliveryNotes(notesData);\r\n        setSuppliers(suppliersData);\r\n\r\n        // Charger les statistiques\r\n        const [orderStats, deliveryStatsData] = await Promise.all([\r\n          PurchaseOrderService.getPurchaseOrderStats(),\r\n          PurchaseOrderService.getDeliveryStats()\r\n        ]);\r\n\r\n        setPurchaseOrderStats(orderStats);\r\n        setDeliveryStats(deliveryStatsData);\r\n\r\n      } catch (error) {\r\n        console.error('Erreur lors du chargement des données:', error);\r\n      } finally {\r\n        setLoadingPurchaseOrders(false);\r\n        setLoadingDeliveryNotes(false);\r\n      }\r\n    };\r\n\r\n    loadInitialData();\r\n\r\n    // Écouter les changements en temps réel\r\n    const unsubscribeOrders = PurchaseOrderService.subscribeToPurchaseOrders((orders) => {\r\n      setPurchaseOrders(orders);\r\n    });\r\n\r\n    const unsubscribeNotes = PurchaseOrderService.subscribeToDeliveryNotes((notes) => {\r\n      setDeliveryNotes(notes);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeOrders();\r\n      unsubscribeNotes();\r\n    };\r\n  }, []);\r\n\r\n  // Actions pour les bons d'achat\r\n  const addPurchaseOrder = async (orderData: Omit<PurchaseOrder, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    try {\r\n      await PurchaseOrderService.addPurchaseOrder(orderData);\r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du bon d\\'achat:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updatePurchaseOrder = async (id: string, updates: Partial<PurchaseOrder>) => {\r\n    try {\r\n      await PurchaseOrderService.updatePurchaseOrder(id, updates);\r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du bon d\\'achat:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deletePurchaseOrder = async (id: string) => {\r\n    try {\r\n      console.log('Contexte: Tentative de suppression du bon d\\'achat:', id);\r\n      \r\n      // Supprimer les dépenses associées avant de supprimer le bon d'achat\r\n      await BudgetIntegrationService.removePurchaseOrderExpenses(id);\r\n      \r\n      await PurchaseOrderService.deletePurchaseOrder(id);\r\n      console.log('Contexte: Bon d\\'achat supprimé avec succès:', id);\r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Contexte: Erreur lors de la suppression du bon d\\'achat:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const approvePurchaseOrder = async (id: string, approvedBy: string, notes?: string) => {\r\n    try {\r\n      await PurchaseOrderService.approvePurchaseOrder(id, approvedBy, notes);\r\n      \r\n      // Synchroniser avec le budget après approbation\r\n      const approvedOrder = purchaseOrders.find(po => po.id === id);\r\n      if (approvedOrder) {\r\n        const updatedOrder = { ...approvedOrder, status: 'approved' as const, approvedBy, approvalNotes: notes };\r\n        await BudgetIntegrationService.syncPurchaseOrderToBudget(updatedOrder);\r\n        console.log('✅ Bon d\\'achat synchronisé avec le budget');\r\n      }\r\n      \r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'approbation du bon d\\'achat:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Actions pour les bons de livraison\r\n  const addDeliveryNote = async (noteData: Omit<DeliveryNote, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    try {\r\n      await PurchaseOrderService.addDeliveryNote(noteData);\r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du bon de livraison:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateDeliveryNote = async (id: string, updates: Partial<DeliveryNote>) => {\r\n    try {\r\n      await PurchaseOrderService.updateDeliveryNote(id, updates);\r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du bon de livraison:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const receiveDelivery = async (id: string, receivedBy: string) => {\r\n    try {\r\n      await PurchaseOrderService.receiveDelivery(id, receivedBy, true, 'Livraison réceptionnée');\r\n      \r\n      // Synchroniser avec les dépenses réelles après réception\r\n      const receivedDelivery = deliveryNotes.find(dn => dn.id === id);\r\n      if (receivedDelivery) {\r\n        const updatedDelivery = { ...receivedDelivery, status: 'received' as const, receivedBy };\r\n        await BudgetIntegrationService.syncDeliveryToActualExpense(updatedDelivery);\r\n        console.log('✅ Livraison synchronisée avec les dépenses réelles');\r\n      }\r\n      \r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Erreur lors de la réception de la livraison:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteDeliveryNote = async (id: string) => {\r\n    try {\r\n      console.log('Contexte: Tentative de suppression du bon de livraison:', id);\r\n      await PurchaseOrderService.deleteDeliveryNote(id);\r\n      console.log('Contexte: Bon de livraison supprimé avec succès:', id);\r\n      // Les données seront mises à jour via l'écoute en temps réel\r\n    } catch (error) {\r\n      console.error('Contexte: Erreur lors de la suppression du bon de livraison:', {\r\n        id,\r\n        error: error instanceof Error ? error.message : error,\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Actions pour les fournisseurs\r\n  const addSupplier = async (supplierData: Omit<Supplier, 'id' | 'createdAt' | 'updatedAt'>) => {\r\n    try {\r\n      await PurchaseOrderService.addSupplier(supplierData);\r\n      // Recharger la liste des fournisseurs\r\n      const updatedSuppliers = await PurchaseOrderService.getAllSuppliers();\r\n      setSuppliers(updatedSuppliers);\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du fournisseur:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateSupplier = async (id: string, updates: Partial<Supplier>) => {\r\n    try {\r\n      await PurchaseOrderService.updateSupplier(id, updates);\r\n      // Recharger la liste des fournisseurs\r\n      const updatedSuppliers = await PurchaseOrderService.getAllSuppliers();\r\n      setSuppliers(updatedSuppliers);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour du fournisseur:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const contextValue: PurchaseOrderContextType = {\r\n    // Bons d'achat\r\n    purchaseOrders,\r\n    loadingPurchaseOrders,\r\n    addPurchaseOrder,\r\n    updatePurchaseOrder,\r\n    deletePurchaseOrder,\r\n    approvePurchaseOrder,\r\n\r\n    // Bons de livraison\r\n    deliveryNotes,\r\n    loadingDeliveryNotes,\r\n    addDeliveryNote,\r\n    updateDeliveryNote,\r\n    receiveDelivery,\r\n    deleteDeliveryNote,\r\n\r\n    // Fournisseurs\r\n    suppliers,\r\n    addSupplier,\r\n    updateSupplier,\r\n\r\n    // Statistiques\r\n    purchaseOrderStats,\r\n    deliveryStats\r\n  };\r\n\r\n  return (\r\n    <PurchaseOrderContext.Provider value={contextValue}>\r\n      {children}\r\n    </PurchaseOrderContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personnalisé pour utiliser le contexte\r\nexport const usePurchaseOrderContext = () => {\r\n  const context = React.useContext(PurchaseOrderContext);\r\n  if (context === undefined) {\r\n    throw new Error('usePurchaseOrderContext must be used within a PurchaseOrderProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default PurchaseOrderContext;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":15,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":15,"endColumn":22},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":113,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":113,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":129,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":129,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":152,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":152,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark' | 'auto';\ntype ResolvedTheme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  resolvedTheme: ResolvedTheme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Récupérer le thème sauvegardé ou utiliser 'auto' par défaut\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    return savedTheme || 'auto';\n  });\n\n  const [resolvedTheme, setResolvedTheme] = useState<ResolvedTheme>('light');\n\n  // Détecter la préférence système\n  const getSystemTheme = (): ResolvedTheme => {\n    if (typeof window !== 'undefined') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    }\n    return 'light';\n  };\n\n  // Résoudre le thème effectif\n  useEffect(() => {\n    let effectiveTheme: ResolvedTheme;\n    \n    if (theme === 'auto') {\n      effectiveTheme = getSystemTheme();\n    } else {\n      effectiveTheme = theme as ResolvedTheme;\n    }\n\n    setResolvedTheme(effectiveTheme);\n\n    // Appliquer le thème au document\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(effectiveTheme);\n    \n    // Mettre à jour la couleur de la barre d'état mobile\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', effectiveTheme === 'dark' ? '#1f2937' : '#ffffff');\n    }\n\n    // Sauvegarder le thème\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Écouter les changements de préférence système\n  useEffect(() => {\n    if (theme === 'auto') {\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const handleChange = () => {\n        setResolvedTheme(getSystemTheme());\n      };\n\n      mediaQuery.addEventListener('change', handleChange);\n      return () => mediaQuery.removeEventListener('change', handleChange);\n    }\n  }, [theme]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n  };\n\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else if (theme === 'dark') {\n      setTheme('auto');\n    } else {\n      setTheme('light');\n    }\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    resolvedTheme,\n    setTheme: handleSetTheme,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Hook pour les animations de transition de thème\nexport const useThemeTransition = () => {\n  const { resolvedTheme } = useTheme();\n  \n  useEffect(() => {\n    // Ajouter une classe de transition temporaire\n    document.documentElement.classList.add('theme-transition');\n    \n    const timer = setTimeout(() => {\n      document.documentElement.classList.remove('theme-transition');\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [resolvedTheme]);\n};\n\n// Utilitaires pour les composants\nexport const themeClasses = {\n  light: {\n    bg: 'bg-white',\n    bgSecondary: 'bg-gray-50',\n    text: 'text-gray-900',\n    textSecondary: 'text-gray-600',\n    border: 'border-gray-200',\n    card: 'bg-white shadow-sm',\n    input: 'bg-white border-gray-300',\n    button: 'bg-blue-600 hover:bg-blue-700 text-white',\n  },\n  dark: {\n    bg: 'bg-gray-900',\n    bgSecondary: 'bg-gray-800',\n    text: 'text-gray-100',\n    textSecondary: 'text-gray-300',\n    border: 'border-gray-700',\n    card: 'bg-gray-800 shadow-lg',\n    input: 'bg-gray-700 border-gray-600 text-white',\n    button: 'bg-blue-500 hover:bg-blue-600 text-white',\n  },\n};\n\nexport const getThemeClasses = (resolvedTheme: ResolvedTheme) => {\n  return themeClasses[resolvedTheme];\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\WidgetContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\nexport type WidgetSize = 'small' | 'medium' | 'large' | 'xl';\nexport type WidgetType = \n  | 'projects-overview' \n  | 'tasks-summary' \n  | 'budget-tracker' \n  | 'team-activity' \n  | 'weather' \n  | 'calendar' \n  | 'notifications' \n  | 'quick-actions'\n  | 'gantt-preview'\n  | 'financial-kpi'\n  | 'equipment-status'\n  | 'recent-documents';\n\nexport interface Widget {\n  id: string;\n  type: WidgetType;\n  title: string;\n  size: WidgetSize;\n  position: { x: number; y: number };\n  isVisible: boolean;\n  config?: Record<string, unknown>;\n  lastUpdated?: Date;\n}\n\nexport interface WidgetLayout {\n  id: string;\n  name: string;\n  widgets: Widget[];\n  isDefault?: boolean;\n}\n\ninterface WidgetContextType {\n  layouts: WidgetLayout[];\n  currentLayout: WidgetLayout | null;\n  availableWidgets: WidgetType[];\n  setCurrentLayout: (layoutId: string) => void;\n  createLayout: (name: string) => void;\n  deleteLayout: (layoutId: string) => void;\n  addWidget: (type: WidgetType, position?: { x: number; y: number }) => void;\n  removeWidget: (widgetId: string) => void;\n  updateWidget: (widgetId: string, updates: Partial<Widget>) => void;\n  moveWidget: (widgetId: string, position: { x: number; y: number }) => void;\n  resizeWidget: (widgetId: string, size: WidgetSize) => void;\n  toggleWidgetVisibility: (widgetId: string) => void;\n  resetToDefault: () => void;\n  exportLayout: () => string;\n  importLayout: (layoutData: string) => void;\n}\n\nconst WidgetContext = createContext<WidgetContextType | undefined>(undefined);\n\nexport const useWidgets = () => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidgets must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Configuration par défaut des widgets\nconst defaultWidgets: Widget[] = [\n  {\n    id: 'projects-overview-1',\n    type: 'projects-overview',\n    title: 'Vue d\\'ensemble des projets',\n    size: 'large',\n    position: { x: 0, y: 0 },\n    isVisible: true,\n  },\n  {\n    id: 'tasks-summary-1',\n    type: 'tasks-summary',\n    title: 'Résumé des tâches',\n    size: 'medium',\n    position: { x: 2, y: 0 },\n    isVisible: true,\n  },\n  {\n    id: 'budget-tracker-1',\n    type: 'budget-tracker',\n    title: 'Suivi budgétaire',\n    size: 'medium',\n    position: { x: 0, y: 1 },\n    isVisible: true,\n  },\n  {\n    id: 'team-activity-1',\n    type: 'team-activity',\n    title: 'Activité de l\\'équipe',\n    size: 'small',\n    position: { x: 2, y: 1 },\n    isVisible: true,\n  },\n  {\n    id: 'weather-1',\n    type: 'weather',\n    title: 'Météo du chantier',\n    size: 'small',\n    position: { x: 3, y: 1 },\n    isVisible: true,\n  },\n  {\n    id: 'quick-actions-1',\n    type: 'quick-actions',\n    title: 'Actions rapides',\n    size: 'small',\n    position: { x: 3, y: 0 },\n    isVisible: true,\n  },\n];\n\nconst defaultLayout: WidgetLayout = {\n  id: 'default',\n  name: 'Layout par défaut',\n  widgets: defaultWidgets,\n  isDefault: true,\n};\n\ninterface WidgetProviderProps {\n  children: React.ReactNode;\n}\n\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ children }) => {\n  const [layouts, setLayouts] = useState<WidgetLayout[]>([defaultLayout]);\n  const [currentLayoutId, setCurrentLayoutId] = useState<string>('default');\n\n  const currentLayout = layouts.find(l => l.id === currentLayoutId) || null;\n\n  const availableWidgets: WidgetType[] = [\n    'projects-overview',\n    'tasks-summary',\n    'budget-tracker',\n    'team-activity',\n    'weather',\n    'calendar',\n    'notifications',\n    'quick-actions',\n    'gantt-preview',\n    'financial-kpi',\n    'equipment-status',\n    'recent-documents',\n  ];\n\n  // Charger les layouts depuis localStorage\n  useEffect(() => {\n    const savedLayouts = localStorage.getItem('dashboard-layouts');\n    const savedCurrentLayout = localStorage.getItem('current-layout');\n    \n    if (savedLayouts) {\n      try {\n        const parsedLayouts = JSON.parse(savedLayouts);\n        setLayouts(parsedLayouts);\n      } catch (error) {\n        console.error('Erreur lors du chargement des layouts:', error);\n      }\n    }\n    \n    if (savedCurrentLayout) {\n      setCurrentLayoutId(savedCurrentLayout);\n    }\n  }, []);\n\n  // Sauvegarder les layouts dans localStorage\n  useEffect(() => {\n    localStorage.setItem('dashboard-layouts', JSON.stringify(layouts));\n    localStorage.setItem('current-layout', currentLayoutId);\n  }, [layouts, currentLayoutId]);\n\n  const setCurrentLayout = (layoutId: string) => {\n    setCurrentLayoutId(layoutId);\n  };\n\n  const createLayout = (name: string) => {\n    const newLayout: WidgetLayout = {\n      id: `layout-${Date.now()}`,\n      name,\n      widgets: [...defaultWidgets],\n    };\n    setLayouts(prev => [...prev, newLayout]);\n    setCurrentLayoutId(newLayout.id);\n  };\n\n  const deleteLayout = (layoutId: string) => {\n    if (layoutId === 'default') return; // Ne pas supprimer le layout par défaut\n    \n    setLayouts(prev => prev.filter(l => l.id !== layoutId));\n    if (currentLayoutId === layoutId) {\n      setCurrentLayoutId('default');\n    }\n  };\n\n  const addWidget = (type: WidgetType, position = { x: 0, y: 0 }) => {\n    if (!currentLayout) return;\n\n    const newWidget: Widget = {\n      id: `${type}-${Date.now()}`,\n      type,\n      title: getWidgetTitle(type),\n      size: getDefaultSize(type),\n      position,\n      isVisible: true,\n      lastUpdated: new Date(),\n    };\n\n    setLayouts(prev => prev.map(layout => \n      layout.id === currentLayoutId\n        ? { ...layout, widgets: [...layout.widgets, newWidget] }\n        : layout\n    ));\n  };\n\n  const removeWidget = (widgetId: string) => {\n    setLayouts(prev => prev.map(layout => \n      layout.id === currentLayoutId\n        ? { ...layout, widgets: layout.widgets.filter(w => w.id !== widgetId) }\n        : layout\n    ));\n  };\n\n  const updateWidget = (widgetId: string, updates: Partial<Widget>) => {\n    setLayouts(prev => prev.map(layout => \n      layout.id === currentLayoutId\n        ? {\n            ...layout,\n            widgets: layout.widgets.map(widget =>\n              widget.id === widgetId\n                ? { ...widget, ...updates, lastUpdated: new Date() }\n                : widget\n            )\n          }\n        : layout\n    ));\n  };\n\n  const moveWidget = (widgetId: string, position: { x: number; y: number }) => {\n    updateWidget(widgetId, { position });\n  };\n\n  const resizeWidget = (widgetId: string, size: WidgetSize) => {\n    updateWidget(widgetId, { size });\n  };\n\n  const toggleWidgetVisibility = (widgetId: string) => {\n    const widget = currentLayout?.widgets.find(w => w.id === widgetId);\n    if (widget) {\n      updateWidget(widgetId, { isVisible: !widget.isVisible });\n    }\n  };\n\n  const resetToDefault = () => {\n    setLayouts(prev => prev.map(layout => \n      layout.id === currentLayoutId\n        ? { ...layout, widgets: [...defaultWidgets] }\n        : layout\n    ));\n  };\n\n  const exportLayout = (): string => {\n    if (!currentLayout) return '';\n    return JSON.stringify(currentLayout, null, 2);\n  };\n\n  const importLayout = (layoutData: string) => {\n    try {\n      const importedLayout = JSON.parse(layoutData) as WidgetLayout;\n      importedLayout.id = `imported-${Date.now()}`;\n      importedLayout.name = `${importedLayout.name} (Importé)`;\n      \n      setLayouts(prev => [...prev, importedLayout]);\n      setCurrentLayoutId(importedLayout.id);\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation du layout:', error);\n    }\n  };\n\n  const value: WidgetContextType = {\n    layouts,\n    currentLayout,\n    availableWidgets,\n    setCurrentLayout,\n    createLayout,\n    deleteLayout,\n    addWidget,\n    removeWidget,\n    updateWidget,\n    moveWidget,\n    resizeWidget,\n    toggleWidgetVisibility,\n    resetToDefault,\n    exportLayout,\n    importLayout,\n  };\n\n  return (\n    <WidgetContext.Provider value={value}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Utilitaires\nconst getWidgetTitle = (type: WidgetType): string => {\n  const titles: Record<WidgetType, string> = {\n    'projects-overview': 'Vue d\\'ensemble des projets',\n    'tasks-summary': 'Résumé des tâches',\n    'budget-tracker': 'Suivi budgétaire',\n    'team-activity': 'Activité de l\\'équipe',\n    'weather': 'Météo du chantier',\n    'calendar': 'Calendrier',\n    'notifications': 'Notifications',\n    'quick-actions': 'Actions rapides',\n    'gantt-preview': 'Aperçu Gantt',\n    'financial-kpi': 'KPI Financiers',\n    'equipment-status': 'État de l\\'équipement',\n    'recent-documents': 'Documents récents',\n  };\n  return titles[type];\n};\n\nconst getDefaultSize = (type: WidgetType): WidgetSize => {\n  const sizes: Record<WidgetType, WidgetSize> = {\n    'projects-overview': 'large',\n    'tasks-summary': 'medium',\n    'budget-tracker': 'medium',\n    'team-activity': 'small',\n    'weather': 'small',\n    'calendar': 'medium',\n    'notifications': 'small',\n    'quick-actions': 'small',\n    'gantt-preview': 'xl',\n    'financial-kpi': 'large',\n    'equipment-status': 'medium',\n    'recent-documents': 'medium',\n  };\n  return sizes[type];\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\projectConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\projectContextUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\projectTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\contexts\\projectUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\data\\materials.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useCurrency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useCurrentUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useKeyboardShortcuts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useOfflineData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useProjects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useStructuredQuote.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useTaskStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useToast.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'removeToast'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [removeToast]","fix":{"range":[508,510],"text":"[removeToast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { ToastProps } from '../components/UI/Toast';\r\n\r\nexport const useToast = () => {\r\n  const [toasts, setToasts] = useState<ToastProps[]>([]);\r\n\r\n  const addToast = useCallback((toast: Omit<ToastProps, 'id' | 'onClose'>) => {\r\n    const id = Math.random().toString(36).substr(2, 9);\r\n    const newToast: ToastProps = {\r\n      ...toast,\r\n      id,\r\n      onClose: removeToast\r\n    };\r\n    \r\n    setToasts(prev => [...prev, newToast]);\r\n    return id;\r\n  }, []); // removeToast is stable, no need to include in deps\r\n\r\n  const removeToast = useCallback((id: string) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  }, []);\r\n\r\n  const success = useCallback((title: string, message?: string) => {\r\n    return addToast({ type: 'success', title, message });\r\n  }, [addToast]);\r\n\r\n  const error = useCallback((title: string, message?: string) => {\r\n    return addToast({ type: 'error', title, message });\r\n  }, [addToast]);\r\n\r\n  const warning = useCallback((title: string, message?: string) => {\r\n    return addToast({ type: 'warning', title, message });\r\n  }, [addToast]);\r\n\r\n  const info = useCallback((title: string, message?: string) => {\r\n    return addToast({ type: 'info', title, message });\r\n  }, [addToast]);\r\n\r\n  return {\r\n    toasts,\r\n    addToast,\r\n    removeToast,\r\n    success,\r\n    error,\r\n    warning,\r\n    info\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\hooks\\useUserRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\lucide-react.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\Pricing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\ProjectBudget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\Quotes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\RegisterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\Subscription.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2658,2661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2658,2661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3983,3986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3983,3986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Check, Star, Smartphone, CreditCard, AlertCircle } from 'lucide-react';\nimport { PaymentService } from '../services/PaymentService';\nimport { usePayment } from '../contexts/PaymentContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport MobileMoneyPayment from '../components/payments/MobileMoneyPayment';\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: {\n    monthly: number;\n    yearly: number;\n  };\n  currency: string;\n  features: string[];\n  popular?: boolean;\n  color: string;\n}\n\nconst SUBSCRIPTION_PLANS: SubscriptionPlan[] = [\n  {\n    id: 'basic',\n    name: 'Basique',\n    price: { monthly: 5000, yearly: 50000 },\n    currency: 'XOF',\n    features: [\n      '5 projets maximum',\n      '10 utilisateurs',\n      'Support par email',\n      'Rapports de base',\n      'Stockage 1GB'\n    ],\n    color: 'blue'\n  },\n  {\n    id: 'pro',\n    name: 'Professionnel',\n    price: { monthly: 15000, yearly: 150000 },\n    currency: 'XOF',\n    features: [\n      '50 projets maximum',\n      '100 utilisateurs',\n      'Support prioritaire',\n      'Rapports avancés',\n      'Stockage 10GB',\n      'API d\\'intégration',\n      'Diagrammes de Gantt'\n    ],\n    popular: true,\n    color: 'green'\n  },\n  {\n    id: 'enterprise',\n    name: 'Entreprise',\n    price: { monthly: 50000, yearly: 500000 },\n    currency: 'XOF',\n    features: [\n      'Projets illimités',\n      'Utilisateurs illimités',\n      'Support 24/7',\n      'Rapports personnalisés',\n      'Stockage illimité',\n      'API complète',\n      'Formation équipe',\n      'Gestionnaire dédié'\n    ],\n    color: 'purple'\n  }\n];\n\nexport const Subscription: React.FC = () => {\n  const [selectedPlan, setSelectedPlan] = useState<SubscriptionPlan | null>(null);\n  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\n  const [showPayment, setShowPayment] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const { user } = useAuth();\n  const { createPayment, updatePaymentStatus } = usePayment();\n  const navigate = useNavigate();\n\n  // Calcul des économies pour l'abonnement annuel\n  const calculateSavings = (plan: SubscriptionPlan) => {\n    const monthlyTotal = plan.price.monthly * 12;\n    const yearlyPrice = plan.price.yearly;\n    return monthlyTotal - yearlyPrice;\n  };\n\n  // Sélection d'un plan\n  const handlePlanSelect = useCallback((plan: SubscriptionPlan) => {\n    setSelectedPlan(plan);\n    setShowPayment(true);\n  }, []);\n\n  // Succès du paiement\n  const handlePaymentSuccess = useCallback(async (response: any) => {\n    if (!selectedPlan || !user) return;\n\n    setIsProcessing(true);\n    \n    try {\n      // Mettre à jour le statut du paiement\n      if (response.transaction_id) {\n        // Créer l'enregistrement de paiement\n        const paymentData = PaymentService.createPaymentRecord(\n          user.uid,\n          billingCycle === 'monthly' ? selectedPlan.price.monthly : selectedPlan.price.yearly,\n          selectedPlan.currency,\n          user.phoneNumber || '',\n          `Abonnement ${selectedPlan.name} - ${billingCycle === 'monthly' ? 'Mensuel' : 'Annuel'}`,\n          response.tx_ref\n        );\n\n        const paymentId = await createPayment(paymentData);\n        await updatePaymentStatus(paymentId, 'successful', response.transaction_id);\n      }\n\n      // Rediriger vers le dashboard\n      navigate('/dashboard', { \n        state: { \n          message: `Félicitations ! Votre abonnement ${selectedPlan.name} est maintenant actif.`,\n          type: 'success'\n        }\n      });\n    } catch (error) {\n      console.error('Erreur lors du traitement du paiement:', error);\n    } finally {\n      setIsProcessing(false);\n      setShowPayment(false);\n    }\n  }, [selectedPlan, user, billingCycle, createPayment, updatePaymentStatus, navigate]);\n\n  // Erreur de paiement\n  const handlePaymentError = useCallback((error: any) => {\n    console.error('Erreur de paiement:', error);\n    setIsProcessing(false);\n    // Vous pouvez afficher un message d'erreur ici\n  }, []);\n\n  // Fermeture du paiement\n  const handlePaymentClose = useCallback(() => {\n    setShowPayment(false);\n    setSelectedPlan(null);\n  }, []);\n\n  if (showPayment && selectedPlan && user) {\n    const amount = billingCycle === 'monthly' ? selectedPlan.price.monthly : selectedPlan.price.yearly;\n    \n    return (\n      <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n        <div className=\"max-w-lg mx-auto\">\n          <div className=\"text-center mb-8\">\n            <button\n              onClick={handlePaymentClose}\n              className=\"text-blue-600 hover:text-blue-800 mb-4 inline-flex items-center\"\n            >\n              ← Retour aux plans\n            </button>\n            <h2 className=\"text-2xl font-bold text-gray-900\">\n              Finaliser votre abonnement\n            </h2>\n            <p className=\"text-gray-600 mt-2\">\n              Plan {selectedPlan.name} - {billingCycle === 'monthly' ? 'Mensuel' : 'Annuel'}\n            </p>\n          </div>\n\n          <MobileMoneyPayment\n            amount={amount}\n            currency={selectedPlan.currency}\n            customerEmail={user.email || ''}\n            customerPhone={user.phoneNumber || ''}\n            customerName={user.displayName || user.email || ''}\n            description={`Abonnement ${selectedPlan.name} - ${billingCycle === 'monthly' ? 'Mensuel' : 'Annuel'}`}\n            onSuccess={handlePaymentSuccess}\n            onError={handlePaymentError}\n            onClose={handlePaymentClose}\n            isProduction={false} // Changez à true en production\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* En-tête */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Choisissez votre plan d'abonnement\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Gérez vos projets efficacement avec nos outils professionnels\n          </p>\n\n          {/* Sélecteur de cycle de facturation */}\n          <div className=\"inline-flex bg-gray-200 rounded-lg p-1 mb-8\">\n            <button\n              onClick={() => setBillingCycle('monthly')}\n              className={`px-6 py-2 rounded-md font-medium transition-all ${\n                billingCycle === 'monthly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Mensuel\n            </button>\n            <button\n              onClick={() => setBillingCycle('yearly')}\n              className={`px-6 py-2 rounded-md font-medium transition-all ${\n                billingCycle === 'yearly'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Annuel\n              <span className=\"ml-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                -17%\n              </span>\n            </button>\n          </div>\n        </div>\n\n        {/* Plans d'abonnement */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n          {SUBSCRIPTION_PLANS.map((plan) => {\n            const price = billingCycle === 'monthly' ? plan.price.monthly : plan.price.yearly;\n            const savings = calculateSavings(plan);\n            \n            return (\n              <div\n                key={plan.id}\n                className={`relative bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl ${\n                  plan.popular ? 'ring-2 ring-green-500 scale-105' : ''\n                }`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute top-0 left-0 right-0 bg-green-500 text-white text-center py-2 text-sm font-medium\">\n                    <Star className=\"inline w-4 h-4 mr-1\" />\n                    Le plus populaire\n                  </div>\n                )}\n\n                <div className={`p-8 ${plan.popular ? 'pt-16' : ''}`}>\n                  {/* Nom du plan */}\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plan.name}</h3>\n                  \n                  {/* Prix */}\n                  <div className=\"mb-6\">\n                    <div className=\"flex items-baseline\">\n                      <span className=\"text-4xl font-bold text-gray-900\">\n                        {price.toLocaleString()}\n                      </span>\n                      <span className=\"text-gray-600 ml-2\">{plan.currency}</span>\n                      <span className=\"text-gray-500 ml-1\">\n                        /{billingCycle === 'monthly' ? 'mois' : 'an'}\n                      </span>\n                    </div>\n                    \n                    {billingCycle === 'yearly' && savings > 0 && (\n                      <p className=\"text-green-600 text-sm mt-1\">\n                        Économisez {savings.toLocaleString()} {plan.currency}/an\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Fonctionnalités */}\n                  <ul className=\"space-y-3 mb-8\">\n                    {plan.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start\">\n                        <Check className=\"w-5 h-5 text-green-500 mr-3 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  {/* Bouton d'action */}\n                  <button\n                    onClick={() => handlePlanSelect(plan)}\n                    disabled={isProcessing}\n                    className={`w-full py-3 px-6 rounded-lg font-semibold transition-all duration-200 ${\n                      plan.popular\n                        ? 'bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl'\n                        : 'bg-gray-900 hover:bg-gray-800 text-white'\n                    } ${isProcessing ? 'opacity-50 cursor-not-allowed' : ''}`}\n                  >\n                    {isProcessing ? 'Traitement...' : 'Choisir ce plan'}\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Méthodes de paiement */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8 mb-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">\n            Méthodes de paiement acceptées\n          </h3>\n          \n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div className=\"flex items-center p-4 border-2 border-orange-200 rounded-lg bg-orange-50\">\n              <Smartphone className=\"w-8 h-8 text-orange-600 mr-4\" />\n              <div>\n                <h4 className=\"font-semibold text-gray-900\">Mobile Money</h4>\n                <p className=\"text-sm text-gray-600\">Orange Money, MTN Money, Airtel Money</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center p-4 border-2 border-blue-200 rounded-lg bg-blue-50\">\n              <CreditCard className=\"w-8 h-8 text-blue-600 mr-4\" />\n              <div>\n                <h4 className=\"font-semibold text-gray-900\">Cartes bancaires</h4>\n                <p className=\"text-sm text-gray-600\">Visa, Mastercard, cartes locales</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Garantie */}\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center bg-green-50 text-green-800 px-6 py-3 rounded-full\">\n            <AlertCircle className=\"w-5 h-5 mr-2\" />\n            <span className=\"font-medium\">Garantie satisfait ou remboursé 30 jours</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Subscription;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\pages\\UltraModernHomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\PaymentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\brandingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\budgetIntegrationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\currencyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\documentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\equipmentService.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1308,1311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1308,1311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\financialService.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10618,10621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10618,10621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\locationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\migrationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\pdfService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\pdf\\quotePdf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\projectService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\purchaseOrderService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\quotesService.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-unused-vars').","line":86,"column":13,"severity":1,"nodeType":null,"fix":{"range":[1869,1930],"text":" "}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ignoredId' is assigned a value but never used.","line":229,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ignoredCreatedAt' is assigned a value but never used.","line":229,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":65,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":288,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":288,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":294,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":294,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":307,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":307,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is assigned a value but never used.","line":314,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { \n    collection, \n    addDoc, \n    getDocs, \n    doc, \n    getDoc,\n    setDoc,\n    updateDoc, \n    deleteDoc, \n    query, \n    orderBy, \n    where,\n    Timestamp,\n    onSnapshot,\n    QuerySnapshot,\n    Unsubscribe,\n    DocumentData\n} from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Interface pour les devis (compatible avec QuoteCreatorSimple)\nexport interface Quote {\n    id: string;\n    title: string;\n    clientName: string;\n    clientEmail: string;\n    clientPhone: string;\n    companyName: string;\n    projectType: string;\n    phases: Phase[];\n    subtotal: number;\n    taxRate: number;\n    taxAmount: number;\n    totalAmount: number;\n    status: 'draft' | 'sent' | 'accepted' | 'rejected' | 'expired';\n    validityDays: number;\n    notes: string;\n    paymentTerms: string;\n    createdAt: string;\n    updatedAt: string;\n}\n\nexport interface Phase {\n    id: string;\n    name: string;\n    description: string;\n    tasks: Task[];\n    totalPrice: number;\n    expanded: boolean;\n}\n\nexport interface Task {\n    id: string;\n    name: string;\n    description: string;\n    articles: Article[];\n    totalPrice: number;\n    expanded: boolean;\n}\n\nexport interface Article {\n    id: string;\n    name: string;\n    description: string;\n    quantity: number;\n    unit: string;\n    unitPrice: number;\n    totalPrice: number;\n}\n\nconst QUOTES_COLLECTION = 'quotes';\n\n/**\n * Service Firebase pour la gestion des devis\n */\nexport class QuotesService {\n    \n    /**\n     * Créer un nouveau devis dans Firebase\n     */\n    static async createQuote(quote: Omit<Quote, 'id'>): Promise<string> {\n        try {\n            // Ne jamais stocker un champ \"id\" dans le document Firestore\n            // même si on nous passe un objet contenant potentiellement un id accidentellement.\n            // On s'assure ici que le payload ne contient pas de clé id.\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { /* id: _ignoredId, */ ...safeQuote } = (quote as unknown) as Record<string, unknown>;\n\n            const quoteData = {\n                ...(safeQuote as Omit<Quote, 'id'>),\n                createdAt: Timestamp.now(),\n                updatedAt: Timestamp.now()\n            };\n            \n            const docRef = await addDoc(collection(db, QUOTES_COLLECTION), quoteData);\n            console.log('Devis créé avec ID:', docRef.id);\n            return docRef.id;\n        } catch (error) {\n            console.error('Erreur lors de la création du devis:', error);\n            throw new Error('Impossible de créer le devis');\n        }\n\n    }\n\n    /**\n     * Récupérer un devis par ID\n     */\n    static async getQuoteById(id: string): Promise<Quote | null> {\n        try {\n            const ref = doc(db, QUOTES_COLLECTION, id);\n            const snap = await getDoc(ref);\n            if (!snap.exists()) return null;\n            const data = snap.data() as DocumentData;\n            return {\n                ...data,\n                id: snap.id, // s'assurer que l'id du document Firestore prévaut\n                createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt,\n                updatedAt: data.updatedAt?.toDate?.()?.toISOString() || data.updatedAt\n            } as Quote;\n        } catch (error) {\n            console.error('Erreur lors de la récupération du devis par ID:', error);\n            throw new Error('Impossible de récupérer le devis');\n        }\n    }\n\n    /**\n     * Récupérer tous les devis\n     */\n    static async getAllQuotes(): Promise<Quote[]> {\n        try {\n            const q = query(\n                collection(db, QUOTES_COLLECTION), \n                orderBy('createdAt', 'desc')\n            );\n            \n            const querySnapshot = await getDocs(q);\n            const quotes: Quote[] = [];\n            \n            querySnapshot.forEach((doc) => {\n                const data = doc.data();\n                quotes.push({\n                    ...data,\n                    id: doc.id, // id en dernier pour éviter d'être écrasé par data.id\n                    createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt,\n                    updatedAt: data.updatedAt?.toDate?.()?.toISOString() || data.updatedAt\n                } as Quote);\n            });\n            \n            return quotes;\n        } catch (error) {\n            console.error('Erreur lors de la récupération des devis:', error);\n            throw new Error('Impossible de récupérer les devis');\n        }\n    }\n\n    /**\n     * S'abonner en temps réel à la liste des devis (trié par date de création desc)\n     */\n    static subscribeToQuotes(callback: (quotes: Quote[]) => void): Unsubscribe {\n        const q = query(\n            collection(db, QUOTES_COLLECTION),\n            orderBy('createdAt', 'desc')\n        );\n        return onSnapshot(q, (snapshot: QuerySnapshot) => {\n            const quotes: Quote[] = snapshot.docs.map((d) => {\n                const data = d.data() as DocumentData;\n                return {\n                    ...data,\n                    id: d.id, // id en dernier\n                    createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt,\n                    updatedAt: data.updatedAt?.toDate?.()?.toISOString() || data.updatedAt\n                } as Quote;\n            });\n            callback(quotes);\n        });\n    }\n\n    /**\n     * S'abonner en temps réel au compteur total des devis\n     */\n    static subscribeToQuoteCount(callback: (count: number) => void): Unsubscribe {\n        const q = query(\n            collection(db, QUOTES_COLLECTION)\n        );\n        return onSnapshot(q, (snapshot: QuerySnapshot) => {\n            callback(snapshot.size);\n        });\n    }\n\n    /**\n     * Récupérer les devis par statut\n     */\n    static async getQuotesByStatus(status: string): Promise<Quote[]> {\n        try {\n            const q = query(\n                collection(db, QUOTES_COLLECTION),\n                where('status', '==', status),\n                orderBy('createdAt', 'desc')\n            );\n            \n            const querySnapshot = await getDocs(q);\n            const quotes: Quote[] = [];\n            \n            querySnapshot.forEach((doc) => {\n                const data = doc.data();\n                quotes.push({\n                    id: doc.id,\n                    ...data,\n                    createdAt: data.createdAt?.toDate?.()?.toISOString() || data.createdAt,\n                    updatedAt: data.updatedAt?.toDate?.()?.toISOString() || data.updatedAt\n                } as Quote);\n            });\n            \n            return quotes;\n        } catch (error) {\n            console.error('Erreur lors de la récupération des devis par statut:', error);\n            throw new Error('Impossible de récupérer les devis');\n        }\n    }\n\n    /**\n     * Mettre à jour un devis\n     */\n    static async updateQuote(quoteId: string, updates: Partial<Quote>): Promise<void> {\n        try {\n            const quoteRef = doc(db, QUOTES_COLLECTION, quoteId);\n            // Ne jamais pousser 'id' (ou écraser createdAt) dans Firestore\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { id: _ignoredId, createdAt: _ignoredCreatedAt, ...rest } = (updates as Partial<Quote>);\n            const updateData = {\n                ...rest,\n                updatedAt: Timestamp.now()\n            };\n            \n            await updateDoc(quoteRef, updateData);\n            console.log('Devis mis à jour:', quoteId);\n        } catch (error) {\n            console.error('Erreur lors de la mise à jour du devis:', error);\n            throw new Error('Impossible de mettre à jour le devis');\n        }\n    }\n\n    /**\n     * Supprimer un devis\n     */\n    static async deleteQuote(quoteId: string): Promise<void> {\n        try {\n            const docRef = doc(db, QUOTES_COLLECTION, quoteId);\n            await deleteDoc(docRef);\n            console.log('Devis supprimé avec succès:', quoteId);\n        } catch (error) {\n            console.error('Erreur lors de la suppression du devis:', error);\n            throw new Error('Impossible de supprimer le devis');\n        }\n    }\n\n    /**\n     * Rechercher des devis par nom de client\n     */\n    static async searchQuotesByClient(clientName: string): Promise<Quote[]> {\n        try {\n            // Note: Firestore ne supporte pas les recherches textuelles complexes\n            // Cette méthode récupère tous les devis et filtre côté client\n            const allQuotes = await this.getAllQuotes();\n            \n            return allQuotes.filter(quote => \n                quote.clientName.toLowerCase().includes(clientName.toLowerCase())\n            );\n        } catch (error) {\n            console.error('Erreur lors de la recherche de devis:', error);\n            throw new Error('Impossible de rechercher les devis');\n        }\n    }\n\n    /**\n     * Sauvegarder un devis (créer ou mettre à jour selon l'existence dans Firebase)\n     */\n    static async saveQuote(quote: Quote): Promise<string> {\n        try {\n            // Si le devis a un ID, vérifier s'il existe dans Firebase\n            if (quote.id && quote.id.length > 0) {\n                try {\n                    const docRef = doc(db, QUOTES_COLLECTION, quote.id);\n                    const docSnap = await getDoc(docRef);\n                    if (docSnap.exists()) {\n                        // Le document existe, on le met à jour (exclure l'ID)\n                        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                        const { id: _id, ...updateData } = quote as Quote;\n                        await this.updateQuote(quote.id, updateData as Partial<Omit<Quote, 'id'>>);\n                        return quote.id;\n                    } else {\n                        // Le document n'existe pas, on le crée avec l'ID spécifié\n                        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                        const { id: _id, ...rest } = quote as Quote;\n                        const quoteData: Omit<Quote, 'id' | 'createdAt' | 'updatedAt'> & { createdAt: Timestamp; updatedAt: Timestamp } = {\n                            ...(rest as Omit<Quote, 'id' | 'createdAt' | 'updatedAt'>),\n                            createdAt: Timestamp.now(),\n                            updatedAt: Timestamp.now()\n                        };\n                        await setDoc(docRef, quoteData as unknown as DocumentData);\n                        return quote.id;\n                    }\n                } catch (checkError) {\n                    console.error('Erreur lors de la vérification du document:', checkError);\n                    // En cas d'erreur de vérification, essayer de créer un nouveau document\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const { id: _id, ...quoteWithoutId } = quote as Quote;\n                    const newId = await this.createQuote(quoteWithoutId as Omit<Quote, 'id'>);\n                    return newId;\n                }\n            } else {\n                // Pas d'ID, créer un nouveau devis\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const { id: _id, ...quoteWithoutId } = quote as Quote;\n                const newId = await this.createQuote(quoteWithoutId as Omit<Quote, 'id'>);\n                return newId;\n            }\n        } catch (error) {\n            console.error('Erreur lors de la sauvegarde du devis:', error);\n            throw new Error('Impossible de sauvegarder le devis');\n        }\n    }\n}\n\nexport default QuotesService;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\taskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\teamService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\transactionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\services\\userSettingsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\theme\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\ProjectTask.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\StructuredQuote.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\finance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\project.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskStatus' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TaskStatus } from '../contexts/projectTypes';\r\n\r\n// Unify project types: re-export from contexts/projectTypes\r\nexport * from '../../contexts/projectTypes';\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\purchaseOrder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\types\\team.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\cleanQuotesData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\clearAllData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\clearData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\currency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\executeMigration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\exportBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\taskUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\utils\\uploadPdfToFirebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jepssen\\Desktop\\Patrick\\IntuitionConcept\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]